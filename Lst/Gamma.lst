C51 COMPILER V8.02   GAMMA                                                                 08/07/2015 16:22:30 PAGE 1   


C51 COMPILER V8.02, COMPILATION OF MODULE GAMMA
OBJECT MODULE PLACED IN .\Bin\ADS\AXI\104N\Gamma.obj
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE App\Gamma.c LARGE OPTIMIZE(9,SPEED) BROWSE INCDIR(.\App;.\App\OSD;.\App\Use
                    -r;.\Lib;.\Lib\NT68655_770_850 Series;.\Lib\ScalerCfg;.\Phy\Panel;.\Phy\SI\NVT\Board;.\Phy\SI\NVT\Component;.\Phy\SI\NVT\
                    -Keypad;.\Sys;.\Sys\SI\NVT) DEFINE(SCALER_TYPE=NT68857,NT68857_DEMO,FLASH_BANK=4,X_ADS,X215) PRINT(.\Lst\Gamma.lst) OBJEC
                    -T(.\Bin\ADS\AXI\104N\Gamma.obj)

line level    source

   1          /******************************************************************************/
   2          /*                       Novatek MicroElectronics Corp.                       */
   3          /*       6F, No. 1-2, Innovation Road I, Science-Based Industrial Park,       */
   4          /*                         HsinChu 300, Taiwan, R.O.C.                        */
   5          /*                 TEL:886-3-567-0889       FAX:886-3-577-0132                */
   6          /*                            All Rights Reserved                             */
   7          /******************************************************************************/
   8          
   9          //******************************************************************************
  10          // I N C L U D E   F I L E S
  11          //******************************************************************************
  12          #include "Include.h"
  13          
  14          #if ENABLE_GAMMA == ON
  15          
  16          #include "GammaData.c"
  17          
  18          //******************************************************************************
  19          // M A C R O   D E F I N I T I O N S
  20          //******************************************************************************
  21          
  22          //******************************************************************************
  23          // S T A T I C   V A R I A B L E S
  24          //******************************************************************************
  25          
  26          //******************************************************************************
  27          // G L O B A L   V A R I A B L E S
  28          //******************************************************************************
  29          
  30          //******************************************************************************
  31          // S T A T I C   V A R I A B L E S
  32          //******************************************************************************
  33              
  34          //******************************************************************************
  35          // E X T E R N A L   V A R I A B L E   P R O T O T Y P E S
  36          //******************************************************************************
  37          
  38          //******************************************************************************
  39          // S T A T I C   F U N C T I O N   P R O T O T Y P E S
  40          //******************************************************************************
  41          
  42          //******************************************************************************
  43          // E X T E R N A L   F U N C T I O N   P R O T O T Y P E S
  44          //******************************************************************************
  45          
  46          //******************************************************************************
  47          // Prototype: 
  48          //  void LoadGamma(void)
  49          // Parameters:
  50          //  None
  51          // Return:
  52          //  None
C51 COMPILER V8.02   GAMMA                                                                 08/07/2015 16:22:30 PAGE 2   

  53          // Purpose:
  54          //  Load gamma tables
  55          // Notes:
  56          //  None
  57          //******************************************************************************
  58          void LoadGamma(void)
  59          {
  60   1          #ifdef GAMMA_TOTAL_STEP     
  61   1              
  62   1          GMAPI_DisableGamma();
  63   1          GMAPI_LoadGamma320(GammaTabls + CalibData.ucGammaVal);
  64   1          GMAPI_EnableGamma();
  65   1          
  66   1          
  67   1          #else
                 
                  GMAPI_LoadGamma320(&GammaTable);
                  GMAPI_EnableGamma();
                  
                  #endif
  73   1      }
  74          
  75          #endif //#if ENABLE_GAMMA == ON
  76          
  77          #if ENABLE_PRE_REV_GAMMA == ON
              void LoadPreGamma(void)
              {
              #if IS_NT68790_SERIES // 16 entries, NT68770 and NT68850 are 32 entries
              const UCHAR DefaultPreGammaRGBLUT[32]={
                  0x00,0x00,0x8E,0x00,0x99,0x02,0x61,0x06,
                  0x0C,0x0C,0xB8,0x13,0x7B,0x1D,0x6B,0x29,
                  0x98,0x37,0x13,0x48,0xE9,0x5A,0x27,0x70,
                  0xD9,0x87,0x0B,0xA2,0xC6,0xBE,0x14,0xDE,
              };
                  GMAPI_LoadPreGamma16bit(16, DefaultPreGammaRGBLUT);
                  GMAPI_EnablePreGamma();
                  GMAPI_EnableRevGamma();
              #endif
              }
              
              void LoadRevGamma(void)
              {
              #if IS_NT68790_SERIES //32 entries
              const UCHAR DefaultRevGammaRGBLUT[32]=
              {
                  0x00,0x0F,0x15,0x19,0x1C,0x22,0x27,0x2E,0x35,0x3F,0x48,0x50,0x57,0x5D,0x63,0x6E,
                  0x77,0x80,0x88,0x8F,0x96,0x9D,0xA3,0xAF,0xBA,0xC4,0xCE,0xD7,0xE0,0xE8,0xF0,0xF8,
              };
                  GMAPI_LoadRevGamma16bit(16, DefaultRevGammaRGBLUT);
                  GMAPI_EnablePreGamma();
                  GMAPI_EnableRevGamma();
              #endif
              }
              #endif


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =     33    ----
   CONSTANT SIZE    =   6720    ----
   XDATA SIZE       =      6    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
C51 COMPILER V8.02   GAMMA                                                                 08/07/2015 16:22:30 PAGE 3   

   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
