C51 COMPILER V8.02   OSDVIEW                                                               08/07/2015 16:22:28 PAGE 1   


C51 COMPILER V8.02, COMPILATION OF MODULE OSDVIEW
OBJECT MODULE PLACED IN .\Bin\ADS\AXI\104N\OSDView.obj
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE App\OSD\OSDView.c LARGE OPTIMIZE(9,SPEED) BROWSE INCDIR(.\App;.\App\OSD;.\A
                    -pp\User;.\Lib;.\Lib\NT68655_770_850 Series;.\Lib\ScalerCfg;.\Phy\Panel;.\Phy\SI\NVT\Board;.\Phy\SI\NVT\Component;.\Phy\S
                    -I\NVT\Keypad;.\Sys;.\Sys\SI\NVT) DEFINE(SCALER_TYPE=NT68857,NT68857_DEMO,FLASH_BANK=4,X_ADS,X215) PRINT(.\Lst\OSDView.ls
                    -t) OBJECT(.\Bin\ADS\AXI\104N\OSDView.obj)

line level    source

   1          /******************************************************************************/
   2          /*                       Novatek MicroElectronics Corp.                       */
   3          /*       6F, No. 1-2, Innovation Road I, Science-Based Industrial Park,       */
   4          /*                         HsinChu 300, Taiwan, R.O.C.                        */
   5          /*                 TEL:886-3-567-0889       FAX:886-3-577-0132                */
   6          /*                            All Rights Reserved                             */
   7          /******************************************************************************/
   8          
   9          //******************************************************************************
  10          // I N C L U D E   F I L E S
  11          //******************************************************************************
  12          #include "Include.h"
  13          
  14          //******************************************************************************
  15          // G L O B A L   D E F I N I T I O N S
  16          //******************************************************************************
  17          enum {
  18              OSD_SUBMENU_1,
  19              OSD_SUBMENU_2,
  20              OSD_SUBMENU_3,
  21              OSD_SUBMENU_4,
  22              OSD_SUBMENU_5,
  23              OSD_SUBMENU_6,
  24              OSD_SUBMENU_7,
  25              OSD_MAIN_ITEMS,
  26              OSD_DLG_BRIGHTNESS,
  27              OSD_DLG_CONTRAST,
  28          
  29          #if ALS_EnDis == ALSMODE
              
              #elif ALS_EnDis == ALSOffSET    //don't know used where ~
                      OSD_DLG_ALS_BASE_VALUE,         // george: F_ALSBV_03B1
              #elif ALS_EnDis == ALSRange
              
              #else   //Normal
  36          
  37          #endif  //#if ALS_EnDis == ENABLE
  38          
  39              OSD_DLG_VOLUME,
  40              OSD_DLG_AUTOTUNE,
  41              OSD_DLG_85Hz,
  42              OSD_DLG_OUTOFRANGE,
  43              OSD_DLG_NOSYNC,
  44              OSD_DLG_NOCABLE,
  45              OSD_DLG_OSDLOCK,
  46              OSD_DLG_SLEEP,
  47              OSD_DLG_NOTICE,
  48              OSD_DLG_BURNIN,
  49              OSD_BF_MENU,
  50              OSD_SRC_MENU,
  51              OSD_OFF
  52          };
C51 COMPILER V8.02   OSDVIEW                                                               08/07/2015 16:22:28 PAGE 2   

  53          
  54          enum {
  55              OSD_FUNCITM_1,
  56              OSD_FUNCITM_2,
  57              OSD_FUNCITM_3,
  58              OSD_FUNCITM_4,
  59              OSD_FUNCITM_5,
  60              OSD_FUNCITM_6,
  61              OSD_FUNC_ITEMS
  62          };
  63          
  64          #define SPACE_CHAR          0x00
  65          #define OSD_MAIN_WIDTH      32
  66          #define OSD_MAIN_HEIGHT     17
  67          #define OSD_INFO_WIDTH      25
  68          #define OSD_INFO_HEIGHT     8
  69          #define OSD_SRC_WIDTH       18
  70          #define OSD_SRC_HEIGHT      12
  71          #define OSD_BF_WIDTH        18
  72          #define OSD_BF_HEIGHT       14
  73          #define OSD_SUB_X           5
  74          #define OSD_SUB_Y           6
  75          #define OSD_SUB_WIDTH       (OSD_MAIN_WIDTH-7)
  76          #define OSD_SUB_HEIGHT      (OSD_MAIN_HEIGHT-10)
  77          #define OSD_FUNC_WIDTH      29
  78          #define OSD_FUNC_HEIGHT     15
  79          
  80          #define MAX_X               (PANEL_WIDTH - (12*OSD_INFO_WIDTH))
  81          #define MAX_Y               100 //(PANEL_HEIGHT - (18*OSD_INFO_HEIGHT)) //FEFANJACKY
  82          #define OSD_MOVESTEP_X      6
  83          #define OSD_MOVESTEP_Y      6
  84          #define MAX_ROT_X           (PANEL_WIDTH - (18*OSD_INFO_HEIGHT))
  85          #define MAX_ROT_Y           (PANEL_HEIGHT - (12*OSD_INFO_WIDTH))
  86          #define OSD_MOVESTEP_ROT_X  OSD_MOVESTEP_Y
  87          #define OSD_MOVESTEP_ROT_Y  OSD_MOVESTEP_X
  88          
  89          #define MAIN_FRAME_COLOR    (((I_WHITE-1)<<8)|(I_TCYAN<<4)|0x0002)
  90          #define TITLE_COLOR         (((I_WHITE-1)<<8)|(I_TGREEN<<4)|0x0002)
  91          #define SUB_FRAME_COLOR     (((I_TGREEN-1)<<8)|(I_WHITE<<4)|0x0002)
  92          #define DISABLE_COLOR       (((I_GRAY-1)<<8)|(I_WHITE<<4)|0x0002)
  93          #define SLIDER_COLOR        (((I_MAGENTA-1)<<8)|(I_TMAGENTA<<4)|0x0002)
  94          #define INFO_DLG_COLOR      (((I_TGREEN-1)<<8)|(I_WHITE<<4)|0x0002)
  95          #define SRC_MENU_COLOR      (((I_TGREEN-1)<<8)|(I_WHITE<<4)|0x0002)
  96          #define BF_MENU_COLOR       (((I_TGREEN-1)<<8)|(I_WHITE<<4)|0x0002)
  97          #define FUNC_FRAME_COLOR    (((I_TGREEN-1)<<8)|(I_WHITE<<4)|0x0002)
  98          #define DEMO_SELECT_COLOR (((I_RED-1)<<8)|(I_WHITE<<4)|0x0002)
  99          #define MainIcon16Color1    (((0x10)<<8)|(I_TCYAN<<4)|0x0c|0x0002)
 100          #define MainIcon16Color2    (((0x20)<<8)|(I_TCYAN<<4)|0x0c|0x0002)
 101          #define MainIcon4Color1     (((0x30)<<8)|(I_TCYAN<<4)|0x08|0x0002)
 102          #define MainIcon4Color2     (((0x34)<<8)|(I_TCYAN<<4)|0x08|0x0002)
 103          #define MainIcon4Color3     (((0x38)<<8)|(I_TCYAN<<4)|0x08|0x0002)
 104          #define READONLY_COLOR        (((I_BLACK-1)<<8)|(I_TBLACK<<4)|0x0002)   //george new define
 105          
 106          // Defines for saving data
 107          enum {
 108              OSDFLAG_UPD_TMG = 0x01,
 109              OSDFLAG_UPD_USR = 0x02,
 110              OSDFLAG_UPD_CAL = 0x04,
 111              OSDFLAG_UPD_SYS = 0x08,
 112              OSDFLAG_NOSYNC = 0x10,
 113              OSDFLAG_SYSINIT = 0x80
 114          };
C51 COMPILER V8.02   OSDVIEW                                                               08/07/2015 16:22:28 PAGE 3   

 115          
 116          #define IsOSDUpdTmg() ((ucOSDFlags&OSDFLAG_UPD_TMG) != 0)
 117          #define IsOSDUpdUsr() ((ucOSDFlags&OSDFLAG_UPD_USR) != 0)
 118          #define IsOSDUpdCal() ((ucOSDFlags&OSDFLAG_UPD_CAL) != 0)
 119          #define IsOSDUpdSys() ((ucOSDFlags&OSDFLAG_UPD_SYS) != 0)
 120          #define IsOSDNoSync() ((ucOSDFlags&OSDFLAG_NOSYNC) != 0)
 121          #define IsOSDSysInit() ((ucOSDFlags&OSDFLAG_SYSINIT) != 0)
 122          
 123          #define SetOSDUpdTmgFlag() {ucOSDFlags |= OSDFLAG_UPD_TMG;}
 124          #define SetOSDUpdUsrFlag() {ucOSDFlags |= OSDFLAG_UPD_USR;}
 125          #define SetOSDUpdCalFlag() {ucOSDFlags |= OSDFLAG_UPD_CAL;}
 126          #define SetOSDUpdSysFlag() {ucOSDFlags |= OSDFLAG_UPD_SYS;}
 127          #define SetOSDNoSyncFlag() {ucOSDFlags |= OSDFLAG_NOSYNC;}
 128          #define SetOSDSysInitFlag() {ucOSDFlags |= OSDFLAG_SYSINIT;}
 129          
 130          #define ClearOSDUpdTmgFlag() {ucOSDFlags &= ~OSDFLAG_UPD_TMG;}
 131          #define ClearOSDUpdUsrFlag() {ucOSDFlags &= ~OSDFLAG_UPD_USR;}
 132          #define ClearOSDUpdCalFlag() {ucOSDFlags &= ~OSDFLAG_UPD_CAL;}
 133          #define ClearOSDUpdSysFlag() {ucOSDFlags &= ~OSDFLAG_UPD_SYS;}
 134          #define ClearOSDNoSyncFlag() {ucOSDFlags &= ~OSDFLAG_NOSYNC;}
 135          #define ClearOSDSysInitFlag() {ucOSDFlags &= ~OSDFLAG_SYSINIT;}
 136          #define ClearOSDUpdFlag() { \
 137              ucOSDFlags &= ~(OSDFLAG_UPD_TMG | OSDFLAG_UPD_USR | OSDFLAG_UPD_CAL | OSDFLAG_UPD_SYS); \
 138          }
 139          #define ClearOSDAllFlag() {ucOSDFlags = 0x00;}
 140          
 141          //******************************************************************************
 142          // G L O B A L   V A R I A B L E S
 143          //******************************************************************************
 144          
 145          //******************************************************************************
 146          // S T A T I C   V A R I A B L E S
 147          //******************************************************************************
 148          static code UCHAR ucSubMenuITMPosTb1[] =                        
 149          {
 150              5, 6,
 151              5, 7,
 152              5, 8,
 153                  5, 9,   //george: ALSOnOff
 154                  5,10,   //george: ALSBaseVale
 155          //gg_old        5,11,   //george: TouchOnOff
 156          ///     5,11,   // george_Item16
 157          ///     5,12,   // george_Item17
 158          };
 159          static code UCHAR ucSubMenuITMPosTb2[] =                                
 160          {
 161              5, 6,
 162              5, 7,
 163              5, 8,
 164              5, 9,
 165          };
 166          //=============================                 // 
 167          static code UCHAR ucSubMenuITMPosTb3[] =                // 
 168          {
 169              5, 6,
 170              5, 8,
 171              5, 9,
 172              5,10,
 173              5,11,                                                                       
 174          };
 175          //-------------------------------------
 176          static code UCHAR ucSubMenuITMPosTb4[] =                
C51 COMPILER V8.02   OSDVIEW                                                               08/07/2015 16:22:28 PAGE 4   

 177          {
 178              5, 6,
 179              5, 7,
 180              5, 8,
 181              5, 9,
 182          };
 183          static code UCHAR ucSubMenuITMPosTb5[] =                
 184          {
 185              5, 6,
 186              5, 7,
 187              5, 8,
 188              5, 9,                                                                                       //   
 189              5,10,                                                                                       //   
 190                  5,11,   //gg_new
 191          };
 192          static code UCHAR* ucSubMenuITMPosTb[] = 
 193          {
 194              ucSubMenuITMPosTb1,                                         
 195              ucSubMenuITMPosTb2,                                         //   
 196              ucSubMenuITMPosTb3,                                         //  
 197              ucSubMenuITMPosTb4,                                         //   
 198              ucSubMenuITMPosTb5,                                         //140317 mike 
 199          };
 200          
 201          #if ENABLE_FUNC_OSD == ON
              static code UCHAR ucFuncITMPosTb[] = {
                  0, 3,
                  0, 5,
                  0, 7,
                  0, 9,
                  0,11,
                  0,13,
              };
              #endif
 211          
 212          static xdata UCHAR ucMenuType = OSD_SUBMENU_1;
 213          static xdata USHRT usOSDMovingX,usOSDMovingY;
 214          static xdata UCHAR ucOSDFlags = 0x00;
 215          
 216          static xdata UCHAR ucPerformReset = FALSE;
 217          
 218          //******************************************************************************
 219          // E X T E R N A L   V A R I A B L E   P R O T O T Y P E S
 220          //******************************************************************************
 221          
 222          //******************************************************************************
 223          // S T A T I C   F U N C T I O N   P R O T O T Y P E S
 224          //******************************************************************************
 225          
 226          //******************************************************************************
 227          // E X T E R N A L   F U N C T I O N   P R O T O T Y P E S
 228          //******************************************************************************
 229          
 230          //******************************************************************************
 231          // Prototype:
 232          //  void OSDTurnOnOSD(void)
 233          // Parameters:
 234          //  None
 235          // Return:
 236          //  None
 237          // Purpose:
 238          //  Turn on OSD
C51 COMPILER V8.02   OSDVIEW                                                               08/07/2015 16:22:28 PAGE 5   

 239          // Notes:
 240          //  None
 241          //******************************************************************************
 242          void OSDTurnOnOSD(void)
 243          {
 244   1      #if ENABLE_OSD_ROTATION == ON
                  if (UserData.bOSDRotation) {
                      OSDAPI_RotateOSDWin(OSD_WINDOW1, OSD_POS_ROT_270);
                      OSDAPI_RotateOSDWin(OSD_WINDOW2, OSD_POS_ROT_270);
                      OSDAPI_RotateOSDWin(OSD_WINDOW3, OSD_POS_ROT_270);
                      OSDAPI_RotateOSDWin(OSD_WINDOW4, OSD_POS_ROT_270);
                      OSDAPI_RotateOSDWin(OSD_WINDOW5, OSD_POS_ROT_270);
                      OSDAPI_RotateOSDWin(OSD_WINDOW6, OSD_POS_ROT_270);
                      OSDAPI_RotateOSDWin(OSD_WINDOW7, OSD_POS_ROT_270);
                      OSDAPI_RotateOSDWin(OSD_WINDOW8, OSD_POS_ROT_270);
                      OSDAPI_Rotated_270_OSD();
                      Sleep(80);
                  }
                  else {
                      OSDAPI_RotateOSDWin(OSD_WINDOW1, OSD_POS_ROT_OFF);
                      OSDAPI_RotateOSDWin(OSD_WINDOW2, OSD_POS_ROT_OFF);
                      OSDAPI_RotateOSDWin(OSD_WINDOW3, OSD_POS_ROT_OFF);
                      OSDAPI_RotateOSDWin(OSD_WINDOW4, OSD_POS_ROT_OFF);
                      OSDAPI_RotateOSDWin(OSD_WINDOW5, OSD_POS_ROT_OFF);
                      OSDAPI_RotateOSDWin(OSD_WINDOW6, OSD_POS_ROT_OFF);
                      OSDAPI_RotateOSDWin(OSD_WINDOW7, OSD_POS_ROT_OFF);
                      OSDAPI_RotateOSDWin(OSD_WINDOW8, OSD_POS_ROT_OFF);
                      Sleep(80);
                  }
              #endif //ENABLE_OSD_ROTATION == ON
 269   1      #if ENABLE_DBC == ON
              #if ENABLE_DBC_HW_DEBOUNCE == OFF
                  ClearDBCCounter();
              #endif
              #endif
 274   1          OSDAPI_TurnOnOSD();
 275   1      }
 276          
 277          //******************************************************************************
 278          // Prototype:
 279          //  void OSDShowMainMenu(void)
 280          // Parameters:
 281          //  None
 282          // Return:
 283          //  None
 284          // Purpose:
 285          //  Show main page
 286          // Notes:
 287          //  None
 288          //******************************************************************************
 289          void OSDShowMainMenu(void)
 290          {
 291   1          UCHAR i;
 292   1          OSDWinAttr attr;
 293   1          
 294   1          OSDInitialize(FALSE);
 295   1          OSDInitFrame(OSD_MAIN_WIDTH,OSD_MAIN_HEIGHT, MAIN_FRAME_COLOR);
 296   1      
 297   1          OSDAPI_SelOSDWin(OSD_WINDOW8);
 298   1          RST_WINATTR_ALL(attr);
 299   1          attr.ucWinClr = I_TCYAN;
 300   1          OSDAPI_SetOSDWinAttr(attr);
C51 COMPILER V8.02   OSDVIEW                                                               08/07/2015 16:22:28 PAGE 6   

 301   1          OSDAPI_SetOSDWinSize(0, 0, 31, 16);
 302   1          OSDAPI_SetOSDWinGrad(0x01, 0x00, 0x02, 0x01);
 303   1      
 304   1          OSDAPI_SelOSDWin(OSD_WINDOW7);
 305   1          attr.ucWinClr = I_TGREEN;
 306   1          OSDAPI_SetOSDWinAttr(attr);
 307   1          OSDAPI_SetOSDWinSize(5, 2, 29, 4);
 308   1          OSDAPI_SetOSDWinGrad(0x00, 0x00, 0x02, 0x01);
 309   1      
 310   1          OSDAPI_SelOSDWin(OSD_WINDOW6);
 311   1          attr.ucWinClr = I_WHITE;
 312   1          OSDAPI_SetOSDWinAttr(attr);
 313   1          OSDAPI_SetOSDWinSize(5, 5, 29, 12);
 314   1          OSDAPI_SetOSDWinGrad(0x00, 0x01, 0x01, 0x01);
 315   1          
 316   1          OSDAPI_OSDWinOn(OSD_WINDOW8);
 317   1          OSDAPI_OSDWinOn(OSD_WINDOW7);
 318   1          OSDAPI_OSDWinOn(OSD_WINDOW6);
 319   1      
 320   1          for(i = 0; i < OSD_MAIN_ITEMS; i++)
 321   1              OSDShowMainIcon(i, TRUE);
 322   1                                      
 323   1          OSDClearSubmenu();
 324   1          OSDSelectMainItem(0);                       // george: F_Touch_, F_ALS_
 325   1          OSDAPI_SetIndentIndex(120);
 326   1          OSDShowResolution(15,14);
 327   1      
 328   1          UserSetTransparent();
 329   1      
 330   1          OSDTurnOnOSD();
 331   1      }
 332          
 333          //******************************************************************************
 334          // Prototype:
 335          //  void OSDCloseMainMenu(void)
 336          // Parameters:
 337          //  None
 338          // Return:
 339          //  None
 340          // Purpose:
 341          //  Close Main Menu
 342          // Notes:
 343          //  None
 344          //******************************************************************************
 345          void OSDCloseMainMenu(void)
 346          {
 347   1          OSDClosed();
 348   1      }
 349          
 350          //******************************************************************************
 351          // Prototype:
 352          //  void OSDShowMainIcon(UCHAR id, UCHAR act)
 353          // Parameters:
 354          //  id  : id of main icon to be displayed
 355          //  act : indicate the item is in active state or not
 356          // Return:
 357          //  None
 358          // Purpose:
 359          //  Draw main items
 360          // Notes:
 361          //  None
 362          //******************************************************************************
C51 COMPILER V8.02   OSDVIEW                                                               08/07/2015 16:22:28 PAGE 7   

 363          void OSDShowMainIcon(UCHAR id, UCHAR act)
 364          {
 365   1          #define NFONTS_PER_MITEM    6
 366   1          #define NFONTS_PER_ROW       3
 367   1          #define NROWS_PER_MITEM     2
 368   1          
 369   1          code UCHAR ucMItemIndexTb[OSD_MAIN_ITEMS][NFONTS_PER_MITEM] = 
 370   1          {
 371   1              {0x00, 0x01, 0x02, 0x03, 0x00, 0x04},
 372   1              {0x05, 0x01, 0x06, 0x02, 0x03, 0x04},
 373   1              {0x05, 0x06, 0x07, 0x08, 0x09, 0x0A},
 374   1              {0x07, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F},
 375   1              {0x10, 0x11, 0x12, 0x13, 0x14, 0x15},
 376   1              {0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
 377   1          };
 378   1          code USHRT usAnalogMItemAttrTb[OSD_MAIN_ITEMS][NFONTS_PER_MITEM] = 
 379   1         {
 380   1              {MainIcon4Color1,  MainIcon4Color1,  MainIcon4Color1,  MainIcon4Color1,  MainIcon16Color1, MainIco
             -n4Color1 },
 381   1              {MainIcon4Color2,  MainIcon16Color1, MainIcon4Color2,  MainIcon16Color1, MainIcon16Color1, MainIco
             -n16Color1},
 382   1              {MainIcon16Color1, MainIcon16Color1, MainIcon16Color1, MainIcon16Color1, MainIcon16Color1, MainIco
             -n16Color1},
 383   1              {MainIcon4Color2,  MainIcon16Color1, MainIcon16Color1, MainIcon16Color1, MainIcon16Color1, MainIco
             -n16Color1},
 384   1              {MainIcon16Color1, MainIcon16Color1, MainIcon16Color1, MainIcon16Color1, MainIcon16Color1, MainIco
             -n16Color1},
 385   1              {0x0000,0x0000,0x0000,0x0000,0x0000,0x0000},
 386   1          };
 387   1          code USHRT usDigitalMItemAttrTb[OSD_MAIN_ITEMS][NFONTS_PER_MITEM] = 
 388   1         {
 389   1              {MainIcon4Color1,  MainIcon4Color1,  MainIcon4Color1,  MainIcon4Color1,  MainIcon16Color1, MainIco
             -n4Color1 },
 390   1              {MainIcon4Color3,  MainIcon16Color2, MainIcon4Color3,  MainIcon16Color2, MainIcon16Color2, MainIco
             -n16Color2},
 391   1              {MainIcon16Color1, MainIcon16Color1, MainIcon16Color1, MainIcon16Color1, MainIcon16Color1, MainIco
             -n16Color1},
 392   1              {MainIcon4Color2,  MainIcon16Color1, MainIcon16Color1, MainIcon16Color1, MainIcon16Color1, MainIco
             -n16Color1},
 393   1              {MainIcon16Color1, MainIcon16Color1, MainIcon16Color1, MainIcon16Color1, MainIcon16Color1, MainIco
             -n16Color1},
 394   1              {0x0000,0x0000,0x0000,0x0000,0x0000,0x0000},
 395   1          };
 396   1          
 397   1          code UCHAR ucMItemTb[OSD_MAIN_ITEMS][2] = {
 398   1            //x   y
 399   1            { 1,  1},
 400   1            { 1,  4},
 401   1            { 1,  7},
 402   1            { 1, 10},
 403   1            { 1, 13},
 404   1            { 0,  0},
 405   1          };
 406   1          
 407   1          UCHAR i, j, fonts, x, y;
 408   1          UCHAR icon_buff[NFONTS_PER_ROW];
 409   1          USHRT attr_buff[NFONTS_PER_ROW];
 410   1          USHRT *p_attr;
 411   1      
 412   1          if ((id == OSD_SUBMENU_6) || (id == OSD_SUBMENU_7)) {
 413   2              return;
 414   2          }
C51 COMPILER V8.02   OSDVIEW                                                               08/07/2015 16:22:28 PAGE 8   

 415   1          
 416   1          if (UserData.ucInputSource == INPUT_SC_VGA) {
 417   2              p_attr = usAnalogMItemAttrTb[id];
 418   2          } 
 419   1          else {
 420   2              p_attr = usDigitalMItemAttrTb[id];
 421   2          }
 422   1          
 423   1          x = ucMItemTb[id][0];
 424   1          y = ucMItemTb[id][1];
 425   1          
 426   1          fonts = NFONTS_PER_MITEM;
 427   1          
 428   1          if (act == TRUE) {
 429   2              for (i = 0; i < NROWS_PER_MITEM; i++) {
 430   3                  for (j = 0; j < NFONTS_PER_ROW; j++) {
 431   4                      icon_buff[j] = ucMItemIndexTb[id][i*NFONTS_PER_ROW+j];
 432   4                      attr_buff[j] = p_attr[i*NFONTS_PER_ROW+j];
 433   4                  }
 434   3                  OSDAPI_FillLineAttrList(x, y+i, NFONTS_PER_ROW, attr_buff);
 435   3                  OSDAPI_WriteXYString(FALSE, x, y+i, NFONTS_PER_ROW, icon_buff);
 436   3              }
 437   2          }
 438   1      }
 439          
 440          //******************************************************************************
 441          // Prototype:
 442          //  void OSDSelectMainItem(UCHAR id) 
 443          // Parameters:
 444          //  id  : current cursor position
 445          // Return:
 446          //  None
 447          // Purpose:
 448          //  Activate the selected main item
 449          // Notes:
 450          //  None
 451          //******************************************************************************
 452          void OSDSelectMainItem(UCHAR id) 
 453          {
 454   1          static code UCHAR D[]={1,"D"};
 455   1      
 456   1          OSDWinAttr attr;
 457   1      
 458   1          if (id != OSD_SUBMENU_6) 
 459   1              {
 460   2              OSDAPI_SelOSDWin(OSD_WINDOW1);
 461   2                      RST_WINATTR_ALL(attr);
 462   2                      attr.ucWinClr = I_TCYAN;
 463   2                      SET_WINATTR_BEVEL(attr);
 464   2                      SET_BEVEL_TYPE(attr,0);
 465   2                      SET_BEVEL_WIDTH(attr,1);
 466   2                      attr.ucRBorderClr = I_RED;
 467   2                      attr.ucLBorderClr = I_RED;
 468   2                      OSDAPI_SetOSDWinAttr(attr);
 469   2                      OSDAPI_SetOSDWinSize(1, id*3+0x01, 3, id*3+0x02);
 470   2                      OSDAPI_OSDWinOn(OSD_WINDOW1);
 471   2          }
 472   1      //=====================================osd color        
 473   1              if(id==2)
 474   1              {
 475   2                 OSD_color_level=0;                                   // 
 476   2              }
C51 COMPILER V8.02   OSDVIEW                                                               08/07/2015 16:22:28 PAGE 9   

 477   1      //======================================        
 478   1                              OSDShowSubMenu(id);                     // george: ALS_4
 479   1          if (SystemData.bDemo == TRUE)
 480   1              {
 481   2                      if(id == OSD_SUBMENU_7) 
 482   2                      {
 483   3                              OSDAPI_SetIndentIndex(150);
 484   3                              OSDAPI_SetAlignType(OSD_ALIGN_LEFT);
 485   3                              OSDAPI_SetFontAttr(DEMO_SELECT_COLOR);
 486   3                              OSDAPI_ShowIndentString(TRUE, 0, 16, D[0], D);
 487   3                      }
 488   2                      else 
 489   2                      {
 490   3                              OSDAPI_SetIndentIndex(150);
 491   3                              OSDAPI_SetAlignType(OSD_ALIGN_LEFT);
 492   3                              OSDAPI_SetFontAttr(MAIN_FRAME_COLOR);
 493   3                              OSDAPI_ShowIndentString(TRUE, 0, 16, D[0], D);
 494   3              }
 495   2          }
 496   1          ucMenuType = id;
 497   1      }
 498          
 499          //******************************************************************************
 500          // Prototype:
 501          //  void OSDUnselectMainItem(UCHAR id);
 502          // Parameters:
 503          //  id  : current cursor position
 504          // Return:
 505          //  None
 506          // Purpose:
 507          //  unactivate the selected main item
 508          // Notes:
 509          //  None
 510          //******************************************************************************
 511          void OSDUnselectMainItem(UCHAR id)
 512          {
 513   1          id = 0;
 514   1          OSDClearSubmenu();
 515   1          OSDAPI_OSDWinOff(OSD_WINDOW1);
 516   1      }
 517          
 518          //******************************************************************************
 519          // Prototype:
 520          //  void OSDShowSubMenu(UCHAR id)
 521          // Parameters:
 522          //  id  : main item id
 523          // Return:
 524          //  None
 525          // Purpose:
 526          //  Show sub menu 
 527          // Notes:
 528          //  None
 529          //******************************************************************************
 530          void OSDShowSubMenu(UCHAR id)                                                           //    
 531          {
 532   1          OSDAPI_SetIndentIndex(32);
 533   1          OSDAPI_SetAlignType(OSD_ALIGN_CENTER);
 534   1          OSDAPI_FillLineAttr(5,3,OSD_SUB_WIDTH,TITLE_COLOR);
 535   1          OSDAPI_WriteXYRepeatChar(FALSE, 5, 3, OSD_SUB_WIDTH, SPACE_CHAR);
 536   1          OSDAPI_ShowIndentString(FALSE, 5, 3, OSD_SUB_WIDTH, MainMenuStrTab[id*NUM_OSDLANGS+UserData.ucLanguage
             -]);
 537   1          
C51 COMPILER V8.02   OSDVIEW                                                               08/07/2015 16:22:28 PAGE 10  

 538   1          OSDAPI_SetIndentIndex(48);
 539   1      
 540   1          switch(id) 
 541   1              {
 542   2              case OSD_SUBMENU_1: 
 543   2      
 544   2                      #if ALS_EnDis == ALSMODE
                                      OSDAPI_ShowIndentString(FALSE, ucSubMenuITMPosTb[id][0], ucSubMenuITMPosTb[id][1], OSD_SUB_WIDTH, Brigh
             -tnessStrTab[UserData.ucLanguage]);
                          OSDAPI_ShowIndentString(FALSE, ucSubMenuITMPosTb[id][2], ucSubMenuITMPosTb[id][3], OSD_SUB_WID
             -TH, ContrastStrTab[UserData.ucLanguage]);
                                      OSDAPI_ShowIndentString(FALSE, ucSubMenuITMPosTb[id][4], ucSubMenuITMPosTb[id][5], OSD_SUB_WIDTH, SRStr
             -Tab[UserData.ucLanguage]);            
                                      OSDAPI_ShowIndentString(FALSE, ucSubMenuITMPosTb[id][6], ucSubMenuITMPosTb[id][7], OSD_SUB_WIDTH, ALSMd
             -StrTab[UserData.ucLanguage]); 
                              #elif ALS_EnDis == ALSOffSET    
                                      if(UserData.bALSOnOff == OFF)
                              OSDAPI_ShowIndentString(FALSE, ucSubMenuITMPosTb[id][0], ucSubMenuITMPosTb[id][1], OSD_SUB_WI
             -DTH, BrightnessStrTab[UserData.ucLanguage]);
                                      else
                                              OSDAPI_ShowIndentString(FALSE, ucSubMenuITMPosTb[id][0], ucSubMenuITMPosTb[id][1], OSD_SUB_WIDTH, ALSB
             -VStrTab[UserData.ucLanguage]);        //george: F_ALSBV_04F
              
                          OSDAPI_ShowIndentString(FALSE, ucSubMenuITMPosTb[id][2], ucSubMenuITMPosTb[id][3], OSD_SUB_WID
             -TH, ContrastStrTab[UserData.ucLanguage]);
                                      OSDAPI_ShowIndentString(FALSE, ucSubMenuITMPosTb[id][4], ucSubMenuITMPosTb[id][5], OSD_SUB_WIDTH, SRStr
             -Tab[UserData.ucLanguage]);
                          OSDAPI_ShowIndentString(FALSE, ucSubMenuITMPosTb[id][6], ucSubMenuITMPosTb[id][7], OSD_SUB_WID
             -TH, ALSOnOffStrTab[UserData.ucLanguage]); //george: F_ALSOnOff_02             
                              #elif ALS_EnDis == ALSRange
                                      OSDAPI_ShowIndentString(FALSE, ucSubMenuITMPosTb[id][0], ucSubMenuITMPosTb[id][1], OSD_SUB_WIDTH, Brigh
             -tnessStrTab[UserData.ucLanguage]);
                          OSDAPI_ShowIndentString(FALSE, ucSubMenuITMPosTb[id][2], ucSubMenuITMPosTb[id][3], OSD_SUB_WID
             -TH, ContrastStrTab[UserData.ucLanguage]);
                                      OSDAPI_ShowIndentString(FALSE, ucSubMenuITMPosTb[id][4], ucSubMenuITMPosTb[id][5], OSD_SUB_WIDTH, SRStr
             -Tab[UserData.ucLanguage]);            
                                      OSDAPI_ShowIndentString(FALSE, ucSubMenuITMPosTb[id][6], ucSubMenuITMPosTb[id][7], OSD_SUB_WIDTH, ALSOn
             -OffStrTab[UserData.ucLanguage]); 
                              #else   //Normal
 564   2                              OSDAPI_ShowIndentString(FALSE, ucSubMenuITMPosTb[id][0], ucSubMenuITMPosTb[id][1], OSD_SUB_WIDTH, Brigh
             -tnessStrTab[UserData.ucLanguage]);
 565   2                  OSDAPI_ShowIndentString(FALSE, ucSubMenuITMPosTb[id][2], ucSubMenuITMPosTb[id][3], OSD_SUB_WID
             -TH, ContrastStrTab[UserData.ucLanguage]);
 566   2                              OSDAPI_ShowIndentString(FALSE, ucSubMenuITMPosTb[id][4], ucSubMenuITMPosTb[id][5], OSD_SUB_WIDTH, SRStr
             -Tab[UserData.ucLanguage]);
 567   2                      #endif  //#if ALS_EnDis == ENABLE
 568   2      
 569   2      
 570   2      // old no used                  OSDAPI_ShowIndentString(FALSE, ucSubMenuITMPosTb[id][8], ucSubMenuITMPosTb[id][9], OSD_SU
             -B_WIDTH, ALSBVStrTab[UserData.ucLanguage]);   //george: F_ALSBV_02
 571   2      //gg_old                        OSDAPI_ShowIndentString(FALSE, ucSubMenuITMPosTb[id][8], ucSubMenuITMPosTb[id][9],OSD_SUB_WIDTH
             -, TouchSWStrTab[UserData.ucLanguage]);        //george: F_Touch_02
 572   2      /// *Delete     OSDAPI_ShowIndentString(FALSE, ucSubMenuITMPosTb[id][10], ucSubMenuITMPosTb[id][11], OSD_S
             -UB_WIDTH, GItem16StrTab[UserData.ucLanguage]); //george_Item16
 573   2      /// OSDAPI_ShowIndentString(FALSE, ucSubMenuITMPosTb[id][12], ucSubMenuITMPosTb[id][13], OSD_SUB_WIDTH, GI
             -tem17StrTab[UserData.ucLanguage]); //george_Item17
 574   2                  break;
 575   2              case OSD_SUBMENU_2: 
 576   2                  OSDAPI_ShowIndentString(FALSE, ucSubMenuITMPosTb[id][0], ucSubMenuITMPosTb[id][1], OSD_SUB_WID
             -TH, PhaseStrTab[UserData.ucLanguage]);
 577   2                  OSDAPI_ShowIndentString(FALSE, ucSubMenuITMPosTb[id][2], ucSubMenuITMPosTb[id][3], OSD_SUB_WID
             -TH, ClockStrTab[UserData.ucLanguage]);
C51 COMPILER V8.02   OSDVIEW                                                               08/07/2015 16:22:28 PAGE 11  

 578   2                  OSDAPI_ShowIndentString(FALSE, ucSubMenuITMPosTb[id][4], ucSubMenuITMPosTb[id][5], OSD_SUB_WID
             -TH, HPosStrTab[UserData.ucLanguage]);
 579   2                  OSDAPI_ShowIndentString(FALSE, ucSubMenuITMPosTb[id][6], ucSubMenuITMPosTb[id][7], OSD_SUB_WID
             -TH, VPosStrTab[UserData.ucLanguage]);
 580   2                  break;
 581   2              case OSD_SUBMENU_3: 
 582   2                          OSDAPI_ShowIndentString(FALSE, ucSubMenuITMPosTb[id][0], ucSubMenuITMPosTb[id][1], OSD_SUB_WI
             -DTH, ColorTempStrTab[UserData.ucLanguage]);   
 583   2                              if(OSD_color_level<2)
 584   2                              {
 585   3                              switch( UserData.ucColorTemp)
 586   3                                              {
 587   4                              case 0:
 588   4                                              OSDAPI_FillLineAttr(ucSubMenuITMPosTb[id][2], ucSubMenuITMPosTb[id][3], OSD_SUB_WIDTH,D
             -ISABLE_COLOR);
 589   4                                              break;
 590   4                                              case 1:                                         
 591   4                                              OSDAPI_FillLineAttr(ucSubMenuITMPosTb[id][4], ucSubMenuITMPosTb[id][5], OSD_SUB_WIDTH,D
             -ISABLE_COLOR);
 592   4                                      break;
 593   4                                              case 2:                                                                 
 594   4                                              OSDAPI_FillLineAttr(ucSubMenuITMPosTb[id][6], ucSubMenuITMPosTb[id][7], OSD_SUB_WIDTH,D
             -ISABLE_COLOR);
 595   4                                              break;
 596   4                                              case 3:                                         
 597   4                                              OSDAPI_FillLineAttr(ucSubMenuITMPosTb[id][8], ucSubMenuITMPosTb[id][9], OSD_SUB_WIDTH,D
             -ISABLE_COLOR);
 598   4                                              break;  
 599   4                              }
 600   3                    OSDAPI_ShowIndentString(FALSE, ucSubMenuITMPosTb[id][2], ucSubMenuITMPosTb[id][3], OSD_SUB_W
             -IDTH, ColorTemp_StrTab[0*NUM_OSDLANGS+UserData.ucLanguage]);
 601   3                                OSDAPI_ShowIndentString(FALSE, ucSubMenuITMPosTb[id][4], ucSubMenuITMPosTb[id][5], OSD_SUB_WIDTH, Col
             -orTemp_StrTab[1*NUM_OSDLANGS+UserData.ucLanguage]);
 602   3                                OSDAPI_ShowIndentString(FALSE, ucSubMenuITMPosTb[id][6], ucSubMenuITMPosTb[id][7], OSD_SUB_WIDTH, Col
             -orTemp_StrTab[2*NUM_OSDLANGS+UserData.ucLanguage]);  
 603   3                                OSDAPI_ShowIndentString(FALSE, ucSubMenuITMPosTb[id][8], ucSubMenuITMPosTb[id][9], OSD_SUB_WIDTH, Col
             -orTemp_StrTab[3*NUM_OSDLANGS+UserData.ucLanguage]);                   
 604   3                              }
 605   2      
 606   2                              if (OSD_color_level>=2)  
 607   2                      {
 608   3                                      OSDAPI_ShowIndentString(FALSE, ucSubMenuITMPosTb[id][2], ucSubMenuITMPosTb[id][3], OSD_SUB_WIDTH, RedS
             -trTab[UserData.ucLanguage]);
 609   3                      OSDAPI_ShowIndentString(FALSE, ucSubMenuITMPosTb[id][4], ucSubMenuITMPosTb[id][5], OSD_SUB_WI
             -DTH, GreenStrTab[UserData.ucLanguage]);
 610   3                      OSDAPI_ShowIndentString(FALSE, ucSubMenuITMPosTb[id][6], ucSubMenuITMPosTb[id][7], OSD_SUB_WI
             -DTH, BlueStrTab[UserData.ucLanguage]);                
 611   3                              }
 612   2                  break;              
 613   2              case OSD_SUBMENU_4: 
 614   2                  OSDAPI_ShowIndentString(FALSE, ucSubMenuITMPosTb[id][0], ucSubMenuITMPosTb[id][1], OSD_SUB_WID
             -TH, HorizontalStrTab[UserData.ucLanguage]);
 615   2                  OSDAPI_ShowIndentString(FALSE, ucSubMenuITMPosTb[id][2], ucSubMenuITMPosTb[id][3], OSD_SUB_WID
             -TH, VerticalStrTab[UserData.ucLanguage]);
 616   2                  OSDAPI_ShowIndentString(FALSE, ucSubMenuITMPosTb[id][4], ucSubMenuITMPosTb[id][5], OSD_SUB_WID
             -TH, TransparencyStrTab[UserData.ucLanguage]);
 617   2                  OSDAPI_ShowIndentString(FALSE, ucSubMenuITMPosTb[id][6], ucSubMenuITMPosTb[id][7], OSD_SUB_WID
             -TH, OSDTimeStrTab[UserData.ucLanguage]);
 618   2                  break;
 619   2       //-------------------------------------------------------------------------------------------------------
             --  
 620   2              case OSD_SUBMENU_5: 
C51 COMPILER V8.02   OSDVIEW                                                               08/07/2015 16:22:28 PAGE 12  

 621   2                  OSDAPI_ShowIndentString(FALSE, ucSubMenuITMPosTb[id][0], ucSubMenuITMPosTb[id][1], OSD_SUB_WID
             -TH, LanguageStrTab[UserData.ucLanguage]);
 622   2                  OSDAPI_ShowIndentString(FALSE, ucSubMenuITMPosTb[id][2], ucSubMenuITMPosTb[id][3], OSD_SUB_WID
             -TH, VolumeStrTab[UserData.ucLanguage]);    
 623   2                  OSDAPI_ShowIndentString(FALSE, ucSubMenuITMPosTb[id][4], ucSubMenuITMPosTb[id][5], OSD_SUB_WID
             -TH, MuteTab[UserData.ucLanguage]);            
 624   2                  OSDAPI_ShowIndentString(FALSE, ucSubMenuITMPosTb[id][6], ucSubMenuITMPosTb[id][7], OSD_SUB_WID
             -TH, InputStrTab[UserData.ucLanguage]);
 625   2                  OSDAPI_ShowIndentString(FALSE, ucSubMenuITMPosTb[id][8], ucSubMenuITMPosTb[id][9], OSD_SUB_WID
             -TH, ResetStrTab[UserData.ucLanguage]);
 626   2      
 627   2      #if TOUCH_EnDis == ENABLE
                                      OSDAPI_ShowIndentString(FALSE, ucSubMenuITMPosTb[id][10],ucSubMenuITMPosTb[id][11],OSD_SUB_WIDTH, Touch
             -SWStrTab[UserData.ucLanguage]);       //george: F_Touch_02  //gg_new
              #endif //#if TOUCH_EnDis == ENABLE
 630   2                  break;
 631   2      //--------------------------------------------------------------------------------------------------------
             --                        
 632   2              case OSD_SUBMENU_6:
 633   2                  break;
 634   2              case OSD_SUBMENU_7:
 635   2                  break;
 636   2              default :
 637   2                  break;
 638   2          }
 639   1      }
 640          
 641          
 642          //******************************************************************************
 643          // Prototype: 
 644          //  void OSDFocusMain(UCHAR id)
 645          // Parameters:
 646          //  id      : main page id
 647          // Return:
 648          //  None
 649          // Purpose:
 650          //  Focus on main page
 651          // Notes:
 652          //  None
 653          //******************************************************************************
 654          void OSDFocusMain(UCHAR id)
 655          {
 656   1          id = 0;
 657   1          OSDAPI_OSDWinOff(OSD_WINDOW2);
 658   1      }
 659          
 660          //******************************************************************************
 661          // Prototype: 
 662          //  void OSDFocusSub(UCHAR id)
 663          // Parameters:
 664          //  id      : sub item id
 665          // Return:
 666          //  None
 667          // Purpose:
 668          //  Focus on sub item
 669          // Notes:
 670          //  None
 671          //******************************************************************************
 672          void OSDFocusSub(UCHAR id)
 673          {
 674   1          OSDWinAttr attr;
 675   1      
C51 COMPILER V8.02   OSDVIEW                                                               08/07/2015 16:22:28 PAGE 13  

 676   1          OSDAPI_SelOSDWin(OSD_WINDOW2);
 677   1          
 678   1          RST_WINATTR_ALL(attr);
 679   1          attr.ucWinClr = I_WHITE;
 680   1          SET_WINATTR_BEVEL(attr);
 681   1          SET_BEVEL_TYPE(attr,0);
 682   1          SET_BEVEL_WIDTH(attr,1);
 683   1          attr.ucRBorderClr = I_MAGENTA;
 684   1          attr.ucLBorderClr = I_MAGENTA;
 685   1          OSDAPI_SetOSDWinAttr(attr);
 686   1          
 687   1          OSDSelectSubItem(id);
 688   1      }
 689          
 690          //******************************************************************************
 691          // Prototype: 
 692          //  void OSDUnselectSubItem(UCHAR id)
 693          // Parameters:
 694          //  id      : sub item id
 695          // Return:
 696          //  None
 697          // Purpose:
 698          //  Unselect item
 699          // Notes:
 700          //  None
 701          //******************************************************************************
 702          void OSDUnselectSubItem(UCHAR id)
 703          {
 704   1          id = 0;
 705   1          OSDAPI_OSDWinOff(OSD_WINDOW2);
 706   1      }
 707          
 708          //******************************************************************************
 709          // Prototype: 
 710          //  void OSDSelectSubItem(UCHAR id)
 711          // Parameters:
 712          //  id      : sub item id
 713          // Return:
 714          //  None
 715          // Purpose:
 716          //  Select item
 717          // Notes:
 718          //  None
 719          //******************************************************************************
 720          void OSDSelectSubItem(UCHAR id)
 721          {
 722   1          UCHAR x, y;
 723   1      
 724   1          OSDAPI_SelOSDWin(OSD_WINDOW2);
 725   1          
 726   1          x = ucSubMenuITMPosTb[ucMenuType][id*2];
 727   1          y = ucSubMenuITMPosTb[ucMenuType][id*2+1];
 728   1          
 729   1          OSDAPI_SetOSDWinSize(x, y, 29, y);
 730   1          
 731   1          OSDAPI_OSDWinOn(OSD_WINDOW2);
 732   1      }
 733          
 734          //******************************************************************************
 735          // Prototype: 
 736          //  void OSDExitItms(UCHAR pg, UCHAR itm)
 737          // Parameters:
C51 COMPILER V8.02   OSDVIEW                                                               08/07/2015 16:22:28 PAGE 14  

 738          //  pg      : main page id
 739          //  itm     : sub item id
 740          // Return:
 741          //  None
 742          // Purpose:
 743          //  Exit item state and go back to sub page state
 744          // Notes:
 745          //  None
 746          //******************************************************************************
 747          void OSDExitItms(UCHAR pg, UCHAR itm)
 748          {
 749   1          OSDClearSubmenu();
 750   1          OSDShowSubMenu(pg);
 751   1          OSDSelectSubItem(itm);
 752   1      
 753   1          if ((pg == OSD_SUBMENU_4) && (itm == 5))                                    
 754   1              {
 755   2               OSDTurnOnOSD();
 756   2              }
 757   1      }
 758          
 759          //******************************************************************************
 760          // Prototype:
 761          //  BOOL OSDIsMainItemValid(UCHAR id)
 762          // Parameters:
 763          //  id      : OSD cursor position on man page
 764          // Return:
 765          //  Check current position is valid or not
 766          // Purpose:
 767          //  Check OSD cursor can move to "id" or not
 768          // Notes:
 769          //  None
 770          //******************************************************************************
 771          BOOL OSDIsMainItemValid(UCHAR id)
 772          {
 773   1          if (id == OSD_SUBMENU_6) 
 774   1              {
 775   2              if (SystemData.bFactory == FALSE) 
 776   2                      {
 777   3                      return FALSE;
 778   3              }
 779   2          }
 780   1          else if (id == OSD_SUBMENU_7) 
 781   1              {
 782   2              if (SystemData.bDemo == FALSE) 
 783   2                      {
 784   3                      return FALSE;
 785   3              }    
 786   2              }
 787   1          else if (id == OSD_SUBMENU_2) 
 788   1              {
 789   2              if (GetInputSyncMode() == DIG_SYNC) 
 790   2                      {
 791   3                      return FALSE;
 792   3              }
 793   2              }
 794   1      
 795   1          return TRUE;
 796   1      }
 797          
 798          //******************************************************************************
 799          // Prototype:
C51 COMPILER V8.02   OSDVIEW                                                               08/07/2015 16:22:28 PAGE 15  

 800          //  BOOL OSDIsSubItemValid(UCHAR id)
 801          // Parameters:
 802          //  id      : OSD cursor position on sub page
 803          // Return:
 804          //  Check current position is valid or not
 805          // Purpose:
 806          //  Check OSD cursor can move to "id" or not
 807          // Notes:
 808          //  None
 809          //******************************************************************************
 810          BOOL OSDIsSubItemValid(UCHAR id)
 811          {
 812   1          if (ucMenuType == OSD_SUBMENU_3) 
 813   1              {
 814   2                      if ((UserData.ucColorTemp != CLRTMP_USER) && (id > 0))                          
 815   2                  {
 816   3                    return FALSE;
 817   3                      }
 818   2                      if((OSD_color_level !=2)&&(UserData.ucColorTemp==CLRTMP_USER)&& (id > 0))
 819   2                  {
 820   3                    return FALSE;
 821   3                      }                       
 822   2      
 823   2              }
 824   1          return TRUE;
 825   1      }
 826          
 827          #if ENABLE_FUNC_OSD == ON
              void OSDShowFuncMenu(void)
              {
                  OSDWinAttr attr;
                  
                  OSDInitialize(FALSE);
                  OSDInitFrame(OSD_FUNC_WIDTH,OSD_FUNC_HEIGHT, FUNC_FRAME_COLOR);
              
                  RST_WINATTR_ALL(attr);
                  
                  OSDAPI_SelOSDWin(OSD_WINDOW8);
                  attr.ucWinClr = I_TGREEN;
                  OSDAPI_SetOSDWinAttr(attr);
                  OSDAPI_SetOSDWinSize(0, 0, OSD_FUNC_WIDTH, 4);
                  OSDAPI_SetOSDWinGrad(0x00, 0x00, 0x02, 0x01);
              
                  OSDAPI_SelOSDWin(OSD_WINDOW7);
                  attr.ucWinClr = I_WHITE;
                  OSDAPI_SetOSDWinAttr(attr);
                  OSDAPI_SetOSDWinSize(0, 3, OSD_FUNC_WIDTH, OSD_FUNC_HEIGHT);
                  OSDAPI_SetOSDWinGrad(0x00, 0x01, 0x01, 0x01);
                  
                  OSDAPI_OSDWinOn(OSD_WINDOW8);
                  OSDAPI_OSDWinOn(OSD_WINDOW7);
              
                  OSDAPI_SetIndentIndex(32);
                  OSDAPI_SetAlignType(OSD_ALIGN_CENTER);
                  OSDAPI_FillLineAttr(0, 1, OSD_FUNC_WIDTH, TITLE_COLOR);
                  OSDAPI_WriteXYRepeatChar(FALSE, 0, 1, OSD_FUNC_WIDTH, SPACE_CHAR);
                  OSDAPI_ShowIndentString(FALSE, 0, 1, OSD_FUNC_WIDTH, ThrDCtrlTab[UserData.ucLanguage]);
              
                  OSDShowFuncItems();
                  UserSetTransparent();
              
                  OSDTurnOnOSD();    
C51 COMPILER V8.02   OSDVIEW                                                               08/07/2015 16:22:28 PAGE 16  

              }
              
              void OSDCloseFuncMenu(void)
              {
                  OSDClosed();
              }
              
              void OSDClearFuncMenu(void)
              {
                  UCHAR i;
                  OSDAPI_OSDWinOff(OSD_WINDOW2);
                  for (i = 3; i < OSD_FUNC_HEIGHT; i++) {
                      OSDAPI_WriteXYRepeatChar(FALSE, 0, i, OSD_FUNC_WIDTH, SPACE_CHAR);
                      OSDAPI_FillLineAttr(0, i, OSD_FUNC_WIDTH, FUNC_FRAME_COLOR);
                  }
              }
              
              void OSDFocusFuncMenu(UCHAR id)
              {
                  OSDClearFuncMenu();
                  OSDShowFuncItems();
                  OSDSelectFuncItem(id);
              }
              
              void OSDShowFuncItems(void)
              {
                  UCHAR i;
                  
                  OSDAPI_SetAlignType(OSD_ALIGN_CENTER);
                  OSDAPI_SetIndentIndex(48);
                  
                  for (i = 0; i < OSD_FUNC_ITEMS; i++) {
                      if (OSDIsFuncItemValid(i)) {
                          OSDAPI_FillLineAttr(ucFuncITMPosTb[2 * i], ucFuncITMPosTb[2 * i + 1], OSD_FUNC_WIDTH, FUNC_FRA
             -ME_COLOR);
                      }
                      else {
                          OSDAPI_FillLineAttr(ucFuncITMPosTb[2 * i], ucFuncITMPosTb[2 * i + 1], OSD_FUNC_WIDTH, DISABLE_
             -COLOR);
                      }
                  }
                  OSDAPI_ShowIndentString(FALSE, ucFuncITMPosTb[0], ucFuncITMPosTb[1], OSD_FUNC_WIDTH, ThrDCnvTab[UserDa
             -ta.ucLanguage]);
                  OSDAPI_ShowIndentString(FALSE, ucFuncITMPosTb[2], ucFuncITMPosTb[3], OSD_FUNC_WIDTH, ThrDAdpTab[UserDa
             -ta.ucLanguage]);
                  OSDAPI_ShowIndentString(FALSE, ucFuncITMPosTb[4], ucFuncITMPosTb[5], OSD_FUNC_WIDTH, ThrDDphTab[UserDa
             -ta.ucLanguage]);
                  OSDAPI_ShowIndentString(FALSE, ucFuncITMPosTb[6], ucFuncITMPosTb[7], OSD_FUNC_WIDTH, ThrDVwTab[UserDat
             -a.ucLanguage]);
                  OSDAPI_ShowIndentString(FALSE, ucFuncITMPosTb[8], ucFuncITMPosTb[9], OSD_FUNC_WIDTH, ThrDLRTab[UserDat
             -a.ucLanguage]);
                  OSDAPI_ShowIndentString(FALSE, ucFuncITMPosTb[10], ucFuncITMPosTb[11], OSD_FUNC_WIDTH, ThrDTwoDTab[Use
             -rData.ucLanguage]);
              }
              
              void OSDSelectFuncItem(UCHAR id)
              {
                  OSDWinAttr attr;
                  UCHAR x, y;
              
                  OSDAPI_SelOSDWin(OSD_WINDOW2);
              
C51 COMPILER V8.02   OSDVIEW                                                               08/07/2015 16:22:28 PAGE 17  

                  RST_WINATTR_ALL(attr);
                  attr.ucWinClr = I_WHITE;
                  SET_WINATTR_BEVEL(attr);
                  SET_BEVEL_TYPE(attr,0);
                  SET_BEVEL_WIDTH(attr,1);
                  attr.ucRBorderClr = I_MAGENTA;
                  attr.ucLBorderClr = I_MAGENTA;
                  OSDAPI_SetOSDWinAttr(attr);
                  
                  x = ucFuncITMPosTb[id*2];
                  y = ucFuncITMPosTb[id*2+1];
                  
                  OSDAPI_SetOSDWinSize(x, y, OSD_FUNC_WIDTH, y);
                  
                  OSDAPI_OSDWinOn(OSD_WINDOW2);
              }
              
              void OSDUnselectFuncItem(UCHAR id)
              {
                  id = 0;
                  OSDAPI_OSDWinOff(OSD_WINDOW2);
              }
              
              BOOL OSDIsFuncItemValid(UCHAR id)
              {
              #if (ENABLE_SCALER_3D == ON) && (ENABLE_3D_CNV == ON)
                  if (SC3DAPI_IsHDMI3D() || SC3DAPI_IsAMD3D()) {
                      if ((id != OSD_FUNCITM_5) && (id != OSD_FUNCITM_6)) {
                          return FALSE;
                      }
                  }
                  else if (SC3DAPI_Is2DTo3D()) {
                      return TRUE;
                  }
                  else if (SC3DAPI_IsDisplay3D()) {
                      if ((id == OSD_FUNCITM_2) || (id == OSD_FUNCITM_3) || (id == OSD_FUNCITM_4)) {
                          return FALSE;
                      }
                  }
                  else {
                      if (id != OSD_FUNCITM_1) {
                          return FALSE;
                      }
                  }
              #else
                  id = 0;
              #endif    
                  return TRUE;
              }
              #endif
 966          //******************************************************************************
 967          // Prototype: 
 968          //  BOOL OSDUserUpdate(void)
 969          // Parameters:
 970          //  None
 971          // Return:
 972          //  return TRUE or FALSE to indicate data should be updated or not
 973          // Purpose:
 974          //  Check user data need to be updated or not
 975          // Notes:
 976          //  None
 977          //******************************************************************************
C51 COMPILER V8.02   OSDVIEW                                                               08/07/2015 16:22:28 PAGE 18  

 978          BOOL OSDUserUpdate(void)
 979          {
 980   1          BOOL tmp = IsOSDUpdUsr();
 981   1          ClearOSDUpdUsrFlag();
 982   1          return tmp;
 983   1      }
 984          
 985          //******************************************************************************
 986          // Prototype: 
 987          //  BOOL OSDTmgUpdate(void)
 988          // Parameters:
 989          //  None
 990          // Return:
 991          //  return TRUE or FALSE to indicate data should be updated or not
 992          // Purpose:
 993          //  Check timing data need to be updated or not
 994          // Notes:
 995          //  None
 996          //******************************************************************************
 997          BOOL OSDTmgUpdate(void)
 998          {
 999   1          BOOL tmp = IsOSDUpdTmg();
1000   1          ClearOSDUpdTmgFlag();
1001   1          return tmp;
1002   1      }
1003          
1004          //******************************************************************************
1005          // Prototype: 
1006          //  BOOL OSDSysUpdate(void)
1007          // Parameters:
1008          //  None
1009          // Return:
1010          //  return TRUE or FALSE to indicate data should be updated or not
1011          // Purpose:
1012          //  Check system data need to be updated or not
1013          // Notes:
1014          //  None
1015          //******************************************************************************
1016          BOOL OSDSysUpdate(void)
1017          {
1018   1          BOOL tmp = IsOSDUpdSys();
1019   1          ClearOSDUpdSysFlag();
1020   1          return tmp;
1021   1      }
1022          
1023          //******************************************************************************
1024          // Prototype: 
1025          //  BOOL OSDCalUpdate(void)
1026          // Parameters:
1027          //  None
1028          // Return:
1029          //  return TRUE or FALSE to indicate data should be updated or not
1030          // Purpose:
1031          //  Check cal data need to be updated or not
1032          // Notes:
1033          //  None
1034          //******************************************************************************
1035          BOOL OSDCalUpdate(void)
1036          {
1037   1          BOOL tmp = IsOSDUpdCal();
1038   1          ClearOSDUpdCalFlag();
1039   1          return tmp;
C51 COMPILER V8.02   OSDVIEW                                                               08/07/2015 16:22:28 PAGE 19  

1040   1      }
1041          
1042          //******************************************************************************
1043          // Prototype:
1044          //  void OSDClosed(void)
1045          // Parameters:
1046          //  None
1047          // Return:
1048          //  None
1049          // Purpose:
1050          //  Close OSD & do something necessary
1051          // Notes:
1052          //  None
1053          //******************************************************************************
1054          void OSDClosed(void)
1055          {
1056   1      //printf("OSDClosed_S\n");      //150526 george
1057   1      #if ENABLE_DBC == ON
              #if ENABLE_DBC_HW_DEBOUNCE == OFF
                  ClearDBCCounter();
              #endif
              #endif
1062   1          OSDAPI_TurnOffOSD();
1063   1          OSDAPI_OSDWinOff(OSD_WIN_OFF);
1064   1          ucMenuType = OSD_OFF;
1065   1      //printf("OSDClosed_E\n");      //150526 george
1066   1      }
1067          
1068          //******************************************************************************
1069          // Prototype:
1070          //  void OSDInitialize(BOOL bForceInit)
1071          // Parameters:
1072          //  None
1073          // Return:
1074          //  None
1075          // Purpose:
1076          //  Initial OSD Font & Palette
1077          // Notes:
1078          //  None
1079          //******************************************************************************
1080          void OSDInitialize(BOOL bForceInit)
1081          {
1082   1          if (!IsOSDSysInit() || bForceInit) 
1083   1              {
1084   2              SetOSDSysInitFlag();
1085   2                      OSDAPI_SetFontSize(OSD_FONT_12X18);
1086   2                      OSDAPI_SetOSDWinSizeUnit(12,18);
1087   2                      OSDAPI_LoadPalette(&ucOSDPalette);
1088   2              
1089   2              //frame size = w:32 h:17
1090   2              //one bit size = (188)x18/2 = 1692
1091   2              //two bit size = 8*18 = 144
1092   2              //four bit size= 22*18*2=792
1093   2          #if ENABLE_OSD_ROTATION == ON
                              OSDAPI_Set1BitFontAddr(OSDSRAM_ADDR_CEILING(OSDAPI_GetOSDFrameSize(32, 17)));
                              OSDAPI_Set2BitsFontAddr(OSDSRAM_ADDR_FLOOR(OSD_ROT_RAM_SIZE - 792 - 144));
                              OSDAPI_Set4BitsFontAddr(OSDSRAM_ADDR_FLOOR(OSD_ROT_RAM_SIZE - 792));
                  #else
1098   2                      OSDAPI_Set1BitFontAddr(OSDAPI_GetOSDFrameSize(32, 17));
1099   2                      OSDAPI_Set2BitsFontAddr(OSD_RAM_SIZE - 792 - 144);
1100   2                      OSDAPI_Set4BitsFontAddr(OSD_RAM_SIZE - 792);
1101   2          #endif
C51 COMPILER V8.02   OSDVIEW                                                               08/07/2015 16:22:28 PAGE 20  

1102   2                      OSDAPI_LoadFont(OSD_FONT_NORMAL, &ucOneBitFontTable);
1103   2                      OSDAPI_LoadFont(OSD_FONT_NORMAL, &ucTwoBitsFontTable);
1104   2                      OSDAPI_LoadFont(OSD_FONT_NORMAL, &ucFourBitsFontTable);
1105   2                      OSDAPI_SetIndentFont(usArialFontTable, ucArialWidthTable);
1106   2                      OSDAPI_SetOSDFadeInOut(0, 0, 0, 0, OSD_FADE_LEFT_BOT);
1107   2              }
1108   1      }
1109          
1110          //******************************************************************************
1111          // Prototype:
1112          //  void OSDInitFrame(UCHAR osdw, UCHAR osdh, USHRT clr)
1113          // Parameters:
1114          //  osdw    : OSD width
1115          //  osdh    : OSD height
1116          //  clr     : OSD color
1117          // Return:
1118          //  None
1119          // Purpose:
1120          //  Initial OSD width, height andf color
1121          // Notes:
1122          //  None
1123          //******************************************************************************
1124          void OSDInitFrame(UCHAR osdw, UCHAR osdh, USHRT clr)
1125          {
1126   1          OSDAPI_TurnOffOSD();
1127   1          OSDAPI_OSDWinOff(OSD_WIN_OFF);
1128   1          OSDAPI_SetOSDWidth(osdw);
1129   1          OSDAPI_SetOSDHeight(osdh);
1130   1          OSDAPI_SetPosition(UserData.ucOSDX,UserData.ucOSDY);                        
1131   1          OSDAPI_SetFontAttr(clr);
1132   1          OSDAPI_ClearOSD();
1133   1      }
1134          
1135          //******************************************************************************
1136          // Prototype:
1137          //  void OSDClearSubmenu(void)
1138          // Parameters:
1139          //  None
1140          // Return:
1141          //  None
1142          // Purpose:
1143          //  Clear sub menu
1144          // Notes:
1145          //  None
1146          //******************************************************************************
1147          void OSDClearSubmenu(void)
1148          {
1149   1          UCHAR i;
1150   1          OSDAPI_OSDWinOff(OSD_WINDOW2);
1151   1          for (i = 0; i < OSD_SUB_HEIGHT; i++) {
1152   2              OSDAPI_WriteXYRepeatChar(FALSE, OSD_SUB_X,OSD_SUB_Y+i,OSD_SUB_WIDTH,SPACE_CHAR);
1153   2              OSDAPI_FillLineAttr(OSD_SUB_X,OSD_SUB_Y+i,OSD_SUB_WIDTH,SUB_FRAME_COLOR);
1154   2          }
1155   1      }
1156          
1157          //******************************************************************************
1158          // Prototype: 
1159          //  void OSDShowNum(UCHAR x, UCHAR y, UCHAR value)
1160          // Parameters:
1161          //  x       : x position
1162          //  y       : y position
1163          //  value   : value to be show
C51 COMPILER V8.02   OSDVIEW                                                               08/07/2015 16:22:28 PAGE 21  

1164          // Return:
1165          //  None
1166          // Purpose:
1167          //  Show number on the specific position x,y
1168          // Notes:
1169          //  None
1170          //******************************************************************************
1171          void OSDShowNum(UCHAR x, UCHAR y, UCHAR value)
1172          {
1173   1          UCHAR i;
1174   1          UCHAR buff[4];
1175   1      
1176   1          sprintf(buff,"%3d",(USHRT)value);
1177   1      
1178   1          for(i=0; i<3; i++){
1179   2              if(buff[i] == 0x20)
1180   2                  buff[i] = 0;
1181   2              else
1182   2                  buff[i] = buff[i] - 0x28;
1183   2          }
1184   1          
1185   1          OSDAPI_WriteXYString(FALSE, x, y, 3, buff);
1186   1      }
1187          
1188          //******************************************************************************
1189          // Prototype: 
1190          //  void OSDShowSliderBar(UCHAR x, UCHAR y, UCHAR value)
1191          // Parameters:
1192          //  x       : x position
1193          //  y       : y position
1194          //  value   : value to be show
1195          // Return:
1196          //  None
1197          // Purpose:
1198          //  Show slider bar on the specific position x,y
1199          // Notes:
1200          //  None
1201          //******************************************************************************
1202          void OSDShowSliderBar(UCHAR x, UCHAR y, UCHAR value)
1203          {
1204   1          #define SLIDE_BAR_WIDTH     15
1205   1          #define SLIDE_VALUE_RANGE   100
1206   1          #define SLIDE_REMAINDER     (SLIDE_VALUE_RANGE/5)
1207   1      
1208   1          UCHAR i, k;
1209   1          USHRT m;
1210   1      
1211   1              
1212   1      #if ALS_EnDis == ALSMODE        /* Modify Bar_Color for readyOnly */      //OSD_state=usOSDState = OSD_DIRECT_1_STAT
             -E;  and  //OSD_state=usOSDState = OSD_ITEM_1_1_STATE;
                      if( (UserData.ucALSMode==INDOOR || UserData.ucALSMode==OUTDOOR) && (OSD_state==OSD_ITEM_1_1_STATE || OSD_
             -state==OSD_DIRECT_1_STATE) )  
                              OSDAPI_SetFontAttr(READONLY_COLOR);     //(2)_READONLY_COLOR (when at OSDFocusBr() )
                      else            //ALS_OFF )     
                              OSDAPI_SetFontAttr(SLIDER_COLOR);       //(1)_Normal
              
              #elif ALS_EnDis == ALSOffSET    
                      if( (UserData.bALSOnOff== ON)  && (OSD_state==OSD_ITEM_1_1_STATE || OSD_state==OSD_DIRECT_1_STATE) ) {
                              if( x==10 && y==8+3 )
                                      OSDAPI_SetFontAttr(READONLY_COLOR);     //READONLY_COLOR 
                              else
                                      OSDAPI_SetFontAttr(SLIDER_COLOR);       //Normal
C51 COMPILER V8.02   OSDVIEW                                                               08/07/2015 16:22:28 PAGE 22  

                      }else {
                              OSDAPI_SetFontAttr(SLIDER_COLOR);       //Normal
                      }
              
              #elif ALS_EnDis == ALSRange
                      if( (UserData.bALSOnOff== ON) && (OSD_state==OSD_ITEM_1_1_STATE || OSD_state==OSD_DIRECT_1_STATE) )     
                              OSDAPI_SetFontAttr(READONLY_COLOR);     //(2)_READONLY_COLOR (when at OSDFocusBr() )
                      else            //ALS_OFF )     
                              OSDAPI_SetFontAttr(SLIDER_COLOR);       //(1)_Normal
              
              #else   //Normal
1235   1              OSDAPI_SetFontAttr(SLIDER_COLOR);       //Normal
1236   1      #endif  //#if ALS_EnDis == ENABLE
1237   1      
1238   1      
1239   1          // Avoid input value is over SLIDE_VALUE_RANGE
1240   1          if (value > SLIDE_VALUE_RANGE) {
1241   2              value = SLIDE_VALUE_RANGE;
1242   2          }
1243   1      
1244   1          m = (USHRT) y * OSDAPI_GetOSDWidth() + x;
1245   1          OSDAPI_InitSeqWriteCodeFCAttr(m);
1246   1      
1247   1          OSDAPI_SeqWriteCodeFCAttr(0x01);
1248   1          m = value * SLIDE_BAR_WIDTH;
1249   1          k = m / SLIDE_VALUE_RANGE;
1250   1          for (i = 0; i < k; i++) {
1251   2              OSDAPI_SeqWriteCodeFCAttr(0x06);
1252   2          }
1253   1          if (i < SLIDE_BAR_WIDTH) {
1254   2              k = (m % SLIDE_VALUE_RANGE) / SLIDE_REMAINDER;
1255   2              switch (k) {
1256   3                  case 0:
1257   3                      OSDAPI_SeqWriteCodeFCAttr(0x02);
1258   3                      break;
1259   3                  case 1:
1260   3                      OSDAPI_SeqWriteCodeFCAttr(0x03);
1261   3                      break;
1262   3                  case 2:
1263   3                      OSDAPI_SeqWriteCodeFCAttr(0x04);
1264   3                      break;
1265   3                  case 3:
1266   3                      OSDAPI_SeqWriteCodeFCAttr(0x05);
1267   3                      break;
1268   3                  case 4:
1269   3                      OSDAPI_SeqWriteCodeFCAttr(0x06);
1270   3                      break;
1271   3              }
1272   2              i++;
1273   2              for (i; i < SLIDE_BAR_WIDTH; i++) {
1274   3                  OSDAPI_SeqWriteCodeFCAttr(0x02);
1275   3              }
1276   2          }
1277   1          OSDAPI_SeqWriteCodeFCAttr(0x07);
1278   1      }
1279          
1280          //******************************************************************************
1281          // Prototype: 
1282          //  void OSDShowDialog(UCHAR dlg)
1283          // Parameters:
1284          //  dlg     : information type
1285          // Return:
C51 COMPILER V8.02   OSDVIEW                                                               08/07/2015 16:22:28 PAGE 23  

1286          //  None
1287          // Purpose:
1288          //  Show information OSD
1289          // Notes:
1290          //  None
1291          //******************************************************************************
1292          void OSDShowDialog(UCHAR dlg)
1293          {
1294   1      
1295   1          OSDWinAttr attr;
1296   1      
1297   1          OSDInitialize(FALSE);
1298   1          OSDInitFrame(OSD_INFO_WIDTH, OSD_INFO_HEIGHT, INFO_DLG_COLOR);
1299   1          if (dlg == OSD_DLG_NOTICE) 
1300   1              {
1301   2               OSDAPI_SetPosition(99,98);
1302   2          }
1303   1          else 
1304   1              {
1305   2                      OSDAPI_SetPosition(50,98); //(50,50);  FEFANJACKY
1306   2          }
1307   1          OSDAPI_FillLineAttr(0,0,OSD_INFO_WIDTH, TITLE_COLOR);
1308   1          OSDAPI_FillLineAttr(0,1,OSD_INFO_WIDTH, TITLE_COLOR);
1309   1          OSDAPI_FillLineAttr(0,2,OSD_INFO_WIDTH, TITLE_COLOR);
1310   1      
1311   1          OSDAPI_SelOSDWin(OSD_WINDOW7);
1312   1          RST_WINATTR_ALL(attr);
1313   1          attr.ucWinClr = I_TGREEN;
1314   1          OSDAPI_SetOSDWinAttr(attr);
1315   1          OSDAPI_SetOSDWinSize(0, 0, OSD_INFO_WIDTH-1, 2);
1316   1          OSDAPI_SetOSDWinGrad(0x00, 0x00, 0x02, 0x01);
1317   1      
1318   1          OSDAPI_SelOSDWin(OSD_WINDOW6);
1319   1          attr.ucWinClr = I_WHITE;
1320   1          OSDAPI_SetOSDWinAttr(attr);
1321   1          OSDAPI_SetOSDWinSize(0, 3, OSD_INFO_WIDTH-1, OSD_INFO_HEIGHT);
1322   1          OSDAPI_SetOSDWinGrad(0x00, 0x01, 0x01, 0x01);
1323   1      
1324   1          OSDAPI_OSDWinOn(OSD_WINDOW7);
1325   1          OSDAPI_OSDWinOn(OSD_WINDOW6);
1326   1      
1327   1          OSDAPI_SetIndentIndex(32);
1328   1          OSDAPI_SetAlignType(OSD_ALIGN_CENTER);
1329   1      
1330   1          ucMenuType = dlg;
1331   1          switch(dlg) {
1332   2              case OSD_DLG_BRIGHTNESS:
1333   2                          OSDAPI_ShowIndentString(FALSE, 0, 1, OSD_INFO_WIDTH, 
1334   2                                                  BrightnessStrTab[UserData.ucLanguage]);
1335   2                                      
1336   2                              #if ALS_EnDis == ALSMODE
                                              //      OSDShowSliderBar(5,5, UserData.ucBrightness);
                                             // OSDShowNum(11,6, UserData.ucBrightness);                                                              
                                              if(UserData.ucALSMode== ALS_OFF){
              
                                                      OSDShowSliderBar(5, 5, UserData.ucBrightness);
                                                      OSDShowNum(11,6, UserData.ucBrightness);
                                              }else{
                                                      OSDShowSliderBar(5, 5, NowAlsBright);
                                                      OSDShowNum(11,6, NowAlsBright);
                                              }
              
C51 COMPILER V8.02   OSDVIEW                                                               08/07/2015 16:22:28 PAGE 24  

                                      #elif ALS_EnDis == ALSOffSET    
                                              if( UserData.bALSOnOff == OFF )                 //george: add_condition to run "UserData.ucBrightness"
                                              {
                                          OSDShowSliderBar(5,5, UserData.ucBrightness);
                                          OSDShowNum(11,6, UserData.ucBrightness);
                      
                                              }else{                                                                  //george: F_ALSBV_04F,  ALS to run "ucALSOnSetBrigVal"
                      //                  OSDShowSliderBar(5,5, UserData.ucALSBaseVal);               //ucALSOnSetBrigVal);
                      //                  OSDShowNum(11,6, UserData.ucALSBaseVal);                    //ucALSOnSetBrigVal);
                                              }
                                                                      
                                      #elif ALS_EnDis == ALSRange
                                              if(UserData.bALSOnOff== OFF){
              
                                                      OSDShowSliderBar(5, 5, UserData.ucBrightness);
                                                      OSDShowNum(11,6, UserData.ucBrightness);
                                              }else{
                                                      OSDShowSliderBar(5, 5, NowAlsBright);
                                                      OSDShowNum(11,6, NowAlsBright);
                                              }
              
                                      #else   //Normal
1370   2                                      OSDShowSliderBar(5,5, UserData.ucBrightness);
1371   2                              OSDShowNum(11,6, UserData.ucBrightness);                                                
1372   2                              #endif  //#if ALS_EnDis == ENABLE
1373   2      
1374   2                  break;
1375   2              case OSD_DLG_CONTRAST  :
1376   2                  OSDAPI_ShowIndentString(FALSE, 0, 1, OSD_INFO_WIDTH, 
1377   2                                          ContrastStrTab[UserData.ucLanguage]);
1378   2                  OSDShowSliderBar(5,5, UserData.ucContrast);
1379   2                  OSDShowNum(11,6, UserData.ucContrast);
1380   2                  break;
1381   2              case OSD_DLG_VOLUME    :
1382   2                  OSDAPI_ShowIndentString(FALSE, 0, 1, OSD_INFO_WIDTH, 
1383   2                                          VolumeStrTab[UserData.ucLanguage]);
1384   2                  OSDShowSliderBar(5,5, UserData.ucVolume);
1385   2                  OSDShowNum(11,6, UserData.ucVolume);
1386   2                  break;
1387   2              case OSD_DLG_AUTOTUNE  :
1388   2                  OSDAPI_ShowIndentString(FALSE, 0, 1, OSD_INFO_WIDTH, 
1389   2                                          AutoStrTab[UserData.ucLanguage]);
1390   2                  OSDAPI_ShowIndentString(FALSE, 0, 5, OSD_INFO_WIDTH, 
1391   2                                          WaitStrTab[UserData.ucLanguage]);
1392   2                  break;
1393   2              case OSD_DLG_85Hz :
1394   2                  OSDAPI_ShowIndentString(FALSE, 0, 1, OSD_INFO_WIDTH, 
1395   2                                          AttentionStrTab[UserData.ucLanguage]);
1396   2                  OSDAPI_ShowIndentString(FALSE, 0, 5, OSD_INFO_WIDTH, 
1397   2                                          OutOfRange85HzStrTab[UserData.ucLanguage]);
1398   2                  break;
1399   2              case OSD_DLG_OUTOFRANGE:
1400   2                  OSDAPI_ShowIndentString(FALSE, 0, 1, OSD_INFO_WIDTH, 
1401   2                                          AttentionStrTab[UserData.ucLanguage]);
1402   2                  OSDAPI_ShowIndentString(FALSE, 0, 5, OSD_INFO_WIDTH, 
1403   2                                          OutOfRangeOverStrTab[UserData.ucLanguage]);
1404   2                  break;
1405   2              case OSD_DLG_NOSYNC    :
1406   2                  OSDAPI_ShowIndentString(FALSE, 0, 1, OSD_INFO_WIDTH, 
1407   2                                          AttentionStrTab[UserData.ucLanguage]);
1408   2                  OSDAPI_ShowIndentString(FALSE, 0, 5, OSD_INFO_WIDTH, 
1409   2                                          NoVideoStrTab[UserData.ucLanguage]);
C51 COMPILER V8.02   OSDVIEW                                                               08/07/2015 16:22:28 PAGE 25  

1410   2                  break;
1411   2              case OSD_DLG_NOCABLE   :
1412   2                      
1413   2      //            OSDAPI_ShowIndentString(FALSE, 0, 1, OSD_INFO_WIDTH, 
1414   2      //                                    AttentionStrTab[UserData.ucLanguage]);
1415   2      //            OSDAPI_ShowIndentString(FALSE, 0, 4, OSD_INFO_WIDTH, 
1416   2      //                                    DisconnectedStrTab[UserData.ucLanguage]);  
1417   2                                
1418   2                              //CHIU          
1419   2                      {
1420   3                        code UCHAR time_str[] = {12,"HOUR:MIN:SEC"};
1421   3                        OSDAPI_ShowIndentString(FALSE, 0, 1, OSD_INFO_WIDTH, DisconnectedStrTab[UserData.ucLanguage]); 
             -     
1422   3                        OSDAPI_ShowIndentString(FALSE, 0, 4, OSD_INFO_WIDTH, time_str);
1423   3                  }
1424   2                  break;
1425   2      #if 0            
                      case OSD_DLG_OSDLOCK   :
                          OSDAPI_ShowIndentString(FALSE, 0, 1, OSD_INFO_WIDTH, 
                                                  AttentionStrTab[UserData.ucLanguage]);
                          OSDAPI_ShowIndentString(FALSE, 0, 5, OSD_INFO_WIDTH, 
                                                  OSD_LockStrTab[UserData.ucLanguage]);
                          break;
              #endif
1433   2      
1434   2              case OSD_DLG_SLEEP:
1435   2                  OSDAPI_ShowIndentString(FALSE, 0, 1, OSD_INFO_WIDTH, 
1436   2                                          AttentionStrTab[UserData.ucLanguage]);
1437   2                  OSDAPI_ShowIndentString(FALSE, 0, 5, OSD_INFO_WIDTH, 
1438   2                                          NoSyncStrTab[UserData.ucLanguage]);
1439   2                  break;
1440   2      
1441   2      
1442   2              case OSD_DLG_NOTICE:                                                                                    
1443   2                  OSDAPI_ShowIndentString(FALSE, 0, 1, OSD_INFO_WIDTH, InputStrTab[UserData.ucLanguage]);
1444   2      #if (INPUT_INTERFACE&INPUT_MHL0) || (INPUT_INTERFACE&INPUT_MHL1)
1445   2                  if((UserData.ucInputSource != INPUT_SC_DP) && (GetInputSyncMode() == DIG_SYNC) && MHL_IsMHLInp
             -ut() ) 
1446   2                              {
1447   3                              code UCHAR MHL_StrTab1[]={3,"MHL"};
1448   3                              OSDAPI_ShowIndentString(FALSE, 0, 5, OSD_INFO_WIDTH, MHL_StrTab1);
1449   3                  }
1450   2                  else 
1451   2                              {
1452   3                              OSDAPI_ShowIndentString(FALSE, 0, 5, OSD_INFO_WIDTH, 
1453   3                                          SourceStrTab[UserData.ucInputSource*NUM_OSDLANGS+UserData.ucLanguage])
             -;
1454   3                  }
1455   2      #else
                          OSDAPI_ShowIndentString(FALSE, 0, 5, OSD_INFO_WIDTH, 
                                                  SourceStrTab[UserData.ucInputSource*NUM_OSDLANGS+UserData.ucLanguage])
             -;
              
              #endif
1460   2                  break;
1461   2      
1462   2      
1463   2              case OSD_DLG_BURNIN:
1464   2                      {
1465   3                        code UCHAR time_str[] = {12,"HOUR:MIN:SEC"};
1466   3                        OSDAPI_ShowIndentString(FALSE, 0, 1, OSD_INFO_WIDTH, BurnInStrTab[UserData.ucLanguage]);      
1467   3                        OSDAPI_ShowIndentString(FALSE, 0, 4, OSD_INFO_WIDTH, time_str);
C51 COMPILER V8.02   OSDVIEW                                                               08/07/2015 16:22:28 PAGE 26  

1468   3                      }
1469   2                  break;
1470   2      
1471   2      
1472   2      #if ALS_EnDis == ALSMODE
              
              #elif ALS_EnDis == ALSOffSET    //don't know used where ~
                              case OSD_DLG_ALS_BASE_VALUE:            // george: F_ALSBV_03B1
                          OSDAPI_ShowIndentString(FALSE, 0, 1, OSD_INFO_WIDTH, 
                                                  ALSBVStrTab[UserData.ucLanguage]);
                                                                                      //george: F_ALSBV_04F,  ALS to run "ucALSOnSetBrigVal"
                                  OSDShowSliderBar(5,5, UserData.ucALSBaseVal);
                                  OSDShowNum(11,6, UserData.ucALSBaseVal);
              
                                      break;
              #else   //Normal
1484   2      
1485   2      #endif  //#if ALS_EnDis == ENABLE
1486   2      
1487   2      
1488   2              default:
1489   2                  break;
1490   2              
1491   2          }
1492   1      
1493   1          OSDTurnOnOSD();
1494   1      }
1495          
1496          
1497          //******************************************************************************
1498          // Prototype: 
1499          //  void OSDMovePosition(void)
1500          // Parameters:
1501          //  None
1502          // Return:
1503          //  None
1504          // Purpose:
1505          //  None
1506          // Notes:
1507          //  None
1508          //******************************************************************************
1509          void OSDMovePosition(void)
1510          {
1511   1          USHRT lmt_x, lmt_y, stp_x, stp_y;
1512   1      
1513   1      #if ENABLE_OSD_ROTATION == ON
                  if (UserData.bOSDRotation) {
                      lmt_x = MAX_ROT_X;
                      lmt_y = MAX_ROT_Y;
                      stp_x = OSD_MOVESTEP_ROT_X;
                      stp_y = OSD_MOVESTEP_ROT_Y;
                  }
                  else {
                      lmt_x = MAX_X;
                      lmt_y = MAX_Y;
                      stp_x = OSD_MOVESTEP_X;
                      stp_y = OSD_MOVESTEP_Y;
                  }
              #else
1527   1          lmt_x = MAX_X;
1528   1          lmt_y = MAX_Y;
1529   1          stp_x = OSD_MOVESTEP_X;
C51 COMPILER V8.02   OSDVIEW                                                               08/07/2015 16:22:28 PAGE 27  

1530   1          stp_y = OSD_MOVESTEP_Y;
1531   1      #endif
1532   1      
1533   1          if(usOSDMovingX < 0x8000){
1534   2              usOSDMovingX += stp_x;
1535   2              if(usOSDMovingX >= lmt_x){
1536   3                  usOSDMovingX = 0x8000+lmt_x;
1537   3              }
1538   2          }
1539   1          else{
1540   2              usOSDMovingX -= stp_x;
1541   2              if(usOSDMovingX < 0x8000){
1542   3                  usOSDMovingX = 1;
1543   3              }
1544   2          }   
1545   1          if(usOSDMovingY < 0x8000){
1546   2              usOSDMovingY += stp_y;  
1547   2              if(usOSDMovingY >= lmt_y){
1548   3                  usOSDMovingY = 0x8000+lmt_y;
1549   3              }
1550   2          }
1551   1          else{
1552   2              usOSDMovingY -= stp_y;  
1553   2              if(usOSDMovingY <0x8000){
1554   3                  usOSDMovingY = 1;
1555   3              }
1556   2          }
1557   1          
1558   1          OSDAPI_SetRowPosition(usOSDMovingX&0x7fff, usOSDMovingY&0x7fff);
1559   1      }
1560          
1561          
1562          
1563          //******************************************************************************
1564          // Prototype: 
1565          //  
1566          // Parameters:
1567          //  None
1568          // Return:
1569          //  None
1570          // Purpose:
1571          //  None
1572          // Notes:
1573          //  None
1574          //******************************************************************************
1575          void OSDFocusBr(void)
1576          {
1577   1          OSDClearSubmenu();
1578   1      
1579   1      #if ALS_EnDis == ALSMODE
                      OSDShowBrightness(TRUE);
              
              #elif ALS_EnDis == ALSOffSET    
                      if(UserData.bALSOnOff == ON)
                              OSDShowALSBV(TRUE);                     // george: F_ALSBV_03B
                      else
                              OSDShowBrightness(TRUE);
              
              #elif ALS_EnDis == ALSRange
                      OSDShowBrightness(TRUE);
              
              #else   //Normal
C51 COMPILER V8.02   OSDVIEW                                                               08/07/2015 16:22:28 PAGE 28  

1592   1              OSDShowBrightness(TRUE);
1593   1      #endif  //#if ALS_EnDis == ENABLE
1594   1      
1595   1      }
1596          
1597          void OSDFocusCn(void)
1598          {
1599   1          OSDClearSubmenu();
1600   1          OSDShowContrast(TRUE);
1601   1      }
1602          
1603          //void OSDFocusGamma(void)
1604          //{
1605          //    OSDClearSubmenu();
1606          //    OSDShowGamma(TRUE);
1607          //}
1608          
1609          
1610          
1611          #if ALS_EnDis == ALSMODE
                      void OSDFocusALSMode(void)
                      {
                              OSDClearSubmenu();
                              OSDShowALSMode(TRUE);
                      }       
                      
              #elif ALS_EnDis == ALSOffSET    
                      void OSDFocusALSOnOff(void)                     // george: F_ALSOnOff_03A
                      {
                          OSDClearSubmenu();
                          OSDShowALSOnOff(TRUE);
                      }
              
              #elif ALS_EnDis == ALSRange
                      void OSDFocusALSOnOff(void)                     // george: F_ALSOnOff_03A
                      {
                          OSDClearSubmenu();
                          OSDShowALSOnOff(TRUE);
                      }
              
              #else   //Normal
1633          
1634          #endif  //#if ALS_EnDis == ENABLE
1635          
1636          
1637          /* void OSDFocusALSBV(void)                     //george: F_ALSBV_03A
1638          {
1639              OSDClearSubmenu();
1640              OSDShowALSBV(TRUE);
1641          } */
1642          
1643          
1644          #if TOUCH_EnDis == ENABLE
              void OSDFocusTouch(void)                        //george: F_Touch_03A
              {
                  OSDClearSubmenu();
                  OSDShowTouch(TRUE);
              }
              #endif //#if TOUCH_EnDis == ENABLE
1651                                   
1652          
1653          
C51 COMPILER V8.02   OSDVIEW                                                               08/07/2015 16:22:28 PAGE 29  

1654          /*
1655          void OSDFocusGItem16(void)                      // george_Item16
1656          {
1657              OSDClearSubmenu();
1658              OSDShowALS(TRUE);
1659          }
1660          
1661          void OSDFocusGItem17(void)                      // george_Item17
1662          {
1663              OSDClearSubmenu();
1664              OSDShowALS(TRUE);
1665          }
1666          */
1667          
1668          void OSDFocusSR(void)
1669          {
1670   1      #if ENABLE_SR
1671   1          OSDClearSubmenu();
1672   1          OSDShowSR(TRUE);
1673   1      #endif
1674   1      }
1675          
1676          void OSDFocusPhase(void)
1677          {
1678   1          OSDClearSubmenu();
1679   1          OSDShowPhase(TRUE);
1680   1      }
1681          
1682          void OSDFocusClock(void)
1683          {
1684   1          OSDClearSubmenu();
1685   1          OSDShowClock(TRUE);
1686   1      }
1687          
1688          void OSDFocusHPos(void)
1689          {
1690   1          OSDClearSubmenu();
1691   1          OSDShowHPos(TRUE);
1692   1      }
1693          
1694          void OSDFocusVPos(void)
1695          {
1696   1          OSDClearSubmenu();
1697   1          OSDShowVPos(TRUE);
1698   1      }
1699          
1700          void OSDFocusClrTmp(void)
1701          {
1702   1          OSDClearSubmenu();
1703   1          OSDShowClrTmp(TRUE);
1704   1      }
1705          
1706          void OSDFocusRGain(void)
1707          {
1708   1          OSDClearSubmenu();
1709   1          OSDShowRGain(TRUE);
1710   1      }
1711          
1712          void OSDFocusGGain(void)
1713          {
1714   1          OSDClearSubmenu();
1715   1          OSDShowGGain(TRUE);
C51 COMPILER V8.02   OSDVIEW                                                               08/07/2015 16:22:28 PAGE 30  

1716   1      }
1717          
1718          void OSDFocusBBain(void)
1719          {
1720   1          OSDClearSubmenu();
1721   1          OSDShowBGain(TRUE);
1722   1      }
1723          
1724          void OSDFocusOSDHPos(void)
1725          {
1726   1          OSDClearSubmenu();
1727   1          OSDShowOSDHPos(TRUE);
1728   1      }
1729          
1730          void OSDFocusOSDVPos(void)
1731          {
1732   1          OSDClearSubmenu();
1733   1          OSDShowOSDVPos(TRUE);
1734   1      }
1735          
1736          void OSDFocusOSDTran(void)
1737          {
1738   1          OSDClearSubmenu();
1739   1          OSDShowOSDTran(TRUE);
1740   1      }
1741          
1742          void OSDFocusTimer(void)
1743          {
1744   1          OSDClearSubmenu();
1745   1          OSDShowTimer(TRUE);
1746   1      }
1747          
1748          //void OSDFocusOSDRotation(void)
1749          //{
1750          //    OSDClearSubmenu();
1751          //    OSDShowOSDRotation(TRUE);
1752          //}
1753          
1754          void OSDFocusLang(void)
1755          {
1756   1          OSDClearSubmenu();
1757   1          OSDShowLang(TRUE);
1758   1      }
1759          //---------------------------------                     
1760          void OSDFocusVolume(void)               
1761          {
1762   1          OSDClearSubmenu();
1763   1          OSDShowVolume(TRUE);
1764   1      }
1765          //---------------------------------
1766          void OSDFocusMute(void)                                 
1767          {
1768   1          OSDClearSubmenu();
1769   1          OSDShowMute(TRUE);
1770   1      }
1771          
1772          void OSDFocusInput(void)                                        
1773          {
1774   1          OSDClearSubmenu();
1775   1          OSDShowInput(TRUE);
1776   1      }
1777          
C51 COMPILER V8.02   OSDVIEW                                                               08/07/2015 16:22:28 PAGE 31  

1778          //void OSDFocusDCR(void)
1779          //{
1780          //    OSDClearSubmenu();
1781          //    OSDShowDCR(TRUE);
1782          //}
1783          
1784          //void OSDFocusAspRatio(void)
1785          //{
1786          //    OSDClearSubmenu();
1787          //    OSDShowAspRatio(TRUE);
1788          //}
1789          
1790          //void OSDFocusOverscan(void)
1791          //{
1792          //    OSDClearSubmenu();
1793          //    OSDShowOverScan(TRUE);
1794          //}
1795          
1796          //void OSDFocusOD(void)
1797          //{
1798          //    OSDClearSubmenu();
1799          //    OSDShowOD(TRUE);
1800          //}
1801          
1802          void OSDFocusReset(void)
1803          {
1804   1          OSDClearSubmenu();
1805   1          OSDShowReset(TRUE);
1806   1      }
1807          
1808          
1809          #if ENABLE_FUNC_OSD == ON
              void OSDFocus3DCnv(void)
              {
                  OSDClearFuncMenu();
                  OSDShowThrDCnvMenu(TRUE);
              }
              
              void OSDFocus2Dto3DAdpt(void)
              {
                  OSDClearFuncMenu();
                  OSDShow2Dto3DAdpt(TRUE);
              }
              
              void OSDFocus2Dto3DDepth(void)
              {
                  OSDClearFuncMenu();
                  OSDShow2Dto3DDepth(TRUE);
              }
              
              void OSDFocus2Dto3DView(void)
              {
                  OSDClearFuncMenu();
                  OSDShow2Dto3DView(TRUE);
              }
              
              void OSDFocus3DLRSwap(void)
              {
                  OSDClearFuncMenu();
                  OSDShow3DLRSwap(TRUE);
              }
              
C51 COMPILER V8.02   OSDVIEW                                                               08/07/2015 16:22:28 PAGE 32  

              void OSDFocus3DTo2D(void)
              {
                  OSDClearFuncMenu();
                  OSDShow3DTo2D(TRUE);
              }
              #endif
1846          
1847          
1848          void OSDShowResolution(UCHAR x, UCHAR y)
1849          {
1850   1          UCHAR i;
1851   1          UCHAR buff[32];
1852   1      
1853   1          sprintf(buff,"n%dx%d@%d.%dHz",InputTiming.usModeHActive,
1854   1                                        InputTiming.usModeVActive,
1855   1                                        InputTiming.usVSyncFreq/10, 
1856   1                                        InputTiming.usVSyncFreq%10);
1857   1          
1858   1          for(i=0; i<32; i++) {
1859   2              if(buff[i] == 0)
1860   2                  break;
1861   2          }
1862   1          
1863   1          buff[0] = i - 1;
1864   1          OSDAPI_SetAlignType(OSD_ALIGN_RIGHT);
1865   1      #ifdef USE_X19N_BOARD
                  y = 1; 
                  OSDAPI_ShowIndentString(FALSE, x, y, 15, buff);
              #else
1869   1          OSDAPI_ShowIndentString(FALSE, x, y, 15, buff);
1870   1      #endif
1871   1      }
1872          
1873          void OSDShowBrightness(UCHAR redraw)
1874          {
1875   1          if (redraw)
1876   1          {
1877   2              OSDAPI_SetIndentIndex(48);
1878   2              OSDAPI_SetAlignType(OSD_ALIGN_LEFT);
1879   2              OSDAPI_ShowIndentString(FALSE, 5, 6, OSD_SUB_WIDTH, 
1880   2                                      BrightnessStrTab[UserData.ucLanguage]);
1881   2          }
1882   1               
1883   1              #if ALS_EnDis == ALSMODE
                              if(UserData.ucALSMode== ALS_OFF)
                              {
                                          if (ucMenuType == OSD_DLG_BRIGHTNESS) {
                                              OSDShowSliderBar(5, 5, UserData.ucBrightness);
                                              OSDShowNum(11,6, UserData.ucBrightness);
                                          }else {
                                              OSDShowSliderBar(10,8, UserData.ucBrightness);
                                              OSDShowNum(25,6, UserData.ucBrightness);
                                          }   
                              }else{
                                          if (ucMenuType == OSD_DLG_BRIGHTNESS) {
                                              OSDShowSliderBar(5, 5, NowAlsBright);
                                              OSDShowNum(11,6, NowAlsBright);
                                          }else {
                                              OSDShowSliderBar(10,8, NowAlsBright);
                                              OSDShowNum(25,6, NowAlsBright);
                                          }
                              }
C51 COMPILER V8.02   OSDVIEW                                                               08/07/2015 16:22:28 PAGE 33  

              
                      #elif ALS_EnDis == ALSOffSET    
                          if (ucMenuType == OSD_DLG_BRIGHTNESS) {
                              OSDShowSliderBar(5, 5, UserData.ucBrightness);
                              OSDShowNum(11,6, UserData.ucBrightness);
                          }else {
                              OSDShowSliderBar(10,8, UserData.ucBrightness);
                              OSDShowNum(25,6, UserData.ucBrightness);
                          }   
              
                      #elif ALS_EnDis == ALSRange
                              if(UserData.bALSOnOff== OFF)
                              {
                                          if (ucMenuType == OSD_DLG_BRIGHTNESS) {
                                              OSDShowSliderBar(5, 5, UserData.ucBrightness);
                                              OSDShowNum(11,6, UserData.ucBrightness);
                                          }else {
                                              OSDShowSliderBar(10,8, UserData.ucBrightness);
                                              OSDShowNum(25,6, UserData.ucBrightness);
                                          }           
                              }else{
                                          if (ucMenuType == OSD_DLG_BRIGHTNESS) {
                                              OSDShowSliderBar(5, 5, NowAlsBright);
                                              OSDShowNum(11,6, NowAlsBright);
                                          }else {
                                              OSDShowSliderBar(10,8, NowAlsBright);
                                              OSDShowNum(25,6, NowAlsBright);
                                          }
                              }                                                
              
                      #else   //Normal
1933   1      
1934   1                  if (ucMenuType == OSD_DLG_BRIGHTNESS) {
1935   2                      OSDShowSliderBar(5, 5, UserData.ucBrightness);
1936   2                      OSDShowNum(11,6, UserData.ucBrightness);
1937   2                  }else {
1938   2                      OSDShowSliderBar(10,8, UserData.ucBrightness);
1939   2                      OSDShowNum(25,6, UserData.ucBrightness);
1940   2                  }
1941   1              #endif  //#if ALS_EnDis == ENABLE
1942   1      }
1943          
1944          
1945          void OSDShowContrast(UCHAR redraw)
1946          {
1947   1          if (redraw)
1948   1          {
1949   2              OSDAPI_SetIndentIndex(48);
1950   2              OSDAPI_SetAlignType(OSD_ALIGN_LEFT);
1951   2              OSDAPI_ShowIndentString(FALSE, 5, 6, OSD_SUB_WIDTH, 
1952   2                                      ContrastStrTab[UserData.ucLanguage]);
1953   2          }
1954   1          if (ucMenuType == OSD_DLG_CONTRAST) {
1955   2              OSDShowSliderBar(5, 5, UserData.ucContrast);
1956   2              OSDShowNum(11, 6, UserData.ucContrast);
1957   2          }
1958   1          else {
1959   2              OSDShowSliderBar(10,8, UserData.ucContrast);
1960   2              OSDShowNum(25,6, UserData.ucContrast);
1961   2          }
1962   1      }
1963          
C51 COMPILER V8.02   OSDVIEW                                                               08/07/2015 16:22:28 PAGE 34  

1964          void OSDShowVolume(UCHAR redraw)
1965          {
1966   1          if (redraw)
1967   1          {
1968   2              OSDAPI_SetIndentIndex(48);
1969   2              OSDAPI_SetAlignType(OSD_ALIGN_LEFT);
1970   2              OSDAPI_ShowIndentString(FALSE, 5, 6, OSD_SUB_WIDTH, 
1971   2                                      VolumeStrTab[UserData.ucLanguage]);
1972   2          }
1973   1          if (ucMenuType == OSD_DLG_VOLUME) {
1974   2              OSDShowSliderBar(5, 5, UserData.ucVolume);
1975   2              OSDShowNum(11, 6, UserData.ucVolume);
1976   2          }
1977   1          else {
1978   2              OSDShowSliderBar(10,8, UserData.ucVolume);
1979   2              OSDShowNum(25,6, UserData.ucVolume);
1980   2          }
1981   1      }
1982          
1983          //void OSDShowGamma(UCHAR redraw)
1984          //{
1985          //    if (redraw)
1986          //    {
1987          //        OSDAPI_SetIndentIndex(48);
1988          //        OSDAPI_SetAlignType(OSD_ALIGN_LEFT);
1989          //        OSDAPI_ShowIndentString(FALSE, 5, 6, OSD_SUB_WIDTH, 
1990          //                                GammaStrTab[UserData.ucLanguage]);
1991          //    }
1992          //
1993          //    OSDAPI_SetAlignType(OSD_ALIGN_CENTER);
1994          //    OSDAPI_SetIndentIndex(64);
1995          //    OSDAPI_ShowIndentString(FALSE, 5, 8, OSD_SUB_WIDTH, OffTab[UserData.ucLanguage]);
1996          //    OSDAPI_ShowIndentString(FALSE, 5,10, OSD_SUB_WIDTH, OnTab[UserData.ucLanguage]);
1997          //
1998          //    OSDAPI_SelOSDWin(OSD_WINDOW2);
1999          //    OSDAPI_SetOSDWinSize( 5, 8+2*UserData.bGammaOnOff, 
2000          //                         29, 8+2*UserData.bGammaOnOff);
2001          //    OSDAPI_OSDWinOn(OSD_WINDOW2);
2002          //}
2003          
2004          
2005          
2006          
2007          #if ALS_EnDis == ALSMODE
                      //method(1) ALS Mode Select
                      void OSDShowALSMode(UCHAR redraw)
                      {       
                          if (redraw)
                          {
                              OSDAPI_SetIndentIndex(48);
                              OSDAPI_SetAlignType(OSD_ALIGN_LEFT);
                              OSDAPI_ShowIndentString(FALSE, 5, 6, OSD_SUB_WIDTH, 
                                                      ALSMdStrTab[UserData.ucLanguage]);
                          }
                      
                          OSDAPI_SetAlignType(OSD_ALIGN_CENTER);
                          OSDAPI_SetIndentIndex(64);
                          OSDAPI_ShowIndentString(FALSE, 5, 8, OSD_SUB_WIDTH, ALSItemStrTab[0]);
                          OSDAPI_ShowIndentString(FALSE, 5, 9, OSD_SUB_WIDTH, ALSItemStrTab[1]);
                          OSDAPI_ShowIndentString(FALSE, 5,10, OSD_SUB_WIDTH, ALSItemStrTab[2]);    
                      
                      
C51 COMPILER V8.02   OSDVIEW                                                               08/07/2015 16:22:28 PAGE 35  

                          OSDAPI_SelOSDWin(OSD_WINDOW2);
                          OSDAPI_SetOSDWinSize( 5, 8+UserData.ucALSMode, 
                                               29, 8+UserData.ucALSMode);
                          OSDAPI_OSDWinOn(OSD_WINDOW2);
                      }
              #elif ALS_EnDis == ALSOffSET
              
                      void OSDShowALSOnOff(UCHAR redraw)                              // george: F_ALSOnOff_03B                               ++++++++++++++++++++++++++++++++++++++
             -++++++++++++++++++++++++++++++++++
                      {
                          if (redraw)
                          {
                              OSDAPI_SetIndentIndex(48);
                              OSDAPI_SetAlignType(OSD_ALIGN_LEFT);
                              OSDAPI_ShowIndentString(FALSE, 5, 6, OSD_SUB_WIDTH, 
                                                      ALSOnOffStrTab[UserData.ucLanguage]);
                          }
                      
                          OSDAPI_SetAlignType(OSD_ALIGN_CENTER);
                          OSDAPI_SetIndentIndex(64);
                          OSDAPI_ShowIndentString(FALSE, 5, 8, OSD_SUB_WIDTH, OffTab[UserData.ucLanguage]);
                          OSDAPI_ShowIndentString(FALSE, 5,10, OSD_SUB_WIDTH, OnTab[UserData.ucLanguage]);
                      
                          OSDAPI_SelOSDWin(OSD_WINDOW2);
                          OSDAPI_SetOSDWinSize( 5, 8+2*UserData.bALSOnOff, 
                                               29, 8+2*UserData.bALSOnOff);
                          OSDAPI_OSDWinOn(OSD_WINDOW2);
                      }
              
                      //method(2) ALS Base Value Modify.
                      void OSDShowALSBV(UCHAR redraw)                         // george: F_ALSBV_03B                          ++++++++++++++++++++++++++++++++++++++++++++
             -++++++++++++++++++++++++++++
                      {
                          if (redraw)
                          {                                                     
                              OSDAPI_SetIndentIndex(48);
                              OSDAPI_SetAlignType(OSD_ALIGN_LEFT);
                              OSDAPI_ShowIndentString(FALSE, 5, 6+1, OSD_SUB_WIDTH, 
                                                      ALSBVStrTab[UserData.ucLanguage]);              // change to used BrightnessStrTab[] 
             - 
                                      //show now brightness 
                              OSDAPI_ShowIndentString(FALSE, 5, 6+4, OSD_SUB_WIDTH, 
                                                      BrightnessStrTab[UserData.ucLanguage]);
                          }
              
              
                              {//modify
                                  if (ucMenuType == OSD_DLG_ALS_BASE_VALUE) {                                                 // george: F_ALSBV_03B1 ,       why used this condition?
                                      OSDShowSliderBar(5, 5, UserData.ucALSBaseVal);
                                      OSDShowNum(11, 6, UserData.ucALSBaseVal);
                                  }
                                  else 
                                      {
                                      OSDShowSliderBar(10,8, UserData.ucALSBaseVal);
                                      OSDShowNum(25+2,6+2, UserData.ucALSBaseVal);
                                  }
              
                                      {//add
                                      OSDShowSliderBar(10,8+3, NowAlsBright);
                                      OSDShowNum(25+2,6+5, NowAlsBright);
                                  }           
                              }                       
C51 COMPILER V8.02   OSDVIEW                                                               08/07/2015 16:22:28 PAGE 36  

                      }
              
              #elif ALS_EnDis == ALSRange
                      void OSDShowALSOnOff(UCHAR redraw)                              // george: F_ALSOnOff_03B                               ++++++++++++++++++++++++++++++++++++++
             -++++++++++++++++++++++++++++++++++
                      {
                          if (redraw)
                          {
                              OSDAPI_SetIndentIndex(48);
                              OSDAPI_SetAlignType(OSD_ALIGN_LEFT);
                              OSDAPI_ShowIndentString(FALSE, 5, 6, OSD_SUB_WIDTH, 
                                                      ALSOnOffStrTab[UserData.ucLanguage]);
                          }
                      
                          OSDAPI_SetAlignType(OSD_ALIGN_CENTER);
                          OSDAPI_SetIndentIndex(64);
                          OSDAPI_ShowIndentString(FALSE, 5, 8, OSD_SUB_WIDTH, OffTab[UserData.ucLanguage]);
                          OSDAPI_ShowIndentString(FALSE, 5,10, OSD_SUB_WIDTH, OnTab[UserData.ucLanguage]);
                      
                          OSDAPI_SelOSDWin(OSD_WINDOW2);
                          OSDAPI_SetOSDWinSize( 5, 8+2*UserData.bALSOnOff, 
                                               29, 8+2*UserData.bALSOnOff);
                          OSDAPI_OSDWinOn(OSD_WINDOW2);
                      }
              
              #else   //Normal
2110          
2111          #endif  //#if ALS_EnDis == ENABLE
2112          
2113          
2114          
2115          
2116          #if TOUCH_EnDis == ENABLE
                      void OSDShowTouch(UCHAR redraw)                 // george: F_Touch_03B                          +++++++++++++++++++++++++++++++++++++++++++++
             -+++++++++++++++++++++++++++
                      {
                          if (redraw)
                          {
                              OSDAPI_SetIndentIndex(48);
                              OSDAPI_SetAlignType(OSD_ALIGN_LEFT);
                              OSDAPI_ShowIndentString(FALSE, 5, 6, OSD_SUB_WIDTH, 
                                                      TouchSWStrTab[UserData.ucLanguage]);    //george: F_Touch_02
                          }
                      
                          OSDAPI_SetAlignType(OSD_ALIGN_CENTER);
                          OSDAPI_SetIndentIndex(64);
                          OSDAPI_ShowIndentString(FALSE, 5, 8, OSD_SUB_WIDTH, OffTab[UserData.ucLanguage]);
                          OSDAPI_ShowIndentString(FALSE, 5,10, OSD_SUB_WIDTH, OnTab[UserData.ucLanguage]);
                      
                          OSDAPI_SelOSDWin(OSD_WINDOW2);
                          OSDAPI_SetOSDWinSize( 5, 8+2*UserData.bTouchOnOff, 
                                               29, 8+2*UserData.bTouchOnOff);
                          OSDAPI_OSDWinOn(OSD_WINDOW2);
                      }
              #endif //#if TOUCH_EnDis == ENABLE
2138          
2139          
2140          /*
2141          void OSDShowGItem16(UCHAR redraw)                       // george_Item16
2142          {
2143              if (redraw)
2144              {
C51 COMPILER V8.02   OSDVIEW                                                               08/07/2015 16:22:28 PAGE 37  

2145                  OSDAPI_SetIndentIndex(48);
2146                  OSDAPI_SetAlignType(OSD_ALIGN_LEFT);
2147                  OSDAPI_ShowIndentString(FALSE, 5, 6, OSD_SUB_WIDTH, 
2148                                          GItem16StrTab[UserData.ucLanguage]);
2149              }
2150          
2151              OSDAPI_SetAlignType(OSD_ALIGN_CENTER);
2152              OSDAPI_SetIndentIndex(64);
2153              OSDAPI_ShowIndentString(FALSE, 5, 8, OSD_SUB_WIDTH, OffTab[UserData.ucLanguage]);
2154              OSDAPI_ShowIndentString(FALSE, 5,10, OSD_SUB_WIDTH, OnTab[UserData.ucLanguage]);
2155          
2156              OSDAPI_SelOSDWin(OSD_WINDOW2);
2157              OSDAPI_SetOSDWinSize( 5, 8+2*UserData.ucALSMode, 
2158                                   29, 8+2*UserData.ucALSMode);     // george: re-write-code "UserData.xxx"
2159              OSDAPI_OSDWinOn(OSD_WINDOW2);
2160          }
2161          
2162          void OSDShowGItem17(UCHAR redraw)                       // george_Item17
2163          {
2164              if (redraw)
2165              {
2166                  OSDAPI_SetIndentIndex(48);
2167                  OSDAPI_SetAlignType(OSD_ALIGN_LEFT);
2168                  OSDAPI_ShowIndentString(FALSE, 5, 6, OSD_SUB_WIDTH, 
2169                                          GItem17StrTab[UserData.ucLanguage]);
2170              }
2171          
2172              OSDAPI_SetAlignType(OSD_ALIGN_CENTER);
2173              OSDAPI_SetIndentIndex(64);
2174              OSDAPI_ShowIndentString(FALSE, 5, 8, OSD_SUB_WIDTH, OffTab[UserData.ucLanguage]);
2175              OSDAPI_ShowIndentString(FALSE, 5,10, OSD_SUB_WIDTH, OnTab[UserData.ucLanguage]);
2176          
2177              OSDAPI_SelOSDWin(OSD_WINDOW2);
2178              OSDAPI_SetOSDWinSize( 5, 8+2*UserData.ucALSMode, 
2179                                   29, 8+2*UserData.ucALSMode);     // george: re-write-code "UserData.xxx"
2180              OSDAPI_OSDWinOn(OSD_WINDOW2);
2181          }
2182          */
2183          
2184          
2185          
2186          #if ENABLE_SR
2187          void OSDShowSR(UCHAR redraw)
2188          {       
2189   1          if (redraw)
2190   1          {
2191   2              OSDAPI_SetIndentIndex(48);
2192   2              OSDAPI_SetAlignType(OSD_ALIGN_LEFT);
2193   2              OSDAPI_ShowIndentString(FALSE, 5, 6, OSD_SUB_WIDTH, 
2194   2                                      SRStrTab[UserData.ucLanguage]);
2195   2          }
2196   1      
2197   1          OSDAPI_SetAlignType(OSD_ALIGN_CENTER);
2198   1          OSDAPI_SetIndentIndex(64);
2199   1          OSDAPI_ShowIndentString(FALSE, 5, 8, OSD_SUB_WIDTH, SRItemStrTab[0]);
2200   1          OSDAPI_ShowIndentString(FALSE, 5, 9, OSD_SUB_WIDTH, SRItemStrTab[1]);
2201   1          OSDAPI_ShowIndentString(FALSE, 5,10, OSD_SUB_WIDTH, SRItemStrTab[2]);    
2202   1          OSDAPI_ShowIndentString(FALSE, 5,11, OSD_SUB_WIDTH, SRItemStrTab[3]);    
2203   1          OSDAPI_ShowIndentString(FALSE, 5,12, OSD_SUB_WIDTH, SRItemStrTab[4]);        
2204   1      
2205   1          OSDAPI_SelOSDWin(OSD_WINDOW2);
2206   1          OSDAPI_SetOSDWinSize( 5, 8+UserData.ucSRMode, 
C51 COMPILER V8.02   OSDVIEW                                                               08/07/2015 16:22:28 PAGE 38  

2207   1                               29, 8+UserData.ucSRMode);
2208   1          OSDAPI_OSDWinOn(OSD_WINDOW2);
2209   1      }
2210          #endif
2211          
2212          void OSDShowPhase(UCHAR redraw)
2213          {
2214   1          UCHAR phase;
2215   1          
2216   1          if (redraw)
2217   1          {
2218   2              OSDAPI_SetIndentIndex(48);
2219   2              OSDAPI_SetAlignType(OSD_ALIGN_LEFT);
2220   2              OSDAPI_ShowIndentString(FALSE, 5, 6, OSD_SUB_WIDTH, 
2221   2                                      PhaseStrTab[UserData.ucLanguage]);
2222   2          }
2223   1          
2224   1          phase = UserGetNormalPhase();
2225   1          
2226   1          OSDShowSliderBar(10, 8, phase);
2227   1          OSDShowNum(25, 6, phase);
2228   1      }
2229          
2230          void OSDShowClock(UCHAR redraw)
2231          {
2232   1          UCHAR clock;
2233   1          
2234   1          if (redraw)
2235   1          {
2236   2              OSDAPI_SetIndentIndex(48);
2237   2              OSDAPI_SetAlignType(OSD_ALIGN_LEFT);
2238   2              OSDAPI_ShowIndentString(FALSE, 5, 6, OSD_SUB_WIDTH, ClockStrTab[UserData.ucLanguage]);
2239   2          }
2240   1      
2241   1          clock = UserGetNormalClock();
2242   1      
2243   1          OSDShowSliderBar(10, 8, clock);
2244   1          OSDShowNum(25, 6, clock);
2245   1      }
2246          
2247          void OSDShowHPos(UCHAR redraw)
2248          {
2249   1          UCHAR pos;
2250   1          
2251   1          if (redraw)
2252   1          {
2253   2              OSDAPI_SetIndentIndex(48);
2254   2              OSDAPI_SetAlignType(OSD_ALIGN_LEFT);
2255   2              OSDAPI_ShowIndentString(FALSE, 5, 6, OSD_SUB_WIDTH, HPosStrTab[UserData.ucLanguage]);
2256   2          }
2257   1      
2258   1          pos = UserGetNormalHPosn();
2259   1          
2260   1          OSDShowSliderBar(10, 8, pos);
2261   1          OSDShowNum(25, 6, pos);
2262   1      }
2263          
2264          void OSDShowVPos(UCHAR redraw)
2265          {
2266   1          UCHAR pos;
2267   1      
2268   1          if (redraw)
C51 COMPILER V8.02   OSDVIEW                                                               08/07/2015 16:22:28 PAGE 39  

2269   1          {
2270   2              OSDAPI_SetIndentIndex(48);
2271   2              OSDAPI_SetAlignType(OSD_ALIGN_LEFT);
2272   2              OSDAPI_ShowIndentString(FALSE, 5, 6, OSD_SUB_WIDTH, VPosStrTab[UserData.ucLanguage]);
2273   2          }
2274   1      
2275   1          pos = UserGetNormalVPosn();
2276   1      
2277   1          OSDShowSliderBar(10,8, pos);
2278   1          OSDShowNum(25,6, pos);
2279   1      }
2280          
2281          void OSDShowClrTmp(UCHAR redraw)
2282          {
2283   1          UCHAR tmp;
2284   1      
2285   1              if (redraw)
2286   1          {
2287   2              OSDAPI_SetIndentIndex(48);
2288   2      //g OSDAPI_SetAlignType(OSD_ALIGN_LEFT);
2289   2                      OSDAPI_SetAlignType(OSD_ALIGN_CENTER);
2290   2              OSDAPI_ShowIndentString(FALSE, 5, 6, OSD_SUB_WIDTH, ColorTempStrTab[UserData.ucLanguage]);
2291   2       #ifdef colortemp                                                       //140509 mike           
                       printf("140421 mike OSDShowClrTmp ====>if (redraw);\n\r");             
               #endif          
2294   2          }
2295   1          
2296   1          tmp = UserData.ucColorTemp;
2297   1          OSDAPI_SetAlignType(OSD_ALIGN_CENTER);
2298   1          OSDAPI_SetIndentIndex(64);
2299   1              OSDAPI_ShowIndentString(FALSE, 5, 8, OSD_SUB_WIDTH, ColorTemp_StrTab[0*NUM_OSDLANGS+UserData.ucLan
             -guage]);
2300   1              OSDAPI_ShowIndentString(FALSE, 5, 9, OSD_SUB_WIDTH, ColorTemp_StrTab[1*NUM_OSDLANGS+UserData.ucLan
             -guage]);
2301   1              OSDAPI_ShowIndentString(FALSE, 5,10, OSD_SUB_WIDTH, ColorTemp_StrTab[2*NUM_OSDLANGS+UserData.ucLan
             -guage]);
2302   1              OSDAPI_ShowIndentString(FALSE, 5,11, OSD_SUB_WIDTH, ColorTemp_StrTab[3*NUM_OSDLANGS+UserData.ucLan
             -guage]);
2303   1       #ifdef colortemp                                                              //140509 mike           
                    printf("140429 mike OSDShowClrTmp ;\n\r");                //140421 mike   
               #endif     
2306   1          OSDAPI_SelOSDWin(OSD_WINDOW2);
2307   1          OSDAPI_SetOSDWinSize(5, 8+tmp, 29, 8+tmp);
2308   1          OSDAPI_OSDWinOn(OSD_WINDOW2);
2309   1      }
2310          
2311          void OSDShowRGain(UCHAR redraw)
2312          {
2313   1          if (redraw)
2314   1          {
2315   2              OSDAPI_SetIndentIndex(48);
2316   2              OSDAPI_SetAlignType(OSD_ALIGN_LEFT);
2317   2              OSDAPI_ShowIndentString(FALSE, 5, 6, OSD_SUB_WIDTH, RedStrTab[UserData.ucLanguage]);
2318   2          }
2319   1          OSDShowSliderBar(10,8, UserData.ucUserRGain);
2320   1          OSDShowNum(25,6, UserData.ucUserRGain);
2321   1      }
2322          
2323          void OSDShowGGain(UCHAR redraw)
2324          {
2325   1          if (redraw)
2326   1          {
C51 COMPILER V8.02   OSDVIEW                                                               08/07/2015 16:22:28 PAGE 40  

2327   2              OSDAPI_SetIndentIndex(48);
2328   2              OSDAPI_SetAlignType(OSD_ALIGN_LEFT);
2329   2              OSDAPI_ShowIndentString(FALSE, 5, 6, OSD_SUB_WIDTH, GreenStrTab[UserData.ucLanguage]);
2330   2          }
2331   1          OSDShowSliderBar(10,8, UserData.ucUserGGain);
2332   1          OSDShowNum(25,6, UserData.ucUserGGain);
2333   1      }
2334          
2335          void OSDShowBGain(UCHAR redraw)
2336          {
2337   1          if (redraw)
2338   1          {
2339   2              OSDAPI_SetIndentIndex(48);
2340   2              OSDAPI_SetAlignType(OSD_ALIGN_LEFT);
2341   2              OSDAPI_ShowIndentString(FALSE, 5, 6, OSD_SUB_WIDTH, BlueStrTab[UserData.ucLanguage]);
2342   2          }
2343   1          OSDShowSliderBar(10,8, UserData.ucUserBGain);
2344   1          OSDShowNum(25,6, UserData.ucUserBGain);
2345   1      }
2346          
2347          void OSDShowOSDHPos(UCHAR redraw)
2348          {
2349   1          if (redraw)
2350   1          {
2351   2              OSDAPI_SetIndentIndex(48);
2352   2              OSDAPI_SetAlignType(OSD_ALIGN_LEFT);
2353   2              OSDAPI_ShowIndentString(FALSE, 5, 6, OSD_SUB_WIDTH, HorizontalStrTab[UserData.ucLanguage]);
2354   2          }
2355   1          OSDShowSliderBar(10,8, UserData.ucOSDX);
2356   1          OSDShowNum(25,6, UserData.ucOSDX);
2357   1      }
2358          
2359          void OSDShowOSDVPos(UCHAR redraw)
2360          {
2361   1          if (redraw)
2362   1          {
2363   2              OSDAPI_SetIndentIndex(48);
2364   2              OSDAPI_SetAlignType(OSD_ALIGN_LEFT);
2365   2              OSDAPI_ShowIndentString(FALSE, 5, 6, OSD_SUB_WIDTH, VerticalStrTab[UserData.ucLanguage]);
2366   2          }
2367   1          OSDShowSliderBar(10,8, UserData.ucOSDY);
2368   1          OSDShowNum(25,6, UserData.ucOSDY);
2369   1      }
2370          
2371          void OSDShowOSDTran(UCHAR redraw)
2372          {
2373   1          UCHAR ratio;
2374   1          if (redraw)
2375   1          {
2376   2              OSDAPI_SetIndentIndex(48);
2377   2              OSDAPI_SetAlignType(OSD_ALIGN_LEFT);
2378   2              OSDAPI_ShowIndentString(FALSE, 5, 6, OSD_SUB_WIDTH, TransparencyStrTab[UserData.ucLanguage]);
2379   2          }
2380   1          ratio = (USHRT)UserData.ucOSDTransparent*100/MAXIMUM_OSD_TRANS;
2381   1          OSDShowSliderBar(10,8, ratio);
2382   1          OSDShowNum(25,6, UserData.ucOSDTransparent);
2383   1      }
2384          
2385          void OSDShowTimer(UCHAR redraw)
2386          {
2387   1          UCHAR ratio;
2388   1          if (redraw)
C51 COMPILER V8.02   OSDVIEW                                                               08/07/2015 16:22:28 PAGE 41  

2389   1          {
2390   2              OSDAPI_SetIndentIndex(48);
2391   2              OSDAPI_SetAlignType(OSD_ALIGN_LEFT);
2392   2              OSDAPI_ShowIndentString(FALSE, 5, 6, OSD_SUB_WIDTH, OSDTimeStrTab[UserData.ucLanguage]);
2393   2          }
2394   1          ratio = (USHRT)UserData.ucOSDTimer*100/MAXIMUM_OSD_TIMER;
2395   1          OSDShowSliderBar(10,8, ratio);
2396   1          OSDShowNum(25,6, UserData.ucOSDTimer);
2397   1      }
2398          
2399          //void OSDShowOSDRotation(UCHAR redraw)
2400          //{
2401          //    if (redraw)
2402          //    {
2403          //        OSDAPI_SetIndentIndex(48);
2404          //        OSDAPI_SetAlignType(OSD_ALIGN_LEFT);
2405          //        OSDAPI_ShowIndentString(FALSE, 5, 6, OSD_SUB_WIDTH, OSDRotationStrTab[UserData.ucLanguage]);
2406          //    }
2407          //
2408          //    OSDAPI_SetAlignType(OSD_ALIGN_CENTER);
2409          //    OSDAPI_SetIndentIndex(64);
2410          //    OSDAPI_ShowIndentString(FALSE, 5, 8, OSD_SUB_WIDTH, OffTab[UserData.ucLanguage]);
2411          //    OSDAPI_ShowIndentString(FALSE, 5,10, OSD_SUB_WIDTH, OnTab[UserData.ucLanguage]);
2412          //
2413          //    OSDAPI_SelOSDWin(OSD_WINDOW2);
2414          //    OSDAPI_SetOSDWinSize( 5, 8+2*UserData.bOSDRotation,
2415          //                         29, 8+2*UserData.bOSDRotation);
2416          //    OSDAPI_OSDWinOn(OSD_WINDOW2);
2417          //}
2418          
2419          void OSDShowLang(UCHAR redraw)
2420          {
2421   1          UCHAR tmp;
2422   1          if (redraw)
2423   1          {
2424   2              OSDAPI_SetIndentIndex(48);
2425   2              OSDAPI_SetAlignType(OSD_ALIGN_LEFT);
2426   2              OSDAPI_ShowIndentString(FALSE, 5, 6, OSD_SUB_WIDTH, LanguageStrTab[UserData.ucLanguage]);
2427   2          }
2428   1      
2429   1          OSDAPI_SetAlignType(OSD_ALIGN_CENTER);
2430   1          OSDAPI_SetIndentIndex(64);
2431   1          OSDAPI_ShowIndentString(FALSE,  5, 8, OSD_SUB_WIDTH/2, CountryStrTab[OSDLANG_ENGLISH]);
2432   1          OSDAPI_ShowIndentString(FALSE, 17, 8, OSD_SUB_WIDTH/2, CountryStrTab[OSDLANG_SPANISH]);
2433   1          OSDAPI_ShowIndentString(FALSE,  5, 9, OSD_SUB_WIDTH/2, CountryStrTab[OSDLANG_FRENCH]);
2434   1          OSDAPI_ShowIndentString(FALSE, 17, 9, OSD_SUB_WIDTH/2, CountryStrTab[OSDLANG_GERMAN]);
2435   1          OSDAPI_ShowIndentString(FALSE,  5,10, OSD_SUB_WIDTH/2, CountryStrTab[OSDLANG_ITALIAN]);
2436   1          OSDAPI_ShowIndentString(FALSE, 17,10, OSD_SUB_WIDTH/2, CountryStrTab[OSDLANG_PORTUGUESE]);
2437   1          OSDAPI_ShowIndentString(FALSE,  5,11, OSD_SUB_WIDTH/2, CountryStrTab[OSDLANG_RUSSIAN]);
2438   1          OSDAPI_ShowIndentString(FALSE, 17,11, OSD_SUB_WIDTH/2, CountryStrTab[OSDLANG_SCHINESE]);
2439   1      
2440   1          tmp = UserData.ucLanguage / 2;
2441   1          OSDAPI_SelOSDWin(OSD_WINDOW2);
2442   1          if ((UserData.ucLanguage&BIT0) == 0)
2443   1              OSDAPI_SetOSDWinSize( 5, 8+tmp, 16, 8+tmp);
2444   1          else
2445   1              OSDAPI_SetOSDWinSize(17, 8+tmp, 29, 8+tmp);
2446   1          OSDAPI_OSDWinOn(OSD_WINDOW2);
2447   1      }
2448          
2449          void OSDShowMute(UCHAR redraw)
2450          {
C51 COMPILER V8.02   OSDVIEW                                                               08/07/2015 16:22:28 PAGE 42  

2451   1          if (redraw)
2452   1          {
2453   2              OSDAPI_SetIndentIndex(48);
2454   2              OSDAPI_SetAlignType(OSD_ALIGN_LEFT);
2455   2              OSDAPI_ShowIndentString(FALSE, 5, 6, OSD_SUB_WIDTH, MuteTab[UserData.ucLanguage]);
2456   2          }
2457   1      
2458   1          OSDAPI_SetAlignType(OSD_ALIGN_CENTER);
2459   1          OSDAPI_SetIndentIndex(64);
2460   1          OSDAPI_ShowIndentString(FALSE, 5, 8, OSD_SUB_WIDTH, OffTab[UserData.ucLanguage]);
2461   1          OSDAPI_ShowIndentString(FALSE, 5,10, OSD_SUB_WIDTH, OnTab[UserData.ucLanguage]);
2462   1      
2463   1          OSDAPI_SelOSDWin(OSD_WINDOW2);
2464   1          OSDAPI_SetOSDWinSize( 5, 8+2*UserData.bAudioMute,
2465   1                               29, 8+2*UserData.bAudioMute);
2466   1          OSDAPI_OSDWinOn(OSD_WINDOW2);
2467   1      }
2468          
2469          void OSDShowInput(UCHAR redraw)                                                 //140318  
2470          {
2471   1      //#if GG_OSD_INPUT_DP_HIDE == ENABLE    //george: when DP_en used varaible.
2472   1          UCHAR i,len = CheckTotalPortNum();
2473   1      //#endif
2474   1          
2475   1          if (redraw)
2476   1          {
2477   2              OSDAPI_SetIndentIndex(48);
2478   2              OSDAPI_SetAlignType(OSD_ALIGN_LEFT);
2479   2              OSDAPI_ShowIndentString(FALSE, 5, 6, OSD_SUB_WIDTH, InputStrTab[UserData.ucLanguage]);
2480   2          }
2481   1          
2482   1          OSDAPI_SetAlignType(OSD_ALIGN_CENTER);
2483   1          OSDAPI_SetIndentIndex(64);
2484   1      
2485   1      
2486   1      //#if GG_OSD_INPUT_DP_HIDE == DISABLE
2487   1      //      OSDAPI_ShowIndentString(FALSE,5,8+0,OSD_SUB_WIDTH,SourceStrTab[UserData.ucLanguage+GetInputPortName(0)*
             -NUM_OSDLANGS]);       //george
2488   1      //      OSDAPI_ShowIndentString(FALSE,5,8+1,OSD_SUB_WIDTH,SourceStrTab[UserData.ucLanguage+GetInputPortName(1)*
             -NUM_OSDLANGS]);       //george
2489   1      //#else //Normal
2490   1          for (i=0; i<len; i++ ) 
2491   1              {
2492   2               OSDAPI_ShowIndentString(FALSE,5,8+i,OSD_SUB_WIDTH,SourceStrTab[UserData.ucLanguage+GetInputPortNa
             -me(i)*NUM_OSDLANGS]);
2493   2          }
2494   1      //#endif
2495   1      
2496   1      
2497   1          OSDAPI_SelOSDWin(OSD_WINDOW2);
2498   1          OSDAPI_SetOSDWinSize( 5, 8+GetInputPortIndex(UserData.ucInputSource), 
2499   1                               29, 8+GetInputPortIndex(UserData.ucInputSource));
2500   1          OSDAPI_OSDWinOn(OSD_WINDOW2);
2501   1      }
2502          
2503          //void OSDShowDCR(UCHAR redraw)
2504          //{
2505          //    if (redraw)
2506          //    {
2507          //        OSDAPI_SetIndentIndex(48);
2508          //        OSDAPI_SetAlignType(OSD_ALIGN_LEFT);
2509          //        OSDAPI_ShowIndentString(FALSE, 5, 6, OSD_SUB_WIDTH, DCR_StrTab[UserData.ucLanguage]);
C51 COMPILER V8.02   OSDVIEW                                                               08/07/2015 16:22:28 PAGE 43  

2510          //    }
2511          //
2512          //    OSDAPI_SetAlignType(OSD_ALIGN_CENTER);
2513          //    OSDAPI_SetIndentIndex(64);
2514          //    OSDAPI_ShowIndentString(FALSE, 5, 8, OSD_SUB_WIDTH, OffTab[UserData.ucLanguage]);
2515          //    OSDAPI_ShowIndentString(FALSE, 5, 9, OSD_SUB_WIDTH, DCR_StrTab[UserData.ucLanguage]);
2516          //    OSDAPI_ShowIndentString(FALSE, 5,10, OSD_SUB_WIDTH, DBC_StrTab[UserData.ucLanguage]);
2517          //    
2518          //    OSDAPI_SelOSDWin(OSD_WINDOW2);
2519          //    OSDAPI_SetOSDWinSize( 5, 8+UserData.ucDCRMode, 
2520          //                         29, 8+UserData.ucDCRMode);
2521          //    OSDAPI_OSDWinOn(OSD_WINDOW2);
2522          //}
2523          
2524          //void OSDShowAspRatio(UCHAR redraw)
2525          //{
2526          //    if (redraw)
2527          //    {
2528          //        OSDAPI_SetIndentIndex(48);
2529          //        OSDAPI_SetAlignType(OSD_ALIGN_LEFT);
2530          //        OSDAPI_ShowIndentString(FALSE, 5, 6, OSD_SUB_WIDTH, DisplaySizeTab[UserData.ucLanguage]);
2531          //    }
2532          //
2533          //    OSDAPI_SetAlignType(OSD_ALIGN_CENTER);
2534          //    OSDAPI_SetIndentIndex(64);
2535          //    OSDAPI_ShowIndentString(FALSE, 5, 8, OSD_SUB_WIDTH, FullScreenTab[UserData.ucLanguage]);
2536          //    OSDAPI_ShowIndentString(FALSE, 5, 9, OSD_SUB_WIDTH, SmartFitTab[UserData.ucLanguage]);
2537          //    OSDAPI_ShowIndentString(FALSE, 5,10, OSD_SUB_WIDTH, Fix43Tab[UserData.ucLanguage]);
2538          //    OSDAPI_ShowIndentString(FALSE, 5,11, OSD_SUB_WIDTH, Smart43Tab[UserData.ucLanguage]);
2539          //
2540          //    OSDAPI_SelOSDWin(OSD_WINDOW2);
2541          //    OSDAPI_SetOSDWinSize( 5, 8+UserData.ucAspectRatio,
2542          //                         29, 8+UserData.ucAspectRatio);
2543          //    OSDAPI_OSDWinOn(OSD_WINDOW2);
2544          //}
2545          
2546          //void OSDShowOverScan(UCHAR redraw)
2547          //{
2548          //    if (redraw)
2549          //    {
2550          //        OSDAPI_SetIndentIndex(48);
2551          //        OSDAPI_SetAlignType(OSD_ALIGN_LEFT);
2552          //        OSDAPI_ShowIndentString(FALSE, 5, 6, OSD_SUB_WIDTH, OverScanTab[UserData.ucLanguage]);
2553          //    }
2554          //
2555          //    OSDAPI_SetAlignType(OSD_ALIGN_CENTER);
2556          //    OSDAPI_SetIndentIndex(64);
2557          //    OSDAPI_ShowIndentString(FALSE, 5, 8, OSD_SUB_WIDTH, OffTab[UserData.ucLanguage]);
2558          //    OSDAPI_ShowIndentString(FALSE, 5,10, OSD_SUB_WIDTH, OnTab[UserData.ucLanguage]);
2559          //
2560          //    OSDAPI_SelOSDWin(OSD_WINDOW2);
2561          //    OSDAPI_SetOSDWinSize( 5, 8+2*UserData.bOverScan, 
2562          //                         29, 8+2*UserData.bOverScan);
2563          //    OSDAPI_OSDWinOn(OSD_WINDOW2);
2564          //}
2565          
2566          //void OSDShowOD(UCHAR redraw)
2567          //{
2568          //    if (redraw)
2569          //    {
2570          //        OSDAPI_SetIndentIndex(48);
2571          //        OSDAPI_SetAlignType(OSD_ALIGN_LEFT);
C51 COMPILER V8.02   OSDVIEW                                                               08/07/2015 16:22:28 PAGE 44  

2572          //        OSDAPI_ShowIndentString(FALSE, 5, 6, OSD_SUB_WIDTH, OverDriverTab[UserData.ucLanguage]);
2573          //    }
2574          //
2575          //    OSDAPI_SetAlignType(OSD_ALIGN_CENTER);
2576          //    OSDAPI_SetIndentIndex(64);
2577          //    OSDAPI_ShowIndentString(FALSE, 5, 8, OSD_SUB_WIDTH, OffTab[UserData.ucLanguage]);
2578          //    OSDAPI_ShowIndentString(FALSE, 5,10, OSD_SUB_WIDTH, OnTab[UserData.ucLanguage]);
2579          //
2580          //    OSDAPI_SelOSDWin(OSD_WINDOW2);
2581          //    OSDAPI_SetOSDWinSize( 5, 8+2*UserData.ucODMode, 
2582          //                         29, 8+2*UserData.ucODMode);
2583          //    OSDAPI_OSDWinOn(OSD_WINDOW2);
2584          //}
2585          
2586          void OSDShowReset(UCHAR redraw)
2587          {
2588   1          if (redraw)
2589   1          {
2590   2              ucPerformReset = FALSE;
2591   2              OSDAPI_SetIndentIndex(48);
2592   2              OSDAPI_SetAlignType(OSD_ALIGN_LEFT);
2593   2              OSDAPI_ShowIndentString(FALSE, 5, 6, OSD_SUB_WIDTH, ResetStrTab[UserData.ucLanguage]);
2594   2          }
2595   1      
2596   1          OSDAPI_SetAlignType(OSD_ALIGN_CENTER);
2597   1          OSDAPI_SetIndentIndex(64);
2598   1          OSDAPI_ShowIndentString(FALSE, 5, 8, OSD_SUB_WIDTH, NoStrTab[UserData.ucLanguage]);
2599   1          OSDAPI_ShowIndentString(FALSE, 5,10, OSD_SUB_WIDTH, YesStrTab[UserData.ucLanguage]);
2600   1      
2601   1          OSDAPI_SelOSDWin(OSD_WINDOW2);
2602   1          OSDAPI_SetOSDWinSize( 5, 8+2*ucPerformReset, 
2603   1                               29, 8+2*ucPerformReset);
2604   1          OSDAPI_OSDWinOn(OSD_WINDOW2);
2605   1      }
2606          
2607          #if ENABLE_FUNC_OSD == ON
              void OSDShowThrDCnvMenu(UCHAR redraw)
              {
                  if (redraw)
                  {
                      OSDAPI_SetIndentIndex(48);
                      OSDAPI_SetAlignType(OSD_ALIGN_LEFT);
                      OSDAPI_ShowIndentString(FALSE, 5, 3, OSD_FUNC_WIDTH-10, 
                                              ThrDCnvTab[UserData.ucLanguage]);
                  }
                  
                  OSDAPI_SetAlignType(OSD_ALIGN_LEFT);
                  OSDAPI_SetIndentIndex(64);
              
                  OSDAPI_ShowIndentString(FALSE, 5, 5, OSD_FUNC_WIDTH-10, ThrDCnvFmtTab[0]);
                  OSDAPI_ShowIndentString(FALSE, 5, 6, OSD_FUNC_WIDTH-10, ThrDCnvFmtTab[1]);
                  OSDAPI_ShowIndentString(FALSE, 5, 7, OSD_FUNC_WIDTH-10, ThrDCnvFmtTab[2]);
                  OSDAPI_ShowIndentString(FALSE, 5, 8, OSD_FUNC_WIDTH-10, ThrDCnvFmtTab[3]);
                  OSDAPI_ShowIndentString(FALSE, 5, 9, OSD_FUNC_WIDTH-10, ThrDCnvFmtTab[4]);
                  
                  OSDAPI_SelOSDWin(OSD_WINDOW2);
                  OSDAPI_SetOSDWinSize(5, 5 + UserData.uc2DTo3DMode,
                                       OSD_FUNC_WIDTH - 5, 5 + UserData.uc2DTo3DMode);
                  OSDAPI_OSDWinOn(OSD_WINDOW2);
              }
              
              void OSDShow2Dto3DAdpt(UCHAR redraw)
C51 COMPILER V8.02   OSDVIEW                                                               08/07/2015 16:22:28 PAGE 45  

              {
                  if (redraw)
                  {
                      OSDAPI_SetIndentIndex(48);
                      OSDAPI_SetAlignType(OSD_ALIGN_LEFT);
                      OSDAPI_ShowIndentString(FALSE, 5, 3, OSD_FUNC_WIDTH-10, 
                                              ThrDAdpTab[UserData.ucLanguage]);
                  }
                  
                  OSDAPI_SetAlignType(OSD_ALIGN_LEFT);
                  OSDAPI_SetIndentIndex(64);
              
                  OSDAPI_ShowIndentString(FALSE, 5, 6, OSD_FUNC_WIDTH-10, OffTab[UserData.ucLanguage]);
                  OSDAPI_ShowIndentString(FALSE, 5, 8, OSD_FUNC_WIDTH-10, OnTab[UserData.ucLanguage]);
                  
                  OSDAPI_SelOSDWin(OSD_WINDOW2);
                  if (Is2DTo3DAdaptive()) {
                      OSDAPI_SetOSDWinSize(5, 8, OSD_FUNC_WIDTH - 5, 8);
                  }
                  else {
                      OSDAPI_SetOSDWinSize(5, 6, OSD_FUNC_WIDTH - 5, 6);
                  }
                  OSDAPI_OSDWinOn(OSD_WINDOW2);
              }
              
              void OSDShow2Dto3DDepth(UCHAR redraw)
              {
                  UCHAR tmp;
                  if (redraw)
                  {
                      OSDAPI_SetIndentIndex(48);
                      OSDAPI_SetAlignType(OSD_ALIGN_LEFT);
                      OSDAPI_ShowIndentString(FALSE, 5, 3, OSD_FUNC_WIDTH-10, 
                                              ThrDDphTab[UserData.ucLanguage]);
                  }
                  
                  tmp = UserGetNormal2DTo3DDpth();
                  
                  OSDShowSliderBar(5, 5, tmp);
                  OSDShowNum(25, 5, tmp);
              }
              
              void OSDShow2Dto3DView(UCHAR redraw)
              {
                  UCHAR tmp;
                  if (redraw)
                  {
                      OSDAPI_SetIndentIndex(48);
                      OSDAPI_SetAlignType(OSD_ALIGN_LEFT);
                      OSDAPI_ShowIndentString(FALSE, 5, 3, OSD_FUNC_WIDTH-10, 
                                              ThrDVwTab[UserData.ucLanguage]);
                  }
                  
                  tmp = UserGetNormal2DTo3DView();
                  
                  OSDShowSliderBar(5, 5, tmp);
                  OSDShowNum(25, 5, tmp);
              }
              
              void OSDShow3DLRSwap(UCHAR redraw)
              {
                  if (redraw)
C51 COMPILER V8.02   OSDVIEW                                                               08/07/2015 16:22:28 PAGE 46  

                  {
                      OSDAPI_SetIndentIndex(48);
                      OSDAPI_SetAlignType(OSD_ALIGN_LEFT);
                      OSDAPI_ShowIndentString(FALSE, 5, 3, OSD_FUNC_WIDTH-10, 
                                              ThrDLRTab[UserData.ucLanguage]);
                  }
                  
                  OSDAPI_SetAlignType(OSD_ALIGN_LEFT);
                  OSDAPI_SetIndentIndex(64);
              
                  OSDAPI_ShowIndentString(FALSE, 5, 6, OSD_FUNC_WIDTH-10, OffTab[UserData.ucLanguage]);
                  OSDAPI_ShowIndentString(FALSE, 5, 8, OSD_FUNC_WIDTH-10, OnTab[UserData.ucLanguage]);
                  
                  OSDAPI_SelOSDWin(OSD_WINDOW2);
                  if (Is3DLRSwap()) {
                      OSDAPI_SetOSDWinSize(5, 8, OSD_FUNC_WIDTH - 5, 8);
                  }
                  else {
                      OSDAPI_SetOSDWinSize(5, 6, OSD_FUNC_WIDTH - 5, 6);
                  }
                  OSDAPI_OSDWinOn(OSD_WINDOW2);
              }
              
              void OSDShow3DTo2D(UCHAR redraw)
              {
                  if (redraw)
                  {
                      OSDAPI_SetIndentIndex(48);
                      OSDAPI_SetAlignType(OSD_ALIGN_LEFT);
                      OSDAPI_ShowIndentString(FALSE, 5, 3, OSD_FUNC_WIDTH-10, 
                                              ThrDTwoDTab[UserData.ucLanguage]);
                  }
                  
                  OSDAPI_SetAlignType(OSD_ALIGN_LEFT);
                  OSDAPI_SetIndentIndex(64);
              
                  OSDAPI_ShowIndentString(FALSE, 5, 6, OSD_FUNC_WIDTH-10, OffTab[UserData.ucLanguage]);
                  OSDAPI_ShowIndentString(FALSE, 5, 8, OSD_FUNC_WIDTH-10, OnTab[UserData.ucLanguage]);
                  
                  OSDAPI_SelOSDWin(OSD_WINDOW2);
                  if (Is3DTo2DEnabled()) {
                      OSDAPI_SetOSDWinSize(5, 8, OSD_FUNC_WIDTH - 5, 8);
                  }
                  else {
                      OSDAPI_SetOSDWinSize(5, 6, OSD_FUNC_WIDTH - 5, 6);
                  }
                  OSDAPI_OSDWinOn(OSD_WINDOW2);
              }
              #endif
2745          
2746          void OSDShowBFMenu(void)
2747          {
2748   1          UCHAR i;
2749   1          OSDWinAttr attr;
2750   1      
2751   1          ucMenuType = OSD_BF_MENU;
2752   1          
2753   1          OSDInitialize(FALSE);
2754   1          OSDInitFrame(OSD_BF_WIDTH, OSD_BF_HEIGHT, BF_MENU_COLOR);
2755   1          OSDAPI_SetPosition(50, 2);
2756   1      
2757   1          OSDAPI_FillLineAttr(0,0,OSD_BF_WIDTH, TITLE_COLOR);
C51 COMPILER V8.02   OSDVIEW                                                               08/07/2015 16:22:28 PAGE 47  

2758   1          OSDAPI_FillLineAttr(0,1,OSD_BF_WIDTH, TITLE_COLOR);
2759   1          OSDAPI_FillLineAttr(0,2,OSD_BF_WIDTH, TITLE_COLOR);
2760   1      
2761   1          OSDAPI_SelOSDWin(OSD_WINDOW7);
2762   1          RST_WINATTR_ALL(attr);
2763   1          attr.ucWinClr = I_TGREEN;
2764   1          OSDAPI_SetOSDWinAttr(attr);
2765   1          OSDAPI_SetOSDWinSize(0, 0, OSD_BF_WIDTH-1, 2);
2766   1          OSDAPI_SetOSDWinGrad(0x00, 0x00, 0x02, 0x01);
2767   1      
2768   1          OSDAPI_SelOSDWin(OSD_WINDOW6);
2769   1          attr.ucWinClr = I_WHITE;
2770   1          OSDAPI_SetOSDWinAttr(attr);
2771   1          OSDAPI_SetOSDWinSize(0, 3, OSD_BF_WIDTH-1, OSD_BF_HEIGHT);
2772   1          OSDAPI_SetOSDWinGrad(0x00, 0x01, 0x01, 0x01);
2773   1      
2774   1          OSDAPI_OSDWinOn(OSD_WINDOW7);
2775   1          OSDAPI_OSDWinOn(OSD_WINDOW6);
2776   1      
2777   1          OSDAPI_SetIndentIndex(32);
2778   1          OSDAPI_SetAlignType(OSD_ALIGN_CENTER);    
2779   1      
2780   1          OSDAPI_ShowIndentString(FALSE, 0, 1, OSD_BF_WIDTH,
2781   1                                  BFStrTab[UserData.ucLanguage]);
2782   1      
2783   1          OSDAPI_SetAlignType(OSD_ALIGN_LEFT);
2784   1      
2785   1          for(i=0; i<NUMBER_CE_MODES; i++) {
2786   2              OSDAPI_ShowIndentString(FALSE, 3, i*2+4, OSD_BF_WIDTH,
2787   2                                      LTMItemStrTab[UserData.ucLanguage*NUMBER_CE_MODES+i]);
2788   2          }
2789   1          
2790   1          OSDAPI_SelOSDWin(OSD_WINDOW2);
2791   1          RST_WINATTR_ALL(attr);
2792   1          attr.ucWinClr = I_WHITE;
2793   1          SET_WINATTR_BEVEL(attr);
2794   1          SET_BEVEL_TYPE(attr,0);
2795   1          SET_BEVEL_WIDTH(attr,1);
2796   1          attr.ucRBorderClr = I_MAGENTA;
2797   1          attr.ucLBorderClr = I_MAGENTA;
2798   1          OSDAPI_SetOSDWinAttr(attr);
2799   1          OSDAPI_SetOSDWinSize(0, UserData.ucBFMode * 2 + 4, OSD_BF_WIDTH - 1, UserData.ucBFMode * 2 + 4);
2800   1          OSDAPI_OSDWinOn(OSD_WINDOW2);
2801   1      
2802   1          OSDTurnOnOSD();
2803   1      }
2804          
2805          void OSDShowSourceMenu(void)
2806          {
2807   1          UCHAR i,j,len = CheckTotalPortNum();
2808   1          OSDWinAttr attr;
2809   1      
2810   1          ucMenuType = OSD_SRC_MENU;
2811   1          
2812   1          OSDInitialize(FALSE);
2813   1          OSDInitFrame(OSD_SRC_WIDTH, OSD_SRC_HEIGHT, SRC_MENU_COLOR);
2814   1          OSDAPI_SetPosition(50, 2);
2815   1      
2816   1          OSDAPI_FillLineAttr(0,0,OSD_SRC_WIDTH, TITLE_COLOR);
2817   1          OSDAPI_FillLineAttr(0,1,OSD_SRC_WIDTH, TITLE_COLOR);
2818   1          OSDAPI_FillLineAttr(0,2,OSD_SRC_WIDTH, TITLE_COLOR);
2819   1      
C51 COMPILER V8.02   OSDVIEW                                                               08/07/2015 16:22:28 PAGE 48  

2820   1          OSDAPI_SelOSDWin(OSD_WINDOW7);
2821   1          RST_WINATTR_ALL(attr);
2822   1          attr.ucWinClr = I_TGREEN;
2823   1          OSDAPI_SetOSDWinAttr(attr);
2824   1          OSDAPI_SetOSDWinSize(0, 0, OSD_SRC_WIDTH-1, 2);
2825   1          OSDAPI_SetOSDWinGrad(0x00, 0x00, 0x02, 0x01);
2826   1      
2827   1          OSDAPI_SelOSDWin(OSD_WINDOW6);
2828   1          RST_WINATTR_ALL(attr);
2829   1          attr.ucWinClr = I_WHITE;
2830   1          OSDAPI_SetOSDWinAttr(attr);
2831   1          OSDAPI_SetOSDWinSize(0, 3, OSD_SRC_WIDTH-1, OSD_SRC_HEIGHT);
2832   1          OSDAPI_SetOSDWinGrad(0x00, 0x01, 0x01, 0x01);
2833   1      
2834   1          OSDAPI_OSDWinOn(OSD_WINDOW7);
2835   1          OSDAPI_OSDWinOn(OSD_WINDOW6);
2836   1      
2837   1          OSDAPI_SetIndentIndex(32);
2838   1          OSDAPI_SetAlignType(OSD_ALIGN_CENTER);    
2839   1      
2840   1          OSDAPI_ShowIndentString(FALSE, 0, 1, OSD_SRC_WIDTH,
2841   1                                  InputStrTab[UserData.ucLanguage]);
2842   1      
2843   1          for (i=0,j=0; i<len; i++,j+=2 ) {
2844   2             OSDAPI_ShowIndentString(FALSE,0,4+j,OSD_SRC_WIDTH,SourceStrTab[UserData.ucLanguage+GetInputPortName
             -(i)*NUM_OSDLANGS]);
2845   2          }
2846   1          OSDAPI_SelOSDWin(OSD_WINDOW2);
2847   1          RST_WINATTR_ALL(attr);
2848   1          attr.ucWinClr = I_WHITE;
2849   1          SET_WINATTR_BEVEL(attr);
2850   1          SET_BEVEL_TYPE(attr,0);
2851   1          SET_BEVEL_WIDTH(attr,1);
2852   1          attr.ucRBorderClr = I_MAGENTA;
2853   1          attr.ucLBorderClr = I_MAGENTA;
2854   1          OSDAPI_SetOSDWinAttr(attr);
2855   1          OSDAPI_SetOSDWinSize(0, GetInputPortIndex(UserData.ucInputSource) * 2 + 4, OSD_SRC_WIDTH - 1, GetInput
             -PortIndex(UserData.ucInputSource) * 2 + 4);
2856   1          OSDAPI_OSDWinOn(OSD_WINDOW2);
2857   1      
2858   1          OSDTurnOnOSD();
2859   1      }
2860          
2861          void OSDUpdateAutoTuneBar(UCHAR percentage)
2862          {
2863   1          if (ucMenuType == OSD_DLG_AUTOTUNE) {
2864   2              OSDShowSliderBar(4, 4, percentage);
2865   2          }
2866   1      }
2867          
2868          //******************************************************************************
2869          // Prototype: 
2870          //  void OSDPerformAuto(void)
2871          // Parameters:
2872          //  None
2873          // Return:
2874          //  None
2875          // Purpose:
2876          //  Perform auto tune
2877          // Notes:
2878          //  None
2879          //******************************************************************************
C51 COMPILER V8.02   OSDVIEW                                                               08/07/2015 16:22:28 PAGE 49  

2880          void OSDPerformAuto(void)
2881          {
2882   1      #if AutoTune_Debug == ENABLE
              printf("OSDPerformAuto_S\n");   //150526 george
              #endif
2885   1      
2886   1          if (GetInputSyncMode() != DIG_SYNC) {
2887   2              OSDShowDialog(OSD_DLG_AUTOTUNE);
2888   2              OSDUpdateAutoTuneBar(0);
2889   2              UserPerformAutoTune();
2890   2              if (InputTiming.ucAutoTune != 0) {
2891   3                  SetOSDUpdTmgFlag();
2892   3              }
2893   2          }
2894   1          OSDClosed();
2895   1      
2896   1      #if AutoTune_Debug == ENABLE
              printf("OSDPerformAuto_E\n");   //150526 george
              #endif
2899   1      }
2900          
2901          //******************************************************************************
2902          // Prototype: 
2903          //  
2904          // Parameters:
2905          //  None
2906          // Return:
2907          //  None
2908          // Purpose:
2909          //  None
2910          // Notes:
2911          //  None
2912          //******************************************************************************
2913          void OSDPerformNormal(void)
2914          {
2915   1      #if OSD_Debug == ENABLE
                      printf("OSDPerformNormal_S\n");         //150526 george
              #endif
2918   1      
2919   1          if (UserData.ucInputSource != UserGetInputSource()) {
2920   2              UserData.ucInputSource = UserGetInputSource();  
2921   2              SetOSDUpdUsrFlag();
2922   2          }
2923   1          
2924   1          if ((GetInputSyncMode() != DIG_SYNC) && (InputTiming.ucAutoTune == 0))              //1150526 george-mark: AutoTun
             -e-Flag.
2925   1          {
2926   2              OSDShowDialog(OSD_DLG_AUTOTUNE);
2927   2              UserPerformAutoTune();
2928   2              OSDClosed();
2929   2              if (InputTiming.ucAutoTune != 0) {      //150526 george-mark: AutoTune-OK!!
2930   3                  // Save timing data immediately for fitting some customer requirements.
2931   3                  //SetOSDUpdTmgFlag();
2932   3                  NvramWriteTimingData(&InputTiming);
2933   3              }
2934   2          }
2935   1          OSDShowDialog(OSD_DLG_NOTICE);      
2936   1      
2937   1      #if OSD_Debug == ENABLE
                      printf("OSDPerformNormal_E\n");         //150526 george
              #endif
2940   1      }
C51 COMPILER V8.02   OSDVIEW                                                               08/07/2015 16:22:28 PAGE 50  

2941          
2942          //******************************************************************************
2943          // Prototype: 
2944          //  void OSDShowDir1(void)
2945          // Parameters:
2946          //  None
2947          // Return:
2948          //  None
2949          // Purpose:
2950          //  Show direct OSD
2951          // Notes:
2952          //  None
2953          //******************************************************************************
2954          void OSDShowDir1(void)
2955          {       
2956   1      
2957   1      #if ALS_EnDis == ALSMODE
                      OSDShowDialog(OSD_DLG_BRIGHTNESS);
              
              #elif ALS_EnDis == ALSOffSET    
                      if( UserData.bALSOnOff == OFF )
                      OSDShowDialog(OSD_DLG_BRIGHTNESS);
                      else
                              OSDShowDialog(OSD_DLG_ALS_BASE_VALUE);  //george: F_ALSBV_04F
              
              #elif ALS_EnDis == ALSRange
                      OSDShowDialog(OSD_DLG_BRIGHTNESS);
              
              #else   //Normal
2970   1              OSDShowDialog(OSD_DLG_BRIGHTNESS);
2971   1      #endif  //#if ALS_EnDis == ENABLE
2972   1      
2973   1      }
2974          
2975          //******************************************************************************
2976          // Prototype: 
2977          //  void OSDShowDir2(void)
2978          // Parameters:
2979          //  None
2980          // Return:
2981          //  None
2982          // Purpose:
2983          //  Show direct OSD
2984          // Notes:
2985          //  None
2986          //******************************************************************************
2987          void OSDShowDir2(void)
2988          {
2989   1          OSDShowDialog(OSD_DLG_CONTRAST);
2990   1      }
2991          
2992          //******************************************************************************
2993          // Prototype: 
2994          //  void OSDShowDir3(void)
2995          // Parameters:
2996          //  None
2997          // Return:
2998          //  None
2999          // Purpose:
3000          //  Show direct OSD
3001          // Notes:
3002          //  None
C51 COMPILER V8.02   OSDVIEW                                                               08/07/2015 16:22:28 PAGE 51  

3003          //******************************************************************************
3004          void OSDShowDir3(void)
3005          {
3006   1          OSDShowDialog(OSD_DLG_VOLUME);
3007   1      }
3008          
3009          
3010          #if ALS_EnDis == ALSMODE
              
              #elif ALS_EnDis == ALSOffSET    //don't know used where ~
              //      void OSDShowDir4(void)                                  // george: F_ALSBV_03B1
              //      {
              //          OSDShowDialog(OSD_DLG_ALS_BASE_VALUE);
              //      }
              #else   //Normal
3018          
3019          #endif  //#if ALS_EnDis == ENABLE
3020          
3021          //******************************************************************************
3022          // Prototype: 
3023          //  void OSDCloseDir(void)
3024          // Parameters:
3025          //  None
3026          // Return:
3027          //  None
3028          // Purpose:
3029          //  Close direct OSD
3030          // Notes:
3031          //  None
3032          //******************************************************************************
3033          void OSDCloseDir(void)
3034          {
3035   1          OSDClosed();
3036   1      }
3037          
3038          void OSDShowOpt1(void)
3039          {
3040   1          OSDShowBFMenu();
3041   1      }
3042          
3043          void OSDCloseOpt1(void)
3044          {
3045   1          OSDClosed();
3046   1      }
3047          
3048          void OSDShowOpt2(void)
3049          {
3050   1          OSDShowSourceMenu();
3051   1      }
3052          
3053          void OSDCloseOpt2(void)
3054          {
3055   1          OSDClosed();
3056   1      }
3057          
3058          void OSDShowNoSync(void)
3059          {
3060   1          // Turn on LVDS first to avoid dead lock in clear OSD
3061   1          PanelPowerOnSequence(FALSE);
3062   1      
3063   1      #if ENABLE_OSD_ROTATION == ON
                  if (UserData.bOSDRotation) {
C51 COMPILER V8.02   OSDVIEW                                                               08/07/2015 16:22:28 PAGE 52  

                      usOSDMovingX = MAX_ROT_X / 2;
                      usOSDMovingY = 0x8000 + MAX_ROT_Y / 2;
                  }
                  else {
                      usOSDMovingX = MAX_X / 2;
                      usOSDMovingY = MAX_Y / 2;
                  }
              #else
3073   1          usOSDMovingX = MAX_X / 2;
3074   1          usOSDMovingY = MAX_Y / 2; 
3075   1      #endif
3076   1      
3077   1          SetPostBGColor(0x00, 0x00, 0x00);
3078   1          OSDShowDialog(OSD_DLG_NOSYNC);
3079   1      }
3080          
3081          
3082          void OSDShowNoCable(void)
3083          {
3084   1          // Turn on LVDS first to avoid dead lock in clear OSD
3085   1          PanelPowerOnSequence(FALSE);
3086   1      
3087   1      #if ENABLE_OSD_ROTATION == ON
                  if (UserData.bOSDRotation) {
                      usOSDMovingX = MAX_ROT_X / 2;
                      usOSDMovingY = 0x8000+ MAX_ROT_Y / 2;
                  }
                  else {
                      usOSDMovingX = MAX_X / 2;
                      usOSDMovingY = MAX_Y / 2;
                  }
              #else
3097   1          usOSDMovingX = MAX_X / 2;
3098   1          usOSDMovingY = MAX_Y / 2;  
3099   1      #endif
3100   1          
3101   1          SetPostBGColor(0x00, 0x00, 0x00);
3102   1      //    if (SystemData.bFactory) {        //fefanjacky
3103   1          if (SystemData.bDemo) //BURN IN MODE
3104   1          {        
3105   2              OSDShowDialog(OSD_DLG_BURNIN);
3106   2          }
3107   1          else 
3108   1          {
3109   2              OSDShowDialog(OSD_DLG_NOCABLE);
3110   2      
3111   2          }
3112   1      //--------------------------------------------------------------------------
3113   1      }
3114          
3115          void OSDShowOOL(void)
3116          {
3117   1      printf("OSDShowOOL_S\n");       //150527 george
3118   1          if (UserData.ucInputSource != UserGetInputSource()) 
3119   1              {
3120   2                UserData.ucInputSource = UserGetInputSource();
3121   2                SetOSDUpdUsrFlag();
3122   2              }
3123   1      
3124   1          if ((GetInputSyncMode() != DIG_SYNC) && (InputTiming.ucAutoTune == 0))
3125   1          {
3126   2              OSDShowDialog(OSD_DLG_AUTOTUNE);
C51 COMPILER V8.02   OSDVIEW                                                               08/07/2015 16:22:28 PAGE 53  

3127   2              UserPerformAutoTune();
3128   2              OSDClosed();
3129   2              if (InputTiming.ucAutoTune != 0) 
3130   2                  {
3131   3                   SetOSDUpdTmgFlag();
3132   3                 }
3133   2          }
3134   1      
3135   1          OSDShowDialog(OSD_DLG_85Hz);
3136   1      printf("OSDShowOOL_E\n");       //150527 george
3137   1      }
3138          
3139          void OSDShowOOR(void)
3140          {
3141   1          // Turn on LVDS first to avoid dead lock in clear OSD
3142   1          PanelPowerOnSequence(FALSE);
3143   1      
3144   1      #if ENABLE_OSD_ROTATION == ON
                  if (UserData.bOSDRotation) 
                      {
                       usOSDMovingX = MAX_ROT_X / 2;
                       usOSDMovingY = 0x8000 + MAX_ROT_Y / 2;
                      }
                  else 
                       {
                        usOSDMovingX = MAX_X / 2;
                        usOSDMovingY = MAX_Y / 2;
                      }
              #else
3156   1          usOSDMovingX = MAX_X / 2;
3157   1          usOSDMovingY = MAX_Y / 2;      
3158   1      #endif
3159   1          
3160   1          OSDShowDialog(OSD_DLG_OUTOFRANGE);
3161   1      }
3162          
3163          //******************************************************************************
3164          // Prototype: 
3165          //  Please refer to the following
3166          // Parameters:
3167          //  None
3168          // Return:
3169          //  None
3170          // Purpose:
3171          //  The following are for OSD up/down operations
3172          // Notes:
3173          //  None
3174          //******************************************************************************
3175          void OSDBrightnessUp(void)
3176          {
3177   1      
3178   1      #if ALS_EnDis == ALSMODE
                      if(UserData.ucALSMode==ALS_OFF) {                                               // Split ucALSMode=OFF, =Indoor/Outdoor staturation.
                          UserData.ucBrightness++;
                          if (UserData.ucBrightness > MAXIMUM_BRIGHTNESS)
                              UserData.ucBrightness  = MAXIMUM_BRIGHTNESS;
                          else {
                              OSDShowBrightness(FALSE);
                              UserSetBrightness();
                          }
                              SetOSDUpdUsrFlag();
                      }
C51 COMPILER V8.02   OSDVIEW                                                               08/07/2015 16:22:28 PAGE 54  

              
              #elif ALS_EnDis == ALSOffSET    
                      if(UserData.bALSOnOff == ON)            //george: F_ALSBV_04C
                      {
                              OSDALSBVUp();                                   
                      }
                      else
                      {
                          UserData.ucBrightness++;
                          if (UserData.ucBrightness > MAXIMUM_BRIGHTNESS)
                              UserData.ucBrightness  = MAXIMUM_BRIGHTNESS;
                          else {
                              OSDShowBrightness(FALSE);
                              UserSetBrightness();
                          }
                              SetOSDUpdUsrFlag();
                      }
              
              #elif ALS_EnDis == ALSRange
                      if(UserData.bALSOnOff==OFF) {                                           // Split ucALSMode=OFF, =Indoor/Outdoor staturation.
                          UserData.ucBrightness++;
                          if (UserData.ucBrightness > MAXIMUM_BRIGHTNESS)
                              UserData.ucBrightness  = MAXIMUM_BRIGHTNESS;
                          else {
                              OSDShowBrightness(FALSE);
                              UserSetBrightness();
                          }
                              SetOSDUpdUsrFlag();
                      }
              
              #else   //Normal
3220   1                  UserData.ucBrightness++;
3221   1                  if (UserData.ucBrightness > MAXIMUM_BRIGHTNESS)
3222   1                      UserData.ucBrightness  = MAXIMUM_BRIGHTNESS;
3223   1                  else {
3224   2                      OSDShowBrightness(FALSE);
3225   2                      UserSetBrightness();
3226   2                  }
3227   1                      SetOSDUpdUsrFlag();
3228   1      #endif  //#if ALS_EnDis == ENABLE
3229   1      
3230   1      }
3231          
3232          
3233          void OSDBrightnessDown(void)
3234          {
3235   1      #if ALS_EnDis == ALSMODE
                      if(UserData.ucALSMode==ALS_OFF) {                                               // Split ucALSMode=OFF, =Indoor/Outdoor staturation.
                          UserData.ucBrightness--;
                          if ((UserData.ucBrightness > MAXIMUM_BRIGHTNESS) ||
                              (UserData.ucBrightness < MINIMUM_BRIGHTNESS))
                              UserData.ucBrightness  = MINIMUM_BRIGHTNESS;
                          else {
                              OSDShowBrightness(FALSE);
                              UserSetBrightness();
                          }
                          SetOSDUpdUsrFlag();
                      }
              
              #elif ALS_EnDis == ALSOffSET    
                      if(UserData.bALSOnOff == ON)            //george: F_ALSBV_04D
                      {
C51 COMPILER V8.02   OSDVIEW                                                               08/07/2015 16:22:28 PAGE 55  

                              OSDALSBVDown();  
                      }
                      else
                      {
                          UserData.ucBrightness--;
                          if ((UserData.ucBrightness > MAXIMUM_BRIGHTNESS) ||
                              (UserData.ucBrightness < MINIMUM_BRIGHTNESS))
                              UserData.ucBrightness  = MINIMUM_BRIGHTNESS;
                          else {
                              OSDShowBrightness(FALSE);
                              UserSetBrightness();
                          }
                          SetOSDUpdUsrFlag();
                      }
              
              #elif ALS_EnDis == ALSRange
                      if(UserData.bALSOnOff==OFF) {                                           // Split ucALSMode=OFF, =Indoor/Outdoor staturation.
                          UserData.ucBrightness--;
                          if ((UserData.ucBrightness > MAXIMUM_BRIGHTNESS) ||
                              (UserData.ucBrightness < MINIMUM_BRIGHTNESS))
                              UserData.ucBrightness  = MINIMUM_BRIGHTNESS;
                          else {
                              OSDShowBrightness(FALSE);
                              UserSetBrightness();
                          }
                          SetOSDUpdUsrFlag();
                      }
              
              #else   //Normal
3280   1                  UserData.ucBrightness--;
3281   1                  if ((UserData.ucBrightness > MAXIMUM_BRIGHTNESS) ||
3282   1                      (UserData.ucBrightness < MINIMUM_BRIGHTNESS))
3283   1                      UserData.ucBrightness  = MINIMUM_BRIGHTNESS;
3284   1                  else {
3285   2                      OSDShowBrightness(FALSE);
3286   2                      UserSetBrightness();
3287   2                  }
3288   1                  SetOSDUpdUsrFlag();
3289   1      #endif  //#if ALS_EnDis == ENABLE
3290   1      }
3291          
3292          
3293          void OSDContrastUp(void)
3294          {
3295   1          UserData.ucContrast++;
3296   1          if (UserData.ucContrast > MAXIMUM_CONTRAST)
3297   1              UserData.ucContrast  = MAXIMUM_CONTRAST;
3298   1          else {
3299   2              OSDShowContrast(FALSE);
3300   2              UserSetContrast();
3301   2          }
3302   1          SetOSDUpdUsrFlag();
3303   1      }
3304          
3305          void OSDContrastDown(void)
3306          {
3307   1          UserData.ucContrast--;
3308   1          if ((UserData.ucContrast > MAXIMUM_CONTRAST) ||
3309   1              (UserData.ucContrast < MINIMUM_CONTRAST))
3310   1              UserData.ucContrast  = MINIMUM_CONTRAST;
3311   1          else {
3312   2              OSDShowContrast(FALSE);
C51 COMPILER V8.02   OSDVIEW                                                               08/07/2015 16:22:28 PAGE 56  

3313   2              UserSetContrast();
3314   2          }
3315   1          SetOSDUpdUsrFlag();
3316   1      }
3317          
3318          void OSDVolumeUp(void)
3319          {
3320   1          UserData.ucVolume++;
3321   1          if (UserData.ucVolume > MAXIMUM_VOLUME)
3322   1              UserData.ucVolume  = MAXIMUM_VOLUME;
3323   1          else {
3324   2              OSDShowVolume(FALSE);
3325   2              UserSetVolume();
3326   2          }
3327   1          SetOSDUpdUsrFlag();
3328   1      }
3329          
3330          void OSDVolumeDown(void)
3331          {
3332   1          UserData.ucVolume--;
3333   1          if ((UserData.ucVolume > MAXIMUM_VOLUME) ||
3334   1              (UserData.ucVolume < MINIMUM_VOLUME))
3335   1              UserData.ucVolume  = MINIMUM_VOLUME;
3336   1          else {
3337   2              OSDShowVolume(FALSE);
3338   2              UserSetVolume();
3339   2          }
3340   1          SetOSDUpdUsrFlag();
3341   1      }
3342          
3343          //void OSDGammaUp(void)                                         //+++++++++++++++++++++++++++++++++++++++++++++++++
3344          //{
3345          //    UserData.bGammaOnOff = ~UserData.bGammaOnOff;
3346          //    OSDShowGamma(FALSE);
3347          //    UserSetGamma();
3348          //    SetOSDUpdUsrFlag();
3349          //}
3350          //
3351          //void OSDGammaDown(void)
3352          //{
3353          //    UserData.bGammaOnOff = ~UserData.bGammaOnOff;
3354          //    OSDShowGamma(FALSE);
3355          //    UserSetGamma();
3356          //    SetOSDUpdUsrFlag();
3357          //}
3358          
3359          
3360          
3361          
3362          #if ALS_EnDis == ALSMODE
                      //method(1) ALS Mode Select
                      void OSDALSModeUp(void)
                      {
                          UserData.ucALSMode =
                              (UserData.ucALSMode+1) % NUM_ALS_MODE;          //ref.  about: NUM_SR_MODE,  => static code SRBlock SRMod
             -es[NUM_SR_MODE]= {
                          OSDShowALSMode(FALSE);
                              
                          UserSetALSMode();           //ref. void UserSetSR(void)             => SetSRMode(UserData.ucSRMode);
                          SetOSDUpdUsrFlag();
                      }
                      
C51 COMPILER V8.02   OSDVIEW                                                               08/07/2015 16:22:28 PAGE 57  

                      void OSDALSModeDown(void)
                      {
                          UserData.ucALSMode =
                              (UserData.ucALSMode + NUM_ALS_MODE-1) % NUM_ALS_MODE;           //ref.  about: NUM_SR_MODE,  => static cod
             -e SRBlock SRModes[NUM_SR_MODE]= {
                          OSDShowALSMode(FALSE);
                          UserSetALSMode();           //ref. void UserSetSR(void)             => SetSRMode(UserData.ucSRMode);
                          SetOSDUpdUsrFlag();
                      }
              
              #elif ALS_EnDis == ALSOffSET    
                      void OSDALSOnOffUp(void)                                // george: F_ALSOnOff_04C
                      {
                              UserData.bALSOnOff = ~UserData.bALSOnOff;
                          OSDShowALSOnOff(FALSE);
                          UserSetALSOnOff();
                          SetOSDUpdUsrFlag();
                      
                              if(UserData.bALSOnOff == ON)            //george: F_ALSBV_04C
                              {
                                      CM3218_ALSOnInit();             //george: F_CM3218_02
                      //              UserSetALSBaseVal();
                              }else
                                      UserSetBrightness();    
                      }
                      
                      void OSDALSOnOffDown(void)                              // george: F_ALSOnOff_04D
                      {
                              UserData.bALSOnOff = ~UserData.bALSOnOff;
                          OSDShowALSOnOff(FALSE);
                          UserSetALSOnOff();
                          SetOSDUpdUsrFlag();
                      
                              if(UserData.bALSOnOff == ON)            //george: F_ALSBV_04C
                              {
                                      CM3218_ALSOnInit();             //george: F_CM3218_02
                      //              UserSetALSBaseVal();
                              }else
                                      UserSetBrightness();
                      }
              
                      //method(2) ALS Base Value Modify.
                      void OSDALSBVUp(void)                                                           //george: F_ALSBV_04C
                      {
                          //UserData.ucALSBaseVal++;
                              UserData.ucALSBaseVal = UserData.ucALSBaseVal+DIVBASE;
                          if (UserData.ucALSBaseVal > MAXIMUM_ALSBV)          //george: F_ALSBV_04C1 -> MAXIMUM_ALSBV
                              UserData.ucALSBaseVal  = MAXIMUM_ALSBV;
                          else {
                              OSDShowALSBV(FALSE);
                      // don't do this.        UserSetALSBaseVal();
                          }
                          SetOSDUpdUsrFlag();
                      }
                      
                      void OSDALSBVDown(void)                                                         //george: F_ALSBV_04D
                      {
                          //UserData.ucALSBaseVal--;
                              UserData.ucALSBaseVal = UserData.ucALSBaseVal-DIVBASE;
                          if ((UserData.ucALSBaseVal > MAXIMUM_ALSBV) ||
                              (UserData.ucALSBaseVal < MINIMUM_ALSBV))        //george: F_ALSBV_04D1 -> MINIMUM_ALSBV
                              UserData.ucALSBaseVal  = MINIMUM_ALSBV;
C51 COMPILER V8.02   OSDVIEW                                                               08/07/2015 16:22:28 PAGE 58  

                          else {
                              OSDShowALSBV(FALSE);
                      //don't do this.        UserSetALSBaseVal();
                          }
                          SetOSDUpdUsrFlag();
                      }
              
              #elif ALS_EnDis == ALSRange
                      void OSDALSOnOffUp(void)                                // george: F_ALSOnOff_04C
                      {
                              UserData.bALSOnOff = ~UserData.bALSOnOff;
                          OSDShowALSOnOff(FALSE);
                          UserSetALSOnOff();
                          SetOSDUpdUsrFlag();
                      
                              if(UserData.bALSOnOff == ON)            //george: F_ALSBV_04C
                              {
                                      LS3101_ALSOnInit();             //george: F_CM3218_02
              
                              }else
                                      UserSetBrightness();    
                      }
                      
                      void OSDALSOnOffDown(void)                              // george: F_ALSOnOff_04D
                      {
                              UserData.bALSOnOff = ~UserData.bALSOnOff;
                          OSDShowALSOnOff(FALSE);
                          UserSetALSOnOff();
                          SetOSDUpdUsrFlag();
                      
                              if(UserData.bALSOnOff == ON)            //george: F_ALSBV_04C
                              {
                                      LS3101_ALSOnInit();             //george: F_CM3218_02
              
                              }else
                                      UserSetBrightness();
                      }
              #else   //Normal
3473          
3474          #endif  //#if ALS_EnDis == ENABLE
3475          
3476          
3477          
3478          #if TOUCH_EnDis == ENABLE
                      void OSDTouchUp(void)                                           //george: F_Touch_04C  +++++++++++++++++ OSDTouch-UP/Down  +++++++++++++++++++
             -+++++++++++++
                      {
                          UserData.bTouchOnOff = ~UserData.bTouchOnOff;
                          OSDShowTouch(FALSE);
                          UserSetTouch();
                          SetOSDUpdUsrFlag();
                      }
                      
                      void OSDTouchDown(void)                                         //george: F_Touch_04D
                      {
                          UserData.bTouchOnOff = ~UserData.bTouchOnOff;
                          OSDShowTouch(FALSE);
                          UserSetTouch();
                          SetOSDUpdUsrFlag();
                      }
              #endif //#if TOUCH_EnDis == ENABLE
3495          
C51 COMPILER V8.02   OSDVIEW                                                               08/07/2015 16:22:28 PAGE 59  

3496          
3497          
3498          
3499          /*
3500          
3501          void OSDGItem17Up(void)                                                 // george_Item17
3502          {
3503              //UserData.bTouchOnOff = ~UserData.bTouchOnOff;
3504              OSDShowTouch(FALSE);
3505              UserSetTouch();
3506              SetOSDUpdUsrFlag();
3507          }
3508          
3509          void OSDGItem17Down(void)                                               // george_Item17
3510          {
3511              //UserData.bTouchOnOff = ~UserData.bTouchOnOff;
3512              OSDShowTouch(FALSE);
3513              //UserSetTouch();
3514              SetOSDUpdUsrFlag();
3515          }
3516          */
3517          
3518          
3519          //void OSDDCRUp(void)
3520          //{
3521          //     if(UserData.ucDCRMode == BKL_CTRL_OFF) {
3522          //              UserData.ucDCRMode = BKL_CTRL_DBC;
3523          //     }
3524          //    else {
3525          //      UserData.ucDCRMode = (UserData.ucDCRMode-1)%NUM_BKL_CTRL_SIZE;
3526          //    }
3527          //    OSDShowDCR(FALSE);
3528          //    UserSetDCR();
3529          //    SetOSDUpdUsrFlag();
3530          //}
3531          //
3532          //void OSDDCRDown(void)
3533          //{
3534          //    UserData.ucDCRMode=
3535          //        (UserData.ucDCRMode+1)%NUM_BKL_CTRL_SIZE;
3536          //    OSDShowDCR(FALSE);
3537          //    UserSetDCR();
3538          //    SetOSDUpdUsrFlag();
3539          //}
3540          
3541          void OSDSRUp(void)
3542          {
3543   1      #if ENABLE_SR == ON
3544   1          UserData.ucSRMode =
3545   1              (UserData.ucSRMode+1)%NUM_SR_MODE;
3546   1          OSDShowSR(FALSE);
3547   1          UserSetSR();
3548   1          SetOSDUpdUsrFlag();
3549   1      #endif
3550   1      }
3551          
3552          void OSDSRDown(void)
3553          {
3554   1      #if ENABLE_SR == ON
3555   1          UserData.ucSRMode =
3556   1              (UserData.ucSRMode+NUM_SR_MODE-1) % NUM_SR_MODE;
3557   1          OSDShowSR(FALSE);
C51 COMPILER V8.02   OSDVIEW                                                               08/07/2015 16:22:28 PAGE 60  

3558   1          UserSetSR();
3559   1          SetOSDUpdUsrFlag();
3560   1      #endif
3561   1      }
3562          
3563          void OSDPhaseUp(void)
3564          {
3565   1          InputTiming.ucPhase++;
3566   1          if (InputTiming.ucPhase > MAXIMUM_PHASE)
3567   1              InputTiming.ucPhase  = MAXIMUM_PHASE;
3568   1          else {
3569   2              UserSetPhase();
3570   2              OSDShowPhase(FALSE);        
3571   2          }
3572   1          SetOSDUpdTmgFlag();
3573   1      }
3574          
3575          void OSDPhaseDown(void)
3576          {
3577   1          InputTiming.ucPhase--;
3578   1          if ((InputTiming.ucPhase > MAXIMUM_PHASE) ||
3579   1              (InputTiming.ucPhase < MINIMUM_PHASE))
3580   1              InputTiming.ucPhase  = MINIMUM_PHASE;
3581   1          else {
3582   2              UserSetPhase();
3583   2              OSDShowPhase(FALSE);
3584   2          }
3585   1          SetOSDUpdTmgFlag();
3586   1      }
3587          
3588          void OSDClockUp(void)
3589          {
3590   1          InputTiming.usHTotal++;
3591   1          if (InputTiming.usHTotal > InputTiming.usHTotalMax)
3592   1              InputTiming.usHTotal  = InputTiming.usHTotalMax;
3593   1          else {
3594   2              OSDShowClock(FALSE);
3595   2              UserSetClock();
3596   2          }
3597   1          SetOSDUpdTmgFlag();
3598   1      }
3599          
3600          void OSDClockDown(void)
3601          {
3602   1          InputTiming.usHTotal--;
3603   1          if (InputTiming.usHTotal < InputTiming.usHTotalMin)
3604   1              InputTiming.usHTotal  = InputTiming.usHTotalMin;
3605   1          else {
3606   2              OSDShowClock(FALSE);
3607   2              UserSetClock();
3608   2          }
3609   1          SetOSDUpdTmgFlag();
3610   1      }
3611          
3612          void OSDHPositionUp(void)
3613          {
3614   1          InputTiming.usHStart++;
3615   1          if (InputTiming.usHStart > InputTiming.usHStartMax)
3616   1              InputTiming.usHStart  = InputTiming.usHStartMax;
3617   1          else {
3618   2              OSDShowHPos(FALSE);
3619   2              UserSetHPosition();
C51 COMPILER V8.02   OSDVIEW                                                               08/07/2015 16:22:28 PAGE 61  

3620   2          }
3621   1          SetOSDUpdTmgFlag();
3622   1      }
3623          
3624          void OSDHPositionDown(void)
3625          {
3626   1          InputTiming.usHStart--;
3627   1          if ((InputTiming.usHStart > InputTiming.usHStartMax) ||
3628   1              (InputTiming.usHStart < InputTiming.usHStartMin))
3629   1              InputTiming.usHStart  = InputTiming.usHStartMin;
3630   1          else {
3631   2              OSDShowHPos(FALSE);
3632   2              UserSetHPosition();
3633   2          }
3634   1          SetOSDUpdTmgFlag();
3635   1      }
3636          
3637          void OSDVPositionUp(void)
3638          {
3639   1          InputTiming.usVStart++;
3640   1          if (InputTiming.usVStart > InputTiming.usVStartMax)
3641   1              InputTiming.usVStart  = InputTiming.usVStartMax;
3642   1          else {
3643   2              UserSetVPosition();
3644   2              OSDShowVPos(FALSE);
3645   2          }
3646   1          SetOSDUpdTmgFlag();
3647   1      }
3648          
3649          void OSDVPositionDown(void)
3650          {
3651   1          InputTiming.usVStart--;
3652   1          if ((InputTiming.usVStart > InputTiming.usVStartMax) ||
3653   1              (InputTiming.usVStart < InputTiming.usVStartMin))
3654   1              InputTiming.usVStart  = InputTiming.usVStartMin;
3655   1          else {
3656   2              UserSetVPosition();
3657   2              OSDShowVPos(FALSE);
3658   2          }
3659   1          SetOSDUpdTmgFlag();
3660   1      }
3661          
3662          void OSDColorTempUp(void)
3663          {
3664   1       #ifdef colortemp                                                       //140509 mike           
                 printf("140508 OSDColorTempUp\n\r");         //140421 mike   
                 #endif
3667   1          UserData.ucColorTemp++;
3668   1         
3669   1              //---------------------------------------------------
3670   1              if (UserData.ucColorTemp > MAXIMUM_CLR_TEMP)
3671   1          {
3672   2                      UserData.ucColorTemp  = MINIMUM_CLR_TEMP;
3673   2              }       
3674   1          
3675   1           OSDShowClrTmp(FALSE);
3676   1           UserSetColorTemp();
3677   1               SetOSDUpdUsrFlag();
3678   1      }
3679          
3680          void OSDColorTempDown(void)
3681          {
C51 COMPILER V8.02   OSDVIEW                                                               08/07/2015 16:22:28 PAGE 62  

3682   1       #ifdef colortemp                                                       //140509 mike           
                  printf("140508 OSDColorTempDown\n\r");              //140421 mike   
               #endif   
3685   1          UserData.ucColorTemp--;
3686   1         
3687   1          if ((UserData.ucColorTemp > MAXIMUM_CLR_TEMP) || (UserData.ucColorTemp < MINIMUM_CLR_TEMP))
3688   1              {
3689   2                      UserData.ucColorTemp  = MAXIMUM_CLR_TEMP;
3690   2              }
3691   1                OSDShowClrTmp(FALSE);
3692   1                UserSetColorTemp();
3693   1                SetOSDUpdUsrFlag();
3694   1      }
3695          //---------------------------
3696          void OSDRGainUp(void)
3697          {
3698   1       #ifdef colortemp                                                       //140509 mike           
                     printf("140509 OSDUpItm32\n\r");         //140509 mike   
               #endif      
3701   1          UserData.ucUserRGain++;
3702   1          if (UserData.ucUserRGain > MAXIMUM_USER_RGAIN)
3703   1              UserData.ucUserRGain  = MAXIMUM_USER_RGAIN;
3704   1          else 
3705   1              {
3706   2              OSDShowRGain(FALSE);
3707   2              UserSetRGain();
3708   2              }
3709   1              SetOSDUpdUsrFlag();
3710   1      }
3711          //----------------------------
3712          void OSDRGainDown(void)
3713          {
3714   1       #ifdef colortemp                                                       //140509 mike           
                      printf("140509 OSDDownItm32\n\r");              //140509 mike   
               #endif      
3717   1          UserData.ucUserRGain--;
3718   1          if ((UserData.ucUserRGain > MAXIMUM_USER_RGAIN) ||(UserData.ucUserRGain < MINIMUM_USER_RGAIN))
3719   1              UserData.ucUserRGain  = MINIMUM_USER_RGAIN;
3720   1          else 
3721   1              {
3722   2              OSDShowRGain(FALSE);
3723   2              UserSetRGain();
3724   2              }
3725   1                      SetOSDUpdUsrFlag();
3726   1      }
3727          //---------------------------
3728          void OSDGGainUp(void)
3729          {
3730   1       #ifdef colortemp                                                       //140509 mike           
                      printf("140509 OSDUpItm33\n\r");                //140509 mike   
               #endif       
3733   1          UserData.ucUserGGain++;
3734   1          if (UserData.ucUserGGain > MAXIMUM_USER_GGAIN)
3735   1              UserData.ucUserGGain  = MAXIMUM_USER_GGAIN;
3736   1          else 
3737   1              {
3738   2              OSDShowGGain(FALSE);
3739   2              UserSetGGain();
3740   2              }
3741   1                      SetOSDUpdUsrFlag();
3742   1      }
3743          //---------------------------
C51 COMPILER V8.02   OSDVIEW                                                               08/07/2015 16:22:28 PAGE 63  

3744          void OSDGGainDown(void)
3745          {
3746   1       #ifdef colortemp                                                       //140509 mike           
                         printf("140509 OSDdownItm33\n\r");           //140509 mike   
               #endif          
3749   1          UserData.ucUserGGain--;
3750   1          if ((UserData.ucUserGGain > MAXIMUM_USER_GGAIN) ||(UserData.ucUserGGain < MINIMUM_USER_GGAIN))
3751   1              UserData.ucUserGGain  = MINIMUM_USER_GGAIN;
3752   1          else 
3753   1              {
3754   2              OSDShowGGain(FALSE);
3755   2              UserSetGGain();
3756   2          }
3757   1              SetOSDUpdUsrFlag();
3758   1      }
3759          //--------------------------
3760          void OSDBGainUp(void)
3761          {
3762   1       #ifdef colortemp                                                       //140509 mike           
                      printf("140509 OSDUpItm34\n\r");                //140509 mike   
               #endif       
3765   1          UserData.ucUserBGain++;
3766   1          if (UserData.ucUserBGain > MAXIMUM_USER_BGAIN)
3767   1              UserData.ucUserBGain  = MAXIMUM_USER_BGAIN;
3768   1          else 
3769   1              {
3770   2              OSDShowBGain(FALSE);
3771   2              UserSetBGain();
3772   2          }
3773   1                      SetOSDUpdUsrFlag();
3774   1      }
3775          //-------------------------
3776          void OSDBGainDown(void)
3777          {
3778   1       #ifdef colortemp                                                       //140509 mike           
                      printf("140509 OSDdownItm34\n\r");              //140509 mike   
               #endif       
3781   1          UserData.ucUserBGain--;
3782   1          if ((UserData.ucUserBGain > MAXIMUM_USER_BGAIN) ||(UserData.ucUserBGain < MINIMUM_USER_BGAIN))
3783   1              UserData.ucUserBGain  = MINIMUM_USER_BGAIN;
3784   1          else 
3785   1              {
3786   2              OSDShowBGain(FALSE);
3787   2              UserSetBGain();
3788   2              }
3789   1                      SetOSDUpdUsrFlag();
3790   1      }
3791          //-------------------------
3792          void OSDHUp(void)
3793          {
3794   1          UserData.ucOSDX++;
3795   1          if (UserData.ucOSDX > MAXIMUM_OSD_HPOS)
3796   1              UserData.ucOSDX  = MAXIMUM_OSD_HPOS;
3797   1          else 
3798   1                {
3799   2                      OSDShowOSDHPos(FALSE);
3800   2                      UserSetOSDH();
3801   2                 }
3802   1                      SetOSDUpdUsrFlag();
3803   1      }
3804          
3805          void OSDHDown(void)
C51 COMPILER V8.02   OSDVIEW                                                               08/07/2015 16:22:28 PAGE 64  

3806          {
3807   1          UserData.ucOSDX--;
3808   1          if ((UserData.ucOSDX > MAXIMUM_OSD_HPOS) ||(UserData.ucOSDX < MINIMUM_OSD_HPOS))
3809   1              UserData.ucOSDX  = MINIMUM_OSD_HPOS;
3810   1          else 
3811   1               {
3812   2                      OSDShowOSDHPos(FALSE);
3813   2                      UserSetOSDH();
3814   2                 }
3815   1                      SetOSDUpdUsrFlag();
3816   1      }
3817          
3818          void OSDVUp(void)                                                       //140520 mike
3819          {
3820   1          UserData.ucOSDY++;
3821   1          if (UserData.ucOSDY > MAXIMUM_OSD_VPOS)
3822   1              UserData.ucOSDY  = MAXIMUM_OSD_VPOS;
3823   1          else 
3824   1              {
3825   2                      OSDShowOSDVPos(FALSE);
3826   2                      UserSetOSDV();
3827   2              }
3828   1                      SetOSDUpdUsrFlag();
3829   1      }
3830          
3831          void OSDVDown(void)                                             //140520 mike
3832          {
3833   1          UserData.ucOSDY--;
3834   1          if ((UserData.ucOSDY > MAXIMUM_OSD_VPOS) ||(UserData.ucOSDY < MINIMUM_OSD_VPOS))
3835   1              UserData.ucOSDY  = MINIMUM_OSD_VPOS;
3836   1          else 
3837   1                {
3838   2                      OSDShowOSDVPos(FALSE);
3839   2                      UserSetOSDV();
3840   2                }
3841   1                      SetOSDUpdUsrFlag();
3842   1      }
3843          
3844          void OSDTransparentUp(void)
3845          {
3846   1          UserData.ucOSDTransparent++;
3847   1          if (UserData.ucOSDTransparent > MAXIMUM_OSD_TRANS)
3848   1              UserData.ucOSDTransparent  = MAXIMUM_OSD_TRANS;
3849   1          else {
3850   2              OSDShowOSDTran(FALSE);
3851   2              UserSetTransparent();
3852   2          }
3853   1          SetOSDUpdUsrFlag();
3854   1      }
3855          
3856          void OSDTransparentDown(void)
3857          {
3858   1          UserData.ucOSDTransparent--;
3859   1          if ((UserData.ucOSDTransparent > MAXIMUM_OSD_TRANS) ||
3860   1              (UserData.ucOSDTransparent < MINIMUM_OSD_TRANS))
3861   1              UserData.ucOSDTransparent  = MINIMUM_OSD_TRANS;
3862   1          else {
3863   2              OSDShowOSDTran(FALSE);
3864   2              UserSetTransparent();
3865   2          }    
3866   1          SetOSDUpdUsrFlag();
3867   1      }
C51 COMPILER V8.02   OSDVIEW                                                               08/07/2015 16:22:28 PAGE 65  

3868          
3869          void OSDTimeoutUp(void)
3870          {
3871   1          UserData.ucOSDTimer++;
3872   1          if (UserData.ucOSDTimer > MAXIMUM_OSD_TIMER)
3873   1              UserData.ucOSDTimer  = MAXIMUM_OSD_TIMER;
3874   1          else {
3875   2              OSDShowTimer(FALSE);
3876   2              UserSetTimeout();
3877   2          }
3878   1          SetOSDUpdUsrFlag();
3879   1      }
3880          
3881          void OSDTimeoutDown(void)
3882          {
3883   1          UserData.ucOSDTimer--;
3884   1          if ((UserData.ucOSDTimer > MAXIMUM_OSD_TIMER) ||
3885   1              (UserData.ucOSDTimer < MINIMUM_OSD_TIMER))
3886   1              UserData.ucOSDTimer  = MINIMUM_OSD_TIMER;
3887   1          else {
3888   2              OSDShowTimer(FALSE);
3889   2              UserSetTimeout();
3890   2          }    
3891   1          SetOSDUpdUsrFlag();
3892   1      }
3893          
3894          //void OSDRotationUp(void)
3895          //{
3896          //    UserData.bOSDRotation = ~UserData.bOSDRotation;
3897          //    OSDShowOSDRotation(FALSE);
3898          //    SetOSDUpdUsrFlag();
3899          //}
3900          //
3901          //void OSDRotationDown(void)
3902          //{
3903          //    UserData.bOSDRotation = ~UserData.bOSDRotation;
3904          //    OSDShowOSDRotation(FALSE);
3905          //    SetOSDUpdUsrFlag();
3906          //}
3907          
3908          void OSDLanguageUp(void)
3909          {
3910   1          UserData.ucLanguage = 
3911   1              (UserData.ucLanguage+1) % NUM_OSDLANGS;
3912   1          OSDShowLang(FALSE);
3913   1          //UserSetLanguage();
3914   1          SetOSDUpdUsrFlag();
3915   1      }
3916          
3917          void OSDLanguageDown(void)
3918          {
3919   1          UserData.ucLanguage = 
3920   1              (UserData.ucLanguage+NUM_OSDLANGS-1) % NUM_OSDLANGS;
3921   1          OSDShowLang(FALSE);
3922   1          SetOSDUpdUsrFlag();
3923   1      }
3924          
3925          void OSDAudioMuteUp(void)
3926          {
3927   1          UserData.bAudioMute = ~UserData.bAudioMute;
3928   1          OSDShowMute(FALSE);
3929   1          UserSetAudioMute();
C51 COMPILER V8.02   OSDVIEW                                                               08/07/2015 16:22:28 PAGE 66  

3930   1          SetOSDUpdUsrFlag();
3931   1      }
3932          
3933          void OSDAudioMuteDown(void)
3934          {
3935   1          UserData.bAudioMute = ~UserData.bAudioMute;
3936   1          OSDShowMute(FALSE);
3937   1          UserSetAudioMute();
3938   1          SetOSDUpdUsrFlag();
3939   1      }
3940          
3941          void OSDInputSourceUp(void)
3942          {
3943   1          UCHAR Index;
3944   1      
3945   1      
3946   1          Index = GetInputPortIndex(UserData.ucInputSource);
3947   1      
3948   1          if (GetInputPortName(++Index) >=  NUM_INPUT_SC) {
3949   2              Index = 0;
3950   2          }
3951   1      
3952   1      //#if GG_OSD_INPUT_DP_HIDE == DISABLE
3953   1      //      if(Index==2) Index=0;   //george: OSD_Input(2 item): VGA_dis, DVI, HDMI, DP_dis
3954   1      //#endif
3955   1      
3956   1          UserData.ucInputSource = GetInputPortName(Index);
3957   1          OSDShowInput(FALSE);
3958   1      
3959   1      }
3960          
3961          void OSDInputSourceDown(void)
3962          {
3963   1          UCHAR Index;
3964   1      
3965   1          Index = GetInputPortIndex(UserData.ucInputSource);
3966   1          if (GetInputPortName(--Index) >= NUM_INPUT_SC) {
3967   2              Index = CheckTotalPortNum()-1;
3968   2          }
3969   1      
3970   1      //#if GG_OSD_INPUT_DP_HIDE == DISABLE
3971   1      //if(Index==2) Index=1; //george: OSD_Input(2 item): VGA_dis, DVI, HDMI, DP_dis
3972   1      //#endif
3973   1      
3974   1          UserData.ucInputSource = GetInputPortName(Index);
3975   1          OSDShowInput(FALSE);
3976   1          //UserSetInputSource();
3977   1      }
3978          
3979          //void OSDAspectRatioUp(void)
3980          //{
3981          //    UserData.ucAspectRatio =
3982          //        (UserData.ucAspectRatio+1)%NUM_DSP_SIZE;
3983          //    OSDShowAspRatio(FALSE);
3984          //    UserSetAspectRatio();
3985          //    SetOSDUpdUsrFlag();
3986          //}
3987          //
3988          //void OSDAspectRatioDown(void)
3989          //{
3990          //    UserData.ucAspectRatio =
3991          //        (UserData.ucAspectRatio+NUM_DSP_SIZE-1)%NUM_DSP_SIZE;
C51 COMPILER V8.02   OSDVIEW                                                               08/07/2015 16:22:28 PAGE 67  

3992          //    OSDShowAspRatio(FALSE);
3993          //    UserSetAspectRatio();
3994          //    SetOSDUpdUsrFlag();
3995          //}
3996          
3997          //void OSDOverScanUp(void)
3998          //{
3999          //#if ENABLE_OVERSCAN == ON
4000          //    UserData.bOverScan = ~UserData.bOverScan;
4001          //    OSDShowOverScan(FALSE);
4002          //    UserSetOverScan();
4003          //    SetOSDUpdUsrFlag();
4004          //#endif
4005          //}
4006          //
4007          //void OSDOverScanDown(void)
4008          //{                                                             
4009          //#if ENABLE_OVERSCAN == ON
4010          //    UserData.bOverScan = ~UserData.bOverScan;
4011          //    OSDShowOverScan(FALSE);
4012          //    UserSetOverScan();
4013          //    SetOSDUpdUsrFlag();
4014          //#endif
4015          //}
4016          
4017          //void OSDODUp(void)
4018          //{
4019          //    UserData.ucODMode ^= BIT0;
4020          //    OSDShowOD(FALSE);
4021          //    UserSetOD();
4022          //    SetOSDUpdUsrFlag();
4023          //}
4024          //
4025          //void OSDODDown(void)
4026          //{
4027          //    UserData.ucODMode ^= BIT0;
4028          //    OSDShowOD(FALSE);
4029          //    UserSetOD();
4030          //    SetOSDUpdUsrFlag();
4031          //}
4032          
4033          void OSDResetUp(void)
4034          {
4035   1          ucPerformReset ^= BIT0;
4036   1          OSDShowReset(FALSE);
4037   1          //UserRecallConfiguration();
4038   1      }
4039          
4040          void OSDResetDown(void)
4041          {
4042   1          ucPerformReset ^= BIT0;
4043   1          OSDShowReset(FALSE);
4044   1          //UserRecallConfiguration();
4045   1      }
4046          
4047          #if ENABLE_FUNC_OSD == ON
              void OSD2Dto3DFmtDown(void)
              {
                  UserData.uc2DTo3DMode = (UserData.uc2DTo3DMode+NUM_THR_D_CNV-1) % NUM_THR_D_CNV;
                  OSDShowThrDCnvMenu(FALSE);
                  //SetOSDUpdUsrFlag();
              }
C51 COMPILER V8.02   OSDVIEW                                                               08/07/2015 16:22:28 PAGE 68  

              
              void OSD2Dto3DFmtUp(void)
              {
                  UserData.uc2DTo3DMode = (UserData.uc2DTo3DMode+1) % NUM_THR_D_CNV;
                  OSDShowThrDCnvMenu(FALSE);
                  //SetOSDUpdUsrFlag();
              }
              
              void OSD2Dto3DAdptDown(void)
              {
              #if ENABLE_3D_CNV == ON
                  if (Is2DTo3DAdaptive()) {
                      TurnOff2DTo3DAdaptive();
                  }
                  else {
                      TurnOn2DTo3DAdaptive();
                  }
                  OSDShow2Dto3DAdpt(FALSE);
                  UserSet2DTo3DAdaptive();
                  SetOSDUpdUsrFlag();
              #else
                  OSDShow2Dto3DAdpt(FALSE);
                  SetOSDUpdUsrFlag();
              #endif
              }
              
              void OSD2Dto3DAdptUp(void)
              {
              #if ENABLE_3D_CNV == ON
                  if (Is2DTo3DAdaptive()) {
                      TurnOff2DTo3DAdaptive();
                  }
                  else {
                      TurnOn2DTo3DAdaptive();
                  }
                  OSDShow2Dto3DAdpt(FALSE);
                  UserSet2DTo3DAdaptive();
                  SetOSDUpdUsrFlag();
              #else
                  OSDShow2Dto3DAdpt(FALSE);
                  SetOSDUpdUsrFlag();
              #endif
              }
              
              void OSD2Dto3DDepthDown(void)
              {
                  UserData.uc2Dto3DDepth--;
                  if ((UserData.uc2Dto3DDepth > MAXIMUM_2DTO3D_DEPTH) ||
                      (UserData.uc2Dto3DDepth < MINIMUM_2DTO3D_DEPTH))
                      UserData.uc2Dto3DDepth  = MINIMUM_2DTO3D_DEPTH;
                  else {
                      OSDShow2Dto3DDepth(FALSE);
              #if ENABLE_3D_CNV == ON
                      UserSet2DTo3DDepth();
              #endif
                  }    
                  SetOSDUpdUsrFlag();
              }
              
              void OSD2Dto3DDepthUp(void)
              {
                  UserData.uc2Dto3DDepth++;
C51 COMPILER V8.02   OSDVIEW                                                               08/07/2015 16:22:28 PAGE 69  

                  if (UserData.uc2Dto3DDepth > MAXIMUM_2DTO3D_DEPTH)
                      UserData.uc2Dto3DDepth  = MAXIMUM_2DTO3D_DEPTH;
                  else {
                      OSDShow2Dto3DDepth(FALSE);
              #if ENABLE_3D_CNV == ON
                      UserSet2DTo3DDepth();
              #endif
                  }    
                  SetOSDUpdUsrFlag();
              }
              
              void OSD2Dto3DViewDown(void)
              {
                  UserData.uc2Dto3DView--;
                  if ((UserData.uc2Dto3DView > MAXIMUM_2DTO3D_VIEW) ||
                      (UserData.uc2Dto3DView < MINIMUM_2DTO3D_VIEW))
                      UserData.uc2Dto3DView  = MINIMUM_2DTO3D_VIEW;
                  else {
                      OSDShow2Dto3DView(FALSE);
              #if ENABLE_3D_CNV == ON
                      UserSet2DTo3DView();
              #endif
                  }    
                  SetOSDUpdUsrFlag();
              }
              
              void OSD2Dto3DViewUp(void)
              {
                  UserData.uc2Dto3DView++;
                  if (UserData.uc2Dto3DView > MAXIMUM_2DTO3D_VIEW)
                      UserData.uc2Dto3DView  = MAXIMUM_2DTO3D_VIEW;
                  else {
                      OSDShow2Dto3DView(FALSE);
              #if ENABLE_3D_CNV == ON
                      UserSet2DTo3DView();
              #endif
                  }    
                  SetOSDUpdUsrFlag();
              }
              
              void OSD3DLRSwapDown(void)
              {
              #if ENABLE_SCALER_3D == ON
                  if (Is3DLRSwap()) {
                      TurnOff3DLRSwap();
                  }
                  else {
                      TurnOn3DLRSwap();
                  }
                  OSDShow3DLRSwap(FALSE);
                  UserSet3DLRSwap();
                  SetOSDUpdUsrFlag();
              #else
                  OSDShow3DLRSwap(FALSE);
                  SetOSDUpdUsrFlag();
              #endif
              }
              
              void OSD3DLRSwapUp(void)
              {
              #if ENABLE_SCALER_3D == ON
                  if (Is3DLRSwap()) {
C51 COMPILER V8.02   OSDVIEW                                                               08/07/2015 16:22:28 PAGE 70  

                      TurnOff3DLRSwap();
                  }
                  else {
                      TurnOn3DLRSwap();
                  }
                  OSDShow3DLRSwap(FALSE);
                  UserSet3DLRSwap();
                  SetOSDUpdUsrFlag();
              #else
                  OSDShow3DLRSwap(FALSE);
                  SetOSDUpdUsrFlag();
              #endif
              }
              
              void OSD3DTo2DDown(void)
              {
              #if ENABLE_SCALER_3D == ON
                  if (Is3DTo2DEnabled()) {
                      TurnOff3DTo2D();
                  }
                  else {
                      TurnOn3DTo2D();
                  }
                  OSDShow3DTo2D(FALSE);
                  UserSet3DTo2D();
                  SetOSDUpdUsrFlag();
              #else
                  OSDShow3DTo2D(FALSE);
                  SetOSDUpdUsrFlag();
              #endif
              }
              
              void OSD3DTo2DUp(void)
              {
              #if ENABLE_SCALER_3D == ON
                  if (Is3DTo2DEnabled()) {
                      TurnOff3DTo2D();
                  }
                  else {
                      TurnOn3DTo2D();
                  }
                  OSDShow3DTo2D(FALSE);
                  UserSet3DTo2D();
                  SetOSDUpdUsrFlag();
              #else
                  OSDShow3DTo2D(FALSE);
                  SetOSDUpdUsrFlag();
              #endif
              }
              #endif
4228          
4229          void OSDSourceMenuITMUp(void) 
4230          {
4231   1          UCHAR Index;
4232   1      
4233   1          Index = GetInputPortIndex(UserData.ucInputSource);
4234   1          if (GetInputPortName(++Index) >=  NUM_INPUT_SC) {
4235   2              Index = 0;
4236   2          }
4237   1      
4238   1          UserData.ucInputSource = GetInputPortName(Index);
4239   1      
C51 COMPILER V8.02   OSDVIEW                                                               08/07/2015 16:22:28 PAGE 71  

4240   1          OSDAPI_SelOSDWin(OSD_WINDOW2);
4241   1          OSDAPI_SetOSDWinSize(0, Index * 2 + 4, OSD_SRC_WIDTH - 1, Index * 2 + 4);
4242   1          OSDAPI_OSDWinOn(OSD_WINDOW2);
4243   1      }
4244                  
4245          void OSDSourceMenuITMDn(void) 
4246          {
4247   1          UCHAR Index;
4248   1      
4249   1          Index = GetInputPortIndex(UserData.ucInputSource);
4250   1          if (GetInputPortName(--Index) >= NUM_INPUT_SC) {
4251   2              Index = CheckTotalPortNum()-1;
4252   2          }
4253   1      
4254   1          UserData.ucInputSource = GetInputPortName(Index);
4255   1      
4256   1          OSDAPI_SelOSDWin(OSD_WINDOW2);
4257   1          OSDAPI_SetOSDWinSize(0, Index * 2 + 4, OSD_SRC_WIDTH - 1, Index * 2 + 4);
4258   1          OSDAPI_OSDWinOn(OSD_WINDOW2);
4259   1      }
4260          
4261          void OSDBFMenuITMUp(void) 
4262          {
4263   1          UserData.ucBFMode =
4264   1              (UserData.ucBFMode+1)%NUMBER_CE_MODES;
4265   1      
4266   1          OSDAPI_SelOSDWin(OSD_WINDOW2);
4267   1          OSDAPI_SetOSDWinSize(0, UserData.ucBFMode * 2 + 4, OSD_BF_WIDTH - 1, UserData.ucBFMode * 2 + 4);
4268   1          OSDAPI_OSDWinOn(OSD_WINDOW2);
4269   1          
4270   1      #if ENABLE_LD == ON
                  UserSetLD();
              #else
4273   1          UserSetBF();
4274   1      #endif
4275   1          SetOSDUpdUsrFlag();
4276   1      }
4277          
4278          void OSDBFMenuITMDn(void) 
4279          {
4280   1          UserData.ucBFMode =
4281   1              (UserData.ucBFMode+NUMBER_CE_MODES-1)%NUMBER_CE_MODES;
4282   1      
4283   1          OSDAPI_SelOSDWin(OSD_WINDOW2);
4284   1          OSDAPI_SetOSDWinSize(0, UserData.ucBFMode * 2 + 4, OSD_BF_WIDTH - 1, UserData.ucBFMode * 2 + 4);
4285   1          OSDAPI_OSDWinOn(OSD_WINDOW2);
4286   1      
4287   1      #if ENABLE_LD == ON
                  UserSetLD();
              #else
4290   1          UserSetBF();
4291   1      #endif
4292   1          SetOSDUpdUsrFlag();
4293   1      }
4294          
4295          //void OSDConfirmOSDRotation(void)
4296          //{
4297          //    OSDAPI_TurnOffOSD();
4298          //    UserSetOSDRotation();
4299          //    UserSetOSDH();
4300          //    UserSetOSDV();
4301          //    SetOSDUpdUsrFlag();
C51 COMPILER V8.02   OSDVIEW                                                               08/07/2015 16:22:28 PAGE 72  

4302          //}
4303          
4304          void OSDConfirmLanguage(void)
4305          {
4306   1          UserSetLanguage();
4307   1          SetOSDUpdUsrFlag();
4308   1      }
4309          
4310          void OSDConfirmInput(void)
4311          {
4312   1      
4313   1      #if ENABLE_ESD_PROTECT == ON
                  BacklightOff();
              #endif
4316   1          // Do not change the sequence of the following statements.
4317   1          //RecordCurrentSource(TRUE);
4318   1          UserSetInputSource();
4319   1          // XXX
4320   1          // Hot-fix to solve the issue of incorrect OSD state after turning off source menu under nosync/nocabl
             -e state.
4321   1          // We will improve OSD arch. to overcome this issue.
4322   1          APPResendAppSync();
4323   1          SetOSDUpdUsrFlag();
4324   1      }
4325          
4326          void OSDConfirmRecall(void)
4327          {
4328   1          if (ucPerformReset) 
4329   1              {
4330   2              OSDClearSubmenu();
4331   2                      OSDAPI_SetAlignType(OSD_ALIGN_CENTER);
4332   2                      OSDAPI_SetIndentIndex(64);
4333   2                      OSDAPI_ShowIndentString(FALSE, 5, 8, OSD_SUB_WIDTH, 
4334   2                                      WaitStrTab[UserData.ucLanguage]);
4335   2                      UserRecallConfiguration();
4336   2                      SetOSDUpdUsrFlag();
4337   2              if ((GetInputSyncMode() != DIG_SYNC) && (InputTiming.ucAutoTune != 0)) 
4338   2              {
4339   3                  SetOSDUpdTmgFlag();
4340   3              }
4341   2          }
4342   1          //OSDClosed();
4343   1      }
4344          
4345          #if ENABLE_FUNC_OSD == ON
              void OSDConfirm3DCnvMode(void)
              {
              #if ENABLE_3D_CNV == ON
                  UserSet2DTo3DMode();
              #endif
                  SetOSDUpdUsrFlag();
                  SetModeChangeFlag();
              }
              #endif
4355          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   9231    ----
   CONSTANT SIZE    =    370    ----
   XDATA SIZE       =     13     130
   PDATA SIZE       =   ----    ----
C51 COMPILER V8.02   OSDVIEW                                                               08/07/2015 16:22:28 PAGE 73  

   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----       5
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
