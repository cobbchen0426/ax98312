C51 COMPILER V8.02   SR                                                                    08/07/2015 16:22:33 PAGE 1   


C51 COMPILER V8.02, COMPILATION OF MODULE SR
OBJECT MODULE PLACED IN .\Bin\ADS\AXI\104N\SR.obj
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE App\SR.c LARGE OPTIMIZE(9,SPEED) BROWSE INCDIR(.\App;.\App\OSD;.\App\User;.
                    -\Lib;.\Lib\NT68655_770_850 Series;.\Lib\ScalerCfg;.\Phy\Panel;.\Phy\SI\NVT\Board;.\Phy\SI\NVT\Component;.\Phy\SI\NVT\Key
                    -pad;.\Sys;.\Sys\SI\NVT) DEFINE(SCALER_TYPE=NT68857,NT68857_DEMO,FLASH_BANK=4,X_ADS,X215) PRINT(.\Lst\SR.lst) OBJECT(.\Bi
                    -n\ADS\AXI\104N\SR.obj)

line level    source

   1          /******************************************************************************/
   2          /*                       Novatek MicroElectronics Corp.                       */
   3          /*       6F, No. 1-2, Innovation Road I, Science-Based Industrial Park,       */
   4          /*                         HsinChu 300, Taiwan, R.O.C.                        */
   5          /*                 TEL:886-3-567-0889       FAX:886-3-577-0132                */
   6          /*                            All Rights Reserved                             */
   7          /******************************************************************************/
   8          
   9          //******************************************************************************
  10          // I N C L U D E   F I L E S
  11          //******************************************************************************
  12          #include "Include.h"
  13          #include "ScalerProfile.h"
  14          
  15          #if ENABLE_SR == ON
  16          
  17          //******************************************************************************
  18          // M A C R O   D E F I N I T I O N S
  19          //******************************************************************************
  20          
  21          //******************************************************************************
  22          // G L O B A L   V A R I A B L E S
  23          //******************************************************************************
  24          
  25          //******************************************************************************
  26          // S T A T I C   V A R I A B L E S
  27          //******************************************************************************
  28          static code MDNBlock MDNModes[NUM_MDN_MODE] = {
  29              //MDN_FILTER_CUTOFF_TH, SLOP
  30              //VAR_TH,LOW_VAR_Gain,HIGH_VAR_Gain
  31              SR_MDN_1
  32          };
  33          
  34          static code USMRegionBlock USMRegionModes[NUM_USMRGN_MODE] = {
  35              //HIGH_PASS_FILTER_CUTOFF_TH
  36              //VAR_TH,LOW_VAR_Gain,HIGH_VAR_Gain
  37              SR_USMRegion_1,
  38              SR_USMRegion_2,
  39              SR_USMRegion_3,
  40              SR_USMRegion_4
  41          };
  42          
  43          static code USMGainBlock USMGainModes[NUM_USMGAIN_MODE] = {
  44              //Gain
  45              //VAR_TH,LOW_VAR_Gain,HIGH_VAR_Gain
  46              SR_USMGain_1,
  47              SR_USMGain_2,
  48              SR_USMGain_3,
  49              SR_USMGain_4
  50          };
  51          
  52          static code SRBlock SRModes[NUM_SR_MODE]= {
C51 COMPILER V8.02   SR                                                                    08/07/2015 16:22:33 PAGE 2   

  53              {//OFF
  54                  &MDNModes[MDN_MODE_1],
  55                  &USMRegionModes[USM_REGION_MODE_1],
  56                  &USMGainModes[USM_GAIN_MODE_1],
  57                  0x0000,  // 128 gray - low gray will be smooth = =
  58                  USM_DARK_LIMIT_OFF,
  59              },
  60              {//Weak
  61                  &MDNModes[MDN_MODE_1],
  62                  &USMRegionModes[USM_REGION_MODE_1],
  63                  &USMGainModes[USM_GAIN_MODE_1],
  64                  0x0000,
  65                  USM_DARK_LIMIT_OFF,
  66              },
  67              {//Median
  68                  &MDNModes[MDN_MODE_1],
  69                  &USMRegionModes[USM_REGION_MODE_2],
  70                  &USMGainModes[USM_GAIN_MODE_2],
  71                  0x0000,/*0x0025*/
  72                  USM_DARK_LIMIT_OFF,
  73              },
  74              {//Strong
  75                  &MDNModes[MDN_MODE_1],
  76                  &USMRegionModes[USM_REGION_MODE_3],
  77                  &USMGainModes[USM_GAIN_MODE_3],
  78                  0x0000,/*0x0030*/
  79                  USM_DARK_LIMIT_OFF,
  80              },
  81              {//Strongest
  82                  &MDNModes[MDN_MODE_1],
  83                  &USMRegionModes[USM_REGION_MODE_4],
  84                  &USMGainModes[USM_GAIN_MODE_4],
  85                  0x0000,/*0xC00*/
  86                  USM_DARK_LIMIT_OFF,
  87              }
  88          };
  89          
  90          //******************************************************************************
  91          // E X T E R N A L   V A R I A B L E   P R O T O T Y P E S
  92          //******************************************************************************
  93          
  94          //******************************************************************************
  95          // S T A T I C   F U N C T I O N   P R O T O T Y P E S
  96          //******************************************************************************
  97          
  98          //******************************************************************************
  99          // E X T E R N A L   F U N C T I O N   P R O T O T Y P E S
 100          //******************************************************************************
 101          
 102          /**************************************************************************//**
 103           * Configure the SR of Scaler
 104           ******************************************************************************/
 105          void InitSR(void)
 106          {
 107   1          SRAPI_InitSR();
 108   1          SRAPI_SetDemoRegion(OFF, SR_DEMO_LEFT, 0x0500);
 109   1      }
 110          
 111          /**************************************************************************//**
 112           * Set SR Mode.
 113           * @param SR mode.
 114           ******************************************************************************/
C51 COMPILER V8.02   SR                                                                    08/07/2015 16:22:33 PAGE 3   

 115          void SetSRMode(SRMode mode)
 116          {
 117   1      #if IS_NT68770_SERIES || IS_NT68850_SERIES || IS_NT68655_SERIES || IS_NT68790_SERIES
 118   1          if (mode == SR_MODE_OFF) {
 119   2              SRAPI_TurnOnOff(OFF);
 120   2         }
 121   1          else {
 122   2              SRAPI_SetMDNFilter(SRModes[mode].pMDNLPF);
 123   2              SRAPI_SetUSMFilter(SRModes[mode].pSRHPRegion, SRModes[mode].pSRHPGain);
 124   2              SRAPI_SetUSMLPThreshold(SRModes[mode].usLPFGain);
 125   2              SRAPI_SetUSMDarkLimit(SRModes[mode].bDarkLimit);
 126   2      #if 0 //CSCEnhance
                      SC_SR_CONTROL = 0x00;
              #endif
 129   2              SRAPI_TurnOnOff(ON);
 130   2      
 131   2          }
 132   1          //WaitDisVSync();
 133   1              
 134   1          SetColorSpace();
 135   1      #if 0 //CSCEnhance
                      SC_SR_CONTROL = 0x30;
              #endif
 138   1      #else
                  if (mode == SR_MODE_OFF) {
                      SRAPI_TurnOnOff(OFF);
                  }
                  else {
                      SRAPI_TurnOnOff(ON);
                      SRAPI_SetMDNFilter(SRModes[mode].pMDNLPF);
                      SRAPI_SetUSMFilter(SRModes[mode].pSRHPRegion, SRModes[mode].pSRHPGain);
                      SRAPI_SetUSMLPThreshold(SRModes[mode].usLPFGain);
                  }        
              #endif    
 149   1      }
 150          
 151          #if IS_NT68661_SERIES || IS_NT68770_SERIES || IS_NT68850_SERIES || IS_NT68655_SERIES || IS_NT68790_SERIES
 152          /**************************************************************************//**
 153           * Set Htotal (HPLL divider) pixel of SR.
 154           * Before SR block bypass disable, htotal must be setting ready.
 155           * If input timing Htotal be changed, It must be update at the same time.
 156           * @param htotal Horizontal pixel count of input timing.
 157           ******************************************************************************/
 158          void SetSRHtotal(USHRT htotal)
 159          {
 160   1          SRAPI_SetHtotal(htotal);
 161   1      }
 162          
 163          /**************************************************************************//**
 164           * Set input timing Htotal,H width,V height of SR.
 165           * Before SR block bypass disable, input timing parameter must be setting ready.
 166           ******************************************************************************/
 167          void SetSRInputTimingParameter(void)
 168          {
 169   1          xdata USHRT htotal_temp;
 170   1          UCHAR ch;
 171   1          ch = 0;
 172   1          if (GetInputSyncMode() == DIG_SYNC) {
 173   2          #if (INPUT_INTERFACE&INPUT_DP)  
 174   2              if (GetCurrInputInterface() == DISPLAY_PORT_INPUT) {
 175   3                  htotal_temp = (ULONG)DP_GetClock()*10000/GetInputHFreq();
 176   3              }
C51 COMPILER V8.02   SR                                                                    08/07/2015 16:22:33 PAGE 4   

 177   2              else
 178   2          #endif
 179   2              {
 180   3       #if ENABLE_HDMI == ON
 181   3                      htotal_temp = (ULONG)TMDSDeepColorDetection()*10000/GetInputHFreq();
 182   3                      if ((SC_HDMI_DET & BIT1) != 0) {
 183   4                          //Set repeat for Manual CSC mode
 184   4                          ch = SC_HDMI_AVI[4] & 0x0F;
 185   4                          if (ch == 0x01) {//pixel sent 2 times
 186   5                              htotal_temp >>= 1; 
 187   5                          }
 188   4                          else if (ch == 0x03) {//pixel sent 4 times
 189   5                              htotal_temp >>= 2;
 190   5                          }
 191   4                      }
 192   3      #else
                             htotal_temp = (ULONG)TMDS_GetClock()*10000/GetInputHFreq();
              #endif
 195   3              }
 196   2                      
 197   2              SRAPI_SetHtotal(htotal_temp);
 198   2              if (IsInterlaced()) {
 199   3                  SRAPI_SetCaptureSize(ReadShortScaler(&SC_GI_CAP_HWID_LO), ReadShortScaler(&SC_GI_CAP_VLEN_LO) 
             ->> 1);
 200   3              }
 201   2              else{
 202   3                  SRAPI_SetCaptureSize(ReadShortScaler(&SC_GI_CAP_HWID_LO), ReadShortScaler(&SC_GI_CAP_VLEN_LO))
             -;
 203   3              }
 204   2          }
 205   1          else {
 206   2              SRAPI_SetHtotal(GetAngInputHTotal());
 207   2              if (IsInterlaced()) {
 208   3                 SRAPI_SetCaptureSize(InputTiming.usCapHActive, InputTiming.usCapVActive >> 1);
 209   3              }
 210   2              else{
 211   3                 SRAPI_SetCaptureSize(InputTiming.usCapHActive, InputTiming.usCapVActive);            
 212   3              }
 213   2          }
 214   1      }
 215          
 216          /**************************************************************************//**
 217           * Set SR block bypass.
 218           * @param on if on is TRUE(bypass),on is FALSE(not bypass)
 219           ******************************************************************************/
 220          void SetSRBlockOnOff(UCHAR on)
 221          {
 222   1          if (on) {
 223   2              SRAPI_SRBlockEnable();
 224   2          }
 225   1          else {
 226   2              SRAPI_SRBlockDisable();
 227   2          }
 228   1      }
 229          #endif
 230          #else
              void ForSRCompilerCodePass(void)
              {
                code UCHAR temp[]={0x00};
                UCHAR i;
                i = temp[0];
              }
C51 COMPILER V8.02   SR                                                                    08/07/2015 16:22:33 PAGE 5   

              #endif //ENABLE_SR == ON


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    485    ----
   CONSTANT SIZE    =    106    ----
   XDATA SIZE       =      6       4
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
