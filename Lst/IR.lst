C51 COMPILER V8.02   IR                                                                    08/07/2015 16:22:31 PAGE 1   


C51 COMPILER V8.02, COMPILATION OF MODULE IR
OBJECT MODULE PLACED IN .\Bin\ADS\AXI\104N\IR.obj
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE Phy\SI\NVT\Keypad\IR.c LARGE OPTIMIZE(9,SPEED) BROWSE INCDIR(.\App;.\App\OS
                    -D;.\App\User;.\Lib;.\Lib\NT68655_770_850 Series;.\Lib\ScalerCfg;.\Phy\Panel;.\Phy\SI\NVT\Board;.\Phy\SI\NVT\Component;.\
                    -Phy\SI\NVT\Keypad;.\Sys;.\Sys\SI\NVT) DEFINE(SCALER_TYPE=NT68857,NT68857_DEMO,FLASH_BANK=4,X_ADS,X215) PRINT(.\Lst\IR.ls
                    -t) OBJECT(.\Bin\ADS\AXI\104N\IR.obj)

line level    source

   1          /******************************************************************************/
   2          /*                       Novatek MicroElectronics Corp.                       */
   3          /*       6F, No. 1-2, Innovation Road I, Science-Based Industrial Park,       */
   4          /*                         HsinChu 300, Taiwan, R.O.C.                        */
   5          /*                 TEL:886-3-567-0889       FAX:886-3-577-0132                */
   6          /*                            All Rights Reserved                             */
   7          /******************************************************************************/
   8          /******************************************************************************/
   9          /*       KeyPad.h                                                             */
  10          /*       Release Date:2010/01/21       Last Maintenance:2010/07/28            */
  11          /*       Original Version:2.0.00       Last Version:2.0.02                    */
  12          /*       Coding By: Mingyu Huang       Maintenance By: Mingyu Huang           */
  13          /******************************************************************************/
  14          
  15          //******************************************************************************
  16          // I N C L U D E   F I L E S
  17          //******************************************************************************
  18          #include "Include.h"
  19          
  20          #if ENABLE_IR == ON
  21          //******************************************************************************
  22          // G L O B A L   D E F I N I T I O N S
  23          //******************************************************************************
  24          #define _TIME_BASE_
  25          #define TIME_BASE_HOLDING_TIME 450
  26          #define TIME_BASE_REPEAT_TIME 150
  27          //******************************************************************************
  28          // G L O B A L   V A R I A B L E S
  29          //******************************************************************************
  30          
  31          
  32          
  33          idata unsigned char  ucTimer_IR = 0xFF;
  34          idata unsigned char      ucIRStatus = 0;
  35          idata unsigned char      ucIRBitsCnt = 0;
  36          bit bIrDetect = 0;
  37          bit bIrReleaseFlag = 0;
  38          bit bHotOSD = 0;
  39          idata unsigned char  ucCurIRKey = 0;
  40          idata unsigned char  ucPrevIRKey = 0;
  41          idata unsigned short  ucIRReleaseCountTimer = 0;
  42          xdata unsigned char  HoldMenuCount = 0;
  43          xdata unsigned char  HoldKeyCount = 0;
  44          xdata unsigned char  ucCurKeyChangeCs = 0;
  45          //for debug use
  46          #if 0//def 1//Debug_IR
              xdata unsigned char  IR_DECODE_TABLE[40];
              xdata unsigned char  IR_Index;
              xdata unsigned short usTimerIR_1msSave[3];
              idata unsigned short usTimerIR_1ms;
              #endif
  52          
C51 COMPILER V8.02   IR                                                                    08/07/2015 16:22:31 PAGE 2   

  53          
  54          //******************************************************************************
  55          // S T A T I C   V A R I A B L E S
  56          //******************************************************************************
  57          
  58          //******************************************************************************
  59          // E X T E R N A L   V A R I A B L E   P R O T O T Y P E S
  60          //******************************************************************************
  61          extern BOOL bIsAPLLPowerDown;
  62          
  63          //******************************************************************************
  64          // S T A T I C   F U N C T I O N   P R O T O T Y P E S
  65          //******************************************************************************
  66          
  67          //******************************************************************************
  68          // E X T E R N A L   F U N C T I O N   P R O T O T Y P E S
  69          //******************************************************************************
  70          
  71          #define BUTTON_INVALID 0xff
  72          code unsigned char IR_KeyTab[]=
  73          {    
  74              BUTTON_INVALID,                  //0x00
  75              BUTTON_INVALID,                  //0x01
  76              KEYCODE_PWR,                   //0x02
  77              KEYCODE_DIR_INPUT,                   //0x03
  78              KEYCODE_DIR_SCALING_TYPE,                   //0x04
  79              BUTTON_INVALID,                   //0x05
  80              KEYCODE_DIR_SENSEYE,                  //0x06
  81              KEYCODE_DIR_BRIGHTNESS,                   //0x07
  82              KEYCODE_DIR_CONTRAST,                   //0x08
  83              BUTTON_INVALID,                   //0x09
  84              BUTTON_INVALID,         //0x0a
  85              BUTTON_INVALID,         //0x0b
  86              BUTTON_INVALID,         //0x0c
  87              KEYCODE_UP,         //0x0d
  88              KEYCODE_DOWN,            //0x0e
  89              KEYCODE_DOWN,        //0x0f
  90              KEYCODE_UP,             //0x10
  91              KEYCODE_DIR_ENTER,       //0x11
  92              KEYCODE_MENU,          //0x12
  93              KEYCODE_DIR_EXIT,        //0x13
  94              KEYCODE_DIR_VOLUME_UP,           //0x14
  95              KEYCODE_DIR_VOLUME_DOWN,               //0x15
  96              KEYCODE_DIR_MUTE,        //0x16
  97              BUTTON_INVALID,        //0x17
  98              BUTTON_INVALID,  //0x18
  99              BUTTON_INVALID,        //0x19
 100              BUTTON_INVALID,           //0x1a
 101              BUTTON_INVALID,                //0x1b
 102              BUTTON_INVALID,       //0x1c
 103              BUTTON_INVALID,       //0x1d
 104              BUTTON_INVALID,             //0x1e
 105              BUTTON_INVALID,          //0x1f
 106          };
 107          
 108          
 109          void IR_Initalize()
 110          {
 111   1          //unsigned char i;
 112   1          //initialize variables
 113   1          //printf("Initalize IR\r\n");
 114   1          bIrDetect = 0;
C51 COMPILER V8.02   IR                                                                    08/07/2015 16:22:31 PAGE 3   

 115   1          ucCurIRKey = 0xFF;
 116   1          ucIRReleaseCountTimer = 0;
 117   1          ucIRBitsCnt = 0;
 118   1          ucIRStatus = S_IR_IDLE;
 119   1              ucTimer_IR = 0xFF;
 120   1          HoldMenuCount = 0;
 121   1              ucCurKeyChangeCs = 1;
 122   1              bHotOSD = 0;
 123   1              HoldKeyCount = 0;
 124   1              //for debug use
 125   1      #if 0//def 1//Debug_IR
                      IR_Index = 0;
                      for(i=0;i<40;i++)
                              IR_DECODE_TABLE[i]=0xff;
                      usTimerIR_1ms = 0;
                      usTimerIR_1msSave[0] =0;
                      usTimerIR_1msSave[1] =0;
                      usTimerIR_1msSave[2] =0;
              #endif
 134   1              //enable EXT INT
 135   1          INTEXT_FLG = INTE2;
 136   1              INTEXT_EN =  INTE2;
 137   1              
 138   1              //IT1 = 0;
 139   1              //i = INTEXT_EN;
 140   1              //printf("INTEXT_EN %d\r\n",(unsigned short)i);    
 141   1      }
 142          
 143          
 144          void ucIRReleaseCountCheck()
 145          {
 146   1      #if defined(_TIME_BASE_)
 147   1          if ( bIrReleaseFlag ) 
 148   1              {
 149   2              if ( (GetTimerTick()-ucIRReleaseCountTimer) > TIME_BASE_HOLDING_TIME ) 
 150   2                      {
 151   3                  bIrReleaseFlag = 0;
 152   3                  if(bIrDetect)
 153   3                  {
 154   4                      ucIRReleaseCountTimer = GetTimerTick();
 155   4                  }
 156   3                  else
 157   3                  {
 158   4                      ucIRBitsCnt = 0;
 159   4                      ucIRStatus = S_IR_IDLE;
 160   4                      ucCurIRKey = 0xFF;
 161   4                      //bIrReleaseFlag = TRUE;
 162   4                  }
 163   3              }
 164   2          }
 165   1      #else
                  if(ucIRReleaseCountTimer)
                  {
                      ucIRReleaseCountTimer--;
                      if( ucIRReleaseCountTimer == 0 )
                      {
                          if(bIrDetect)
                          {
                              ucIRReleaseCountTimer = IR_HOLDING_TIME;
                          }
                          else
                          {
C51 COMPILER V8.02   IR                                                                    08/07/2015 16:22:31 PAGE 4   

                              ucIRBitsCnt = 0;
                              ucIRStatus = S_IR_IDLE;
                              ucCurIRKey = 0xFF;
                              bIrReleaseFlag = TRUE;
                          }
                      }
                  }
              #endif
 185   1      }
 186          
 187          
 188          void IR_Process() 
 189          {
 190   1          idata unsigned char IRError = 0 ,IR_Count;
 191   1              static idata unsigned short usData;
 192   1          static idata UCHAR IR_RepeatCount = 0;
 193   1      static UCHAR AA=0;
 194   1              
 195   1              IR_Count = ucTimer_IR;
 196   1              ucTimer_IR = 0;
 197   1      
 198   1              
 199   1          
 200   1      
 201   1      if(AA==0){
 202   2              AA=1;
 203   2              LedRedOn();
 204   2              return;
 205   2      }else {
 206   2              AA=0;
 207   2              LedRedOff();
 208   2              return;
 209   2      }
 210   1      
 211   1      
 212   1              //for debug use
 213   1      #if 0   //def Debug_IR
                      //if(IR_DECODE_TABLE[IR_Index]==0xff);
                      if(IR_Count != 0xff){
                              IR_DECODE_TABLE[IR_Index++]= IR_Count;
                  }
              #endif
 219   1      
 220   1          if(bIsAPLLPowerDown == TRUE)
 221   1              {
 222   2              if(IR_Count <= 204){
 223   3                  IR_Count = ((USHRT)IR_Count * 5) / 4;
 224   3              }
 225   2              else{
 226   3                  IR_Count = 0xff;
 227   3              }
 228   2          }
 229   1          
 230   1              
 231   1           switch( ucIRStatus )
 232   1           {
 233   2              case S_IR_IDLE:            
 234   2                  if ( abs(IR_Count - IR_START )< IR_S_R_Range ) //is Head code
 235   2                  {
 236   3                      usData = 0;
 237   3                      ucIRBitsCnt = 0;
 238   3                      ucIRStatus = S_IR_HEAD;                
C51 COMPILER V8.02   IR                                                                    08/07/2015 16:22:31 PAGE 5   

 239   3                  }
 240   2                  else if ( abs(IR_Count - IR_REPEAT )< IR_S_R_Range ) //is Repeat code
 241   2                  {
 242   3                      IR_RepeatCount++;
 243   3      #if defined(_TIME_BASE_)
 244   3                      if( bIrReleaseFlag && IR_RepeatCount >= IR_REPEAT_COUNTER)
 245   3      #else
                              if(ucIRReleaseCountTimer && IR_RepeatCount >= IR_REPEAT_COUNTER)
              #endif
 248   3                      {
 249   4                          bIrDetect = 1;
 250   4                          IR_RepeatCount = IR_REPEAT_COUNTER;
 251   4                      }
 252   3                  }                           
 253   2              break;
 254   2      
 255   2                      case S_IR_HEAD:
 256   2      /*
 257   2                  if ( abs(IR_Count - IR_CODE_0 )< IR_0_1_Range ) //is value 0
 258   2                  {
 259   2                      usData >>= 1;
 260   2                      ucIRBitsCnt++;
 261   2                  }
 262   2                  else// if ( abs(IR_Count - IR_CODE_1 )< IR_0_1_Range ) //is value 1
 263   2                  {
 264   2                      usData >>= 1;
 265   2                      usData |= 0x8000;
 266   2                      ucIRBitsCnt++;
 267   2                  }
 268   2                  else //is Error
 269   2                  {
 270   2                      IRError = 1;
 271   2                  }
 272   2      */
 273   2                  if ( IR_Count < IR_Data_Range ) //is value 0
 274   2                  {
 275   3                      usData >>= 1;
 276   3                      ucIRBitsCnt++;
 277   3                  }
 278   2                  else
 279   2                  {
 280   3                      usData >>= 1;
 281   3                      usData |= 0x8000;
 282   3                      ucIRBitsCnt++;
 283   3                  }
 284   2      
 285   2                  if (ucIRBitsCnt == 16)
 286   2                  {
 287   3                      //usTimerIR_1msSave[0] = usData;
 288   3                      if ( usData == SYS_HEAD_CODE ) //is OK system code
 289   3                      {
 290   4                          usData = 0;
 291   4                          ucIRStatus = S_IR_DATA;
 292   4                      }
 293   3                      else
 294   3                      {
 295   4                          IRError = 1;
 296   4                      }
 297   3                  }
 298   2              break;
 299   2      
 300   2              case S_IR_DATA:
C51 COMPILER V8.02   IR                                                                    08/07/2015 16:22:31 PAGE 6   

 301   2      /*
 302   2                  if ( abs(IR_Count - IR_CODE_0 )< IR_0_1_Range ) //is value 0
 303   2                  {
 304   2                      usData >>= 1;
 305   2                      ucIRBitsCnt++;
 306   2                  }
 307   2                  else if ( abs(IR_Count - IR_CODE_1 )< IR_0_1_Range ) //is value 1
 308   2                  {
 309   2                      usData >>= 1;
 310   2                      usData |= 0x8000;
 311   2                      ucIRBitsCnt++;
 312   2                  }
 313   2                  else
 314   2                  {
 315   2                      IRError = 1;
 316   2                  }
 317   2      */
 318   2                  if ( IR_Count < IR_Data_Range ) //is value 0
 319   2                  {
 320   3                      usData >>= 1;
 321   3                      ucIRBitsCnt++;
 322   3                  }
 323   2                  else
 324   2                  {
 325   3                      usData >>= 1;
 326   3                      usData |= 0x8000;
 327   3                      ucIRBitsCnt++;
 328   3                  }
 329   2      
 330   2                  if (ucIRBitsCnt == 32)
 331   2                  {
 332   3                      usData ^= 0xFF00;
 333   3                      //usTimerIR_1msSave[1] = usData;
 334   3                                      if( ((usData>>8)-(usData&0x00FF)) == 0) //is OK data
 335   3                      {
 336   4                          bIrDetect = 1;
 337   4                          ucCurIRKey = (unsigned char)(usData&0x00FF);
 338   4                          ucIRStatus = S_IR_IDLE;
 339   4                          IR_RepeatCount = 0;
 340   4                      }
 341   3                      else
 342   3                      {
 343   4                          IRError = 1;
 344   4                      }
 345   3                  }
 346   2              break;
 347   2                      
 348   2                      default:
 349   2                              IRError = 1;
 350   2                      break;
 351   2           }
 352   1      
 353   1           if ( IRError )
 354   1           {
 355   2              ucIRStatus = S_IR_IDLE;
 356   2           }
 357   1      }
 358          
 359          
 360          
 361          unsigned char IR_GET_KEY()
 362          {
C51 COMPILER V8.02   IR                                                                    08/07/2015 16:22:31 PAGE 7   

 363   1          unsigned char ucIRCode = 0xff;
 364   1          unsigned char ucTmpMath = ucCurIRKey;
 365   1      
 366   1      //do{
 367   1      #if 0
                  UCHAR i = 0;    
                  if(IR_Index != 0x00)
                      {
                      printf("\r\nucIRStatus=%x, ucIRBitsCnt=%x, DataCode=%x\r\n", (USHRT)ucIRStatus, (USHRT)ucIRBitsCnt
             -, usTimerIR_1msSave[0]);
                      for(i = 0; i < IR_Index; i++)
                              {
                          printf("%d:%d\r\n", (USHRT)i, (USHRT)IR_DECODE_TABLE[i]);
                      }
                      
                      IR_Index = 0;        
                  }
              #endif    
 380   1      
 381   1          if(bIrDetect)
 382   1          {
 383   2      //        LedGreenOn();
 384   2              bIrDetect = 0;
 385   2              ucTmpMath %= IR_MASK;
 386   2              ucIRCode = IR_KeyTab[ucTmpMath];
 387   2              //printf("ucTmpMath=%x, ucIRCode=%x\r\n", (USHRT)ucTmpMath, (USHRT)ucIRCode);
 388   2              //printf("IR=%x\r\n", (unsigned short)ucTmpMath);
 389   2      #if defined(_TIME_BASE_)
 390   2              ucIRReleaseCountTimer = GetTimerTick();
 391   2              if ( ucIRCode!=KEYCODE_PWR )
 392   2                  bIrReleaseFlag = 1;
 393   2      #else
                      ucIRReleaseCountTimer = IR_HOLDING_TIME;
              #endif
 396   2          }
 397   1      
 398   1      #if defined(_TIME_BASE_)
 399   1          else if ( bIrReleaseFlag && (GetTimerTick()-ucIRReleaseCountTimer) < TIME_BASE_REPEAT_TIME ) 
 400   1      #else
                  else if ( ucIRReleaseCountTimer > IR_HOLDING_TIME-IR_REPEAT_TIME ) 
              #endif
 403   1              {
 404   2              ucTmpMath %= IR_MASK;
 405   2              ucIRCode = IR_KeyTab[ucTmpMath];
 406   2          }
 407   1      
 408   1      
 409   1          return ucIRCode;
 410   1      }
 411          
 412          
 413          
 414          UCHAR ScanIrKey()
 415          {
 416   1          UCHAR evt = IR_GET_KEY();
 417   1      /*    
 418   1          switch(evt){
 419   1              case KEYCODE_DIR_INPUT:
 420   1                  if (GetOSDState() != OSD_DIRMENU_SOURCE)
 421   1                      OSDCloseAll();
 422   1                  evt = KEYCODE_FUNC;
 423   1                  break;
C51 COMPILER V8.02   IR                                                                    08/07/2015 16:22:31 PAGE 8   

 424   1              case KEYCODE_DIR_ENTER:
 425   1                  if ((GetOSDState() == OSD_OFF_STATE) || (GetModeHandleState() != WAIT_MODE_CHANGE))
 426   1                      evt = 0xff;
 427   1                  else
 428   1                      evt = KEYCODE_FUNC;
 429   1                  break;
 430   1          }
 431   1              */
 432   1          return evt;
 433   1      }
 434          
 435          #endif
 436          
 437          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    232    ----
   CONSTANT SIZE    =     32    ----
   XDATA SIZE       =     10       2
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =     10       2
   BIT SIZE         =      3    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
